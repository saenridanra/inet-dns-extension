<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>DNS.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>df/d90/DNS_8h</filename>
    <class kind="struct">ODnsExtension::Query</class>
    <class kind="struct">ODnsExtension::DNSQuestion</class>
    <class kind="struct">ODnsExtension::Response</class>
    <class kind="struct">ODnsExtension::SRVData</class>
    <class kind="struct">ODnsExtension::DNSRecord</class>
    <namespace>ODnsExtension</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_A</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a8ad10b7e8af14b060ee91ff78cb6a8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_NS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a34949f61cf814d35d727c1aafbbff642</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_CNAME</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a473b8041906a9af6d2672f2ad7deb636</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_SOA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aff8deda14e693b7b76dd365f7c056e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_NULL</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a818867c62e0cd35f37d25ad8ccb5fe5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_PTR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a330d99f5b7f49581b57d1795dc794253</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_HINFO</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a902c234134801d119b7cb29c67e0af01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_MINFO</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a32186749ae3507b717fc4ace2fb83615</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_MX</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aa4dd08c64f36a980aacc1227cfd3f260</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_TXT</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ab64d1044637a2dd9bda6bee28ab5d2f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_AAAA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ad60cb47d7da09044c95420b0db294e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_SRV</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ab5e4e846e8413750385db6c1b6d239f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_A</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a452aed1cac945a9721905a10e01583c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_NS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>af98ce1b5dac090d11cbf2888d34fa8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_CNAME</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a15e993799fc3bdada6d863f1a9089c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_SOA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a1fb0766fee820fee8bb6c2691a637bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_NULL</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a09cf751e97c6aee8bb3e9c8ae47bdd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_PTR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a3618a6d52d8ee12924bea989848e3734</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_HINFO</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a7c5227c45954f69f0be57e2740feb999</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_MINFO</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a869ccb001087bcc34ec789f3d99fcc2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_MX</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a0e986364c37728357f2bb6548498fcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_TXT</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>abec90afa8ff8b5846c477dd9ba23db63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_AAAA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a88009c3e8807d2b62c520fa6782c8f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_SRV</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a0caac14cc431b1b3750da66acb8590b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_AXFR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a2be1f4273e26a7335e618926b94ac533</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_ANY</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a3e72cc70d3936af1f78ac8127cc39d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_AXFR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>af38c57d748e6e6ba4d603f7fee8d094d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_ANY</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a1fb288d50a6b8162b8ebbf523d6924cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_IN</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a9cc84b120d830f184e7249db81ed1736</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_CS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>afe503bec10b85f53a869bae9178c7f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_CH</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aa3eb5221ee3ac4ac83cd88b74553e15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_HS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>abfa6914cc6fb0b8e086e07e35e22bdbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_ANY</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a5559ce92af93f2440518dcec488986e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_IN</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a276f4dafc8a5ff0fef9124ef85be081d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_CS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a362d6e3355bcdf3c50cc2df160f35690</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_CH</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>af8a20f6512bdc2d123481acd64b3c9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_HS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a16f99d184ee86357f52432a50d9c04bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_ANY</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a792d2cbf818bcf121619638a294fa954</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_PORT</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ab1d3f5c08428c20521a92ca2fa20f46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_QR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a341b1b221aec81be28332b87523d131b</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_OPCODE</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ab7235624b8f3e51d7c9d16c7851408a9</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_AA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a1d02d86437fc672d8728075707fdb989</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_TC</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a729c94e16aee82df7113ef9ae152850c</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_RD</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a79416d9667448e1a544f30abb8dec9e8</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_RA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ae8fb38aad7beed1ca780f559a6cc2dc5</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_Z</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a800356871631da55c47ba406eece35e0</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_RCODE</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>abaa6c7669b9d66693dd70e909675d979</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_QR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a7a9a911d4b85bc87952616d5f6b1475c</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_OPCODE</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a0e69b7bc433f85cd02d4f6e8585a3113</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_AA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aaa53d31cff982c92490f73c1cefab764</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_TC</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a45a0d8e9bb43257ae202842475b20cfa</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_RD</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a77f7561409370156f2c6ac01e03c6e0b</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_RA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a0841e2a16a1dc5e13e6f8709a7c84989</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_Z</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a4809a52a0d335c2fb1137a5e4fa14e57</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_RCODE</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aa39e8f83fc2a8d3d4fee492798e04b11</anchor>
      <arglist>(h, v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSAuthServer.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>df/def/DNSAuthServer_8cc</filename>
    <includes id="da/d6f/DNSAuthServer_8h" name="DNSAuthServer.h" local="yes" imported="no">DNSAuthServer.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>df/def/DNSAuthServer_8cc.html</anchorfile>
      <anchor>a39ed6b8494b281308d1f2f38f7e1a421</anchor>
      <arglist>(DNSAuthServer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSAuthServer.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>da/d6f/DNSAuthServer_8h</filename>
    <includes id="dc/db7/DNSServerBase_8h" name="DNSServerBase.h" local="yes" imported="no">DNSServerBase.h</includes>
    <includes id="da/dc0/DNSZoneConfig_8h" name="DNSZoneConfig.h" local="yes" imported="no">DNSZoneConfig.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <class kind="class">DNSAuthServer</class>
  </compound>
  <compound kind="file">
    <name>DNSCache.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>d5/d9f/DNSCache_8cc</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>DNSCache.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>dd/d72/DNSCache_8h</filename>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="yes" imported="no">DNSTools.h</includes>
    <class kind="class">ODnsExtension::DNSCache</class>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>DNSClient.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>df/d43/DNSClient_8cc</filename>
    <includes id="d8/dd8/DNSClient_8h" name="DNSClient.h" local="yes" imported="no">DNSClient.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>df/d43/DNSClient_8cc.html</anchorfile>
      <anchor>a06623ad7f979494f3e48d4db3d1dcd75</anchor>
      <arglist>(DNSClient)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSClient.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>d8/dd8/DNSClient_8h</filename>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="yes" imported="no">DNSTools.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d3/db7/DNSSimpleCache_8h" name="DNSSimpleCache.h" local="yes" imported="no">DNSSimpleCache.h</includes>
    <class kind="class">DNSClient</class>
  </compound>
  <compound kind="file">
    <name>DNSClientTraffGen.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>d0/df9/DNSClientTraffGen_8cc</filename>
    <includes id="db/dc5/DNSClientTraffGen_8h" name="DNSClientTraffGen.h" local="no" imported="no">DNSClientTraffGen.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d0/df9/DNSClientTraffGen_8cc.html</anchorfile>
      <anchor>a5ef0fc1a63f7c6a03def2ce6c82aa04a</anchor>
      <arglist>(DNSClientTraffGen)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSClientTraffGen.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>db/dc5/DNSClientTraffGen_8h</filename>
    <includes id="d8/dd8/DNSClient_8h" name="DNSClient.h" local="no" imported="no">DNSClient.h</includes>
    <class kind="class">DNSClientTraffGen</class>
  </compound>
  <compound kind="file">
    <name>DNSEchoServer.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>d0/d64/DNSEchoServer_8cc</filename>
    <includes id="d5/db6/DNSEchoServer_8h" name="DNSEchoServer.h" local="yes" imported="no">DNSEchoServer.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d0/d64/DNSEchoServer_8cc.html</anchorfile>
      <anchor>a211c0c4e4810c6bf45e504c978e1acb8</anchor>
      <arglist>(DNSEchoServer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSEchoServer.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>d5/db6/DNSEchoServer_8h</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="yes" imported="no">DNSTools.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <class kind="class">DNSEchoServer</class>
  </compound>
  <compound kind="file">
    <name>DNSLocalCache.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>d2/d5a/DNSLocalCache_8cc</filename>
    <includes id="da/dd7/DNSLocalCache_8h" name="DNSLocalCache.h" local="yes" imported="no">DNSLocalCache.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d2/d5a/DNSLocalCache_8cc.html</anchorfile>
      <anchor>ac9964113e3f1d1023961be0cab51db4a</anchor>
      <arglist>(DNSLocalCache)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSLocalCache.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>da/dd7/DNSLocalCache_8h</filename>
    <includes id="dc/db7/DNSServerBase_8h" name="DNSServerBase.h" local="yes" imported="no">DNSServerBase.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="yes" imported="no">DNSTTLCache.h</includes>
    <includes id="d3/db7/DNSSimpleCache_8h" name="DNSSimpleCache.h" local="yes" imported="no">DNSSimpleCache.h</includes>
    <class kind="class">DNSLocalCache</class>
  </compound>
  <compound kind="file">
    <name>DNSPacket_m.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/messages/</path>
    <filename>de/d08/DNSPacket__m_8h</filename>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">../common/DNS.h</includes>
    <class kind="class">DNSPacket</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::DNSQuestion</type>
      <name>DNSQuestion</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>a6d9896ff23ef8ef009e284dd9424716d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::DNSRecord</type>
      <name>DNSRecord</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>a2d014093cd0e4c36168e02f26cf4e03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>ac1cda762091fc699694687663984c331</anchor>
      <arglist>(cCommBuffer *b, DNSPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>a234bd1965526082d499d0619e17749d5</anchor>
      <arglist>(cCommBuffer *b, DNSPacket &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSServerBase.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>d7/da9/DNSServerBase_8cc</filename>
    <includes id="dc/db7/DNSServerBase_8h" name="DNSServerBase.h" local="yes" imported="no">DNSServerBase.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d7/da9/DNSServerBase_8cc.html</anchorfile>
      <anchor>aa9b77013eaf39f86140d9d4510e42dbe</anchor>
      <arglist>(DNSServerBase)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSServerBase.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>dc/db7/DNSServerBase_8h</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="yes" imported="no">DNSTools.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <class kind="struct">ODnsExtension::CachedQuery</class>
    <class kind="class">DNSServerBase</class>
    <namespace>ODnsExtension</namespace>
    <member kind="typedef">
      <type>struct ODnsExtension::CachedQuery</type>
      <name>cached_query</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a37b5b26fb07ea2e2545bf2c1ebd3a763</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSSimpleCache.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>d3/d19/DNSSimpleCache_8cc</filename>
    <includes id="d3/db7/DNSSimpleCache_8h" name="DNSSimpleCache.h" local="no" imported="no">DNSSimpleCache.h</includes>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>DNSSimpleCache.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>d3/db7/DNSSimpleCache_8h</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d9/ded/Utils_8h" name="Utils.h" local="yes" imported="no">utils/Utils.h</includes>
    <class kind="class">ODnsExtension::DNSSimpleCache</class>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>DNSTools.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/utils/</path>
    <filename>d6/d90/DNSTools_8cc</filename>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <namespace>ODnsExtension</namespace>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createQuery</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a749b296236a76c43434278b6a92cb70c</anchor>
      <arglist>(std::string msg_name, std::string name, unsigned short dnsclass, unsigned short type, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createNQuery</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a3f06c0fa8745e9f2b0c3d8b2aaf3aa4f</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Query &gt;</type>
      <name>resolveQuery</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>acf37904a6861ce340403d0374fd42805</anchor>
      <arglist>(cPacket *query)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createResponse</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aa3640f8897e99d1894e26c46e9cf7815</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short opcode, unsigned short AA, unsigned short rd, unsigned short ra, unsigned short rcode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aef4a7c31fcca41faffd072bef87bfe52</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSQuestion &gt; q, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAnswer</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a22d05b99b9e5d7dd4007b47df13f506b</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAuthority</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a049fa619a827fac965836eed3b23927d</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAdditional</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>af9284bad5b6001ffb7af7c05a44a512e</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Response &gt;</type>
      <name>resolveResponse</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac8da965bfaf10547c33ec595c60c8f11</anchor>
      <arglist>(cPacket *response)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isDNSpacket</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4548afaf13597844181f72165a96d3df</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQueryOrResponse</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ad76019efbe24f8dab1afc216738503db</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeStringForValue</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a5fccb3b0d20719b40885f335eafb155e</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeValueForString</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac6f1e2b6475c4774df2f6db1822d8e3e</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassStringForValue</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a82e36d51ae29f2e33b93f789042849dd</anchor>
      <arglist>(int _class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSRecord</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a9a2c0261041a12fc4f4f466312b56ea9</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a8a12e8321cecac3f50f86188d22daeeb</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dnsPacketToString</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aacf5f7576e945e663f3323505d4e1ce3</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>estimateDnsPacketSize</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a1d8627b1d77e0e26a4348dc39e8c5ff6</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a43b7d7aa588afe0424517b7e79bffb3e</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsRecord</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ab1094409cde738f91583ba1c770b8336</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a2ce46fcb5157b55e61ec40152a7774f0</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ae452bc27fa176bfd0e1ddbc2ff9483e8</anchor>
      <arglist>(DNSRecord *r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a34addd06355c483a45b5a593882ec00d</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a7e8cdca50c4d75b3d596293c286e24b9</anchor>
      <arglist>(DNSQuestion *q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordDataEqual</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ae910f8de8a2bfcc0a274094c23277721</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordEqualNoData</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a966a6a77ebf650ad8d73ae7f15e74c69</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>getTypeArray</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4aefa127b6ce642537453103b47845b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>DNS_TYPE_ARRAY_ANY</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a0b8dc337b5b8692f7c2f7d50ac452b34</anchor>
      <arglist>[13]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSTools.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/utils/</path>
    <filename>d9/dd7/DNSTools_8h</filename>
    <includes id="de/d08/DNSPacket__m_8h" name="DNSPacket_m.h" local="yes" imported="no">../messages/DNSPacket_m.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">../common/DNS.h</includes>
    <namespace>ODnsExtension</namespace>
    <member kind="define">
      <type>#define</type>
      <name>E_NOT_A_DNSPACKET</name>
      <anchorfile>d9/dd7/DNSTools_8h.html</anchorfile>
      <anchor>ab4e85b76fdf5416a49dc0477e37ffc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_BAD_INDEX</name>
      <anchorfile>d9/dd7/DNSTools_8h.html</anchorfile>
      <anchor>a8ceaa75e3e14692cc7356431174d8adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_WRONG_QR</name>
      <anchorfile>d9/dd7/DNSTools_8h.html</anchorfile>
      <anchor>a8fcd23018b0de0fb3a7ef4626348b001</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSTTLCache.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>d6/d67/DNSTTLCache_8cc</filename>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>DNSTTLCache.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>da/d34/DNSTTLCache_8h</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d9/ded/Utils_8h" name="Utils.h" local="yes" imported="no">utils/Utils.h</includes>
    <class kind="struct">ODnsExtension::DNSTimeRecord</class>
    <class kind="class">ODnsExtension::DNSTimeRecordComparator</class>
    <class kind="class">ODnsExtension::DNSTTLCache</class>
    <namespace>ODnsExtension</namespace>
    <member kind="typedef">
      <type>struct ODnsExtension::DNSTimeRecord</type>
      <name>dns_time_record</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a16bf38c869208dfbd8d61da57f716691</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSZoneConfig.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/utils/</path>
    <filename>df/d7e/DNSZoneConfig_8cc</filename>
    <includes id="da/dc0/DNSZoneConfig_8h" name="DNSZoneConfig.h" local="no" imported="no">DNSZoneConfig.h</includes>
  </compound>
  <compound kind="file">
    <name>DNSZoneConfig.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/utils/</path>
    <filename>da/dc0/DNSZoneConfig_8h</filename>
    <includes id="d9/ded/Utils_8h" name="Utils.h" local="yes" imported="no">utils/Utils.h</includes>
    <class kind="struct">soa</class>
    <class kind="struct">zone_entry</class>
    <class kind="class">DNSZoneConfig</class>
    <member kind="typedef">
      <type>struct soa</type>
      <name>soa</name>
      <anchorfile>da/dc0/DNSZoneConfig_8h.html</anchorfile>
      <anchor>a5f58c2124cea979cbfc24f13a2b5e2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct zone_entry</type>
      <name>zone_entry</name>
      <anchorfile>da/dc0/DNSZoneConfig_8h.html</anchorfile>
      <anchor>a8ed5dff8f372992d93e48434d7b5e856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>states</name>
      <anchorfile>da/dc0/DNSZoneConfig_8h.html</anchorfile>
      <anchor>aa19be6305a5a4485e1e70de70ed7d677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VARS</name>
      <anchorfile>da/dc0/DNSZoneConfig_8h.html</anchorfile>
      <anchor>aa19be6305a5a4485e1e70de70ed7d677abec311e6cae2dd07b2659905dfb14d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOA</name>
      <anchorfile>da/dc0/DNSZoneConfig_8h.html</anchorfile>
      <anchor>aa19be6305a5a4485e1e70de70ed7d677a3185b2efaf12ead0575f39c341ef0db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENTRY</name>
      <anchorfile>da/dc0/DNSZoneConfig_8h.html</anchorfile>
      <anchor>aa19be6305a5a4485e1e70de70ed7d677af1ca16f85c38f6843da477ec1aa176a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNS.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>d9/d94/MDNS_8cc</filename>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="yes" imported="no">MDNS.h</includes>
    <namespace>ODnsExtension</namespace>
    <member kind="function">
      <type>int</type>
      <name>isProbe</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ab4c84c73f09f74bd147ab63a2d7b934e</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isAnnouncement</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ab779e3a434e6d743b38785bb72dc076e</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQuery</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4528f16e8efdabb9b0e4aab1ff41daaa</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isResponse</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a6ef8ba40636275910caffa18ba84a155</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isGoodbye</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4d6a422b1257f6a2538208c8b212b660</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; MDNSKey &gt;</type>
      <name>mdns_key_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a88cc90d39dc6416db40f2e12a056e8c5</anchor>
      <arglist>(std::string name, int type, int _class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mdns_key_free</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a086b075f5993ebe8022049b4d799fe9c</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKey</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ab66bb967f00aa41126fcb28ff067abba</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key1, std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKeyANY</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a70e2163e76e32c955828e2503dafa00a</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key1, std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::DNSQuestion &gt;</type>
      <name>createQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a2ebdcec0c18d793976057dfd746fb0c2</anchor>
      <arglist>(std::string name, unsigned short type, unsigned short _class)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::DNSQuestion &gt;</type>
      <name>createQuestionFromKey</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aead53260a94f936a20e9bec7e122734c</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNS.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>dd/d86/MDNS_8h</filename>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="de/d08/DNSPacket__m_8h" name="DNSPacket_m.h" local="yes" imported="no">DNSPacket_m.h</includes>
    <class kind="struct">ODnsExtension::MDNSService</class>
    <class kind="struct">ODnsExtension::MDNSKey</class>
    <namespace>ODnsExtension</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAX_MDNS_PACKET_SIZE</name>
      <anchorfile>dd/d86/MDNS_8h.html</anchorfile>
      <anchor>a6d65d64a08c423abd8297df4f6de27fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_PORT</name>
      <anchorfile>dd/d86/MDNS_8h.html</anchorfile>
      <anchor>ab16900c77e60e00f401b684c45a37c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_HOST_TTL</name>
      <anchorfile>dd/d86/MDNS_8h.html</anchorfile>
      <anchor>a18a54581bbbf4f6475b42184e7d7ac3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_SERVICE_TTL</name>
      <anchorfile>dd/d86/MDNS_8h.html</anchorfile>
      <anchor>ade351b9eabfaf64716c408f30d4e10cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSService</type>
      <name>mdns_service</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a629ca88667a58ca975910cd07d6214a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSKey</type>
      <name>mdns_key</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e2fdc48303511e3f99d2b2335cb5aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>createQuestionFromKey</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a298d1dc65d5c42dfc92222a4a9e56b6f</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNS_Privacy.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>d8/dc7/MDNS__Privacy_8cc</filename>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <namespace>ODnsExtension</namespace>
    <member kind="function">
      <type>std::regex</type>
      <name>privacy_type_expr</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>af7dbd9fa28ee134f803c421b9b9e7f41</anchor>
      <arglist>(&quot;_.+\\._.+\\.local&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>extract_stype</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ad482907e6c8295caab95ae2e6435193d</anchor>
      <arglist>(std::string label)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::PrivateMDNSService &gt;</type>
      <name>private_service_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ae5af0f14963f3af7f8dd5474c3b8dbe3</anchor>
      <arglist>(std::string service_type, int is_private)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::PairingData &gt;</type>
      <name>pairing_data_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a2848d120612703edf93e02d83d603acb</anchor>
      <arglist>(std::string crypto_key, std::string friend_id, std::string privacy_instance_name)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::FriendData &gt;</type>
      <name>friend_data_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a8827af710e8620658941ed50784a7464</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::PairingData &gt; pdata, int port)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNS_Privacy.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>de/dcf/MDNS__Privacy_8h</filename>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <class kind="struct">ODnsExtension::PrivateMDNSService</class>
    <class kind="struct">ODnsExtension::PairingData</class>
    <class kind="struct">ODnsExtension::FriendData</class>
    <namespace>ODnsExtension</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_PRIVACY_SOCKET_PORT</name>
      <anchorfile>de/dcf/MDNS__Privacy_8h.html</anchorfile>
      <anchor>adb874e39a9308cc955bb2b3df46fa281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::PrivateMDNSService</type>
      <name>private_mdns_service</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac95bf84a14c92059a5731023a4955521</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::PairingData</type>
      <name>pairing_data</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>af36b4f180c51ea95c642555f661ba5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::FriendData</type>
      <name>friend_data</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ad96b62dcc4ef391d4aa1338095d0e330</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; FriendData &gt;</type>
      <name>friend_data_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a2b7c038515b348cab26a1debc4a969c7</anchor>
      <arglist>(std::shared_ptr&lt; PairingData &gt; pdata, int port)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSAnnouncer.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>da/dcb/MDNSAnnouncer_8cc</filename>
    <includes id="d5/dd0/MDNSAnnouncer_8h" name="MDNSAnnouncer.h" local="no" imported="no">MDNSAnnouncer.h</includes>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>MDNSAnnouncer.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>d5/dd0/MDNSAnnouncer_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="dc/d80/MDNSResponseScheduler_8h" name="MDNSResponseScheduler.h" local="no" imported="no">MDNSResponseScheduler.h</includes>
    <includes id="d9/daa/MDNSProbeScheduler_8h" name="MDNSProbeScheduler.h" local="no" imported="no">MDNSProbeScheduler.h</includes>
    <class kind="struct">ODnsExtension::Probe</class>
    <class kind="class">ODnsExtension::MDNSAnnouncer</class>
    <namespace>ODnsExtension</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_PROBE_TIMEOUT</name>
      <anchorfile>d5/dd0/MDNSAnnouncer_8h.html</anchorfile>
      <anchor>ae4523fc3c8e1c464748a700a5f01948d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProbeState</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STARTING</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559a8c5eea8f9848197fd4fa0479729acce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROBING</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559acc0db946f9464e3065c1fd6cc9968ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANNOUNCING</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559aaacc6c94d3d47bd9b6756ca916571cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANNOUNCED</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559a1fc3ccc9e790f8abd1e0cede5d14c665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AnnouncerState</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>START</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078a797e2fdb115243a80c18b80f0f99d67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RESTART</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078a2e180c5e0383c434447973dc8d3308e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROBE</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078ad20b715ace00f7b0eb0856724df92a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SLEEP</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078a458959457559d2cab197493b67335738</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FINISHED</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078ac324ed074bc72eb542b4939e48336ae8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSProbeScheduler.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>da/d57/MDNSProbeScheduler_8cc</filename>
    <includes id="d9/daa/MDNSProbeScheduler_8h" name="MDNSProbeScheduler.h" local="no" imported="no">mdns/MDNSProbeScheduler.h</includes>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>MDNSProbeScheduler.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>d9/daa/MDNSProbeScheduler_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <class kind="struct">ODnsExtension::MDNSProbeJob</class>
    <class kind="class">ODnsExtension::MDNSProbeScheduler</class>
    <namespace>ODnsExtension</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_PROBE_WAIT</name>
      <anchorfile>d9/daa/MDNSProbeScheduler_8h.html</anchorfile>
      <anchor>a03d9e6c38db0474001404bffb910b65a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSProbeJob</type>
      <name>probe_job</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ad3cd6dfc88e8021ebeb5a89d544d91cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSQueryScheduler.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>d6/d05/MDNSQueryScheduler_8cc</filename>
    <includes id="d4/d17/MDNSQueryScheduler_8h" name="MDNSQueryScheduler.h" local="no" imported="no">mdns/MDNSQueryScheduler.h</includes>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>MDNSQueryScheduler.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>d4/d17/MDNSQueryScheduler_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <class kind="struct">ODnsExtension::MDNSQueryJob</class>
    <class kind="class">ODnsExtension::MDNSQueryScheduler</class>
    <namespace>ODnsExtension</namespace>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSQueryJob</type>
      <name>query_job</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a9b3ed9f737230a1f1c661bc8eda8f5ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSResolver.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/mdns/</path>
    <filename>df/d13/MDNSResolver_8cc</filename>
    <includes id="db/d75/MDNSResolver_8h" name="MDNSResolver.h" local="yes" imported="no">MDNSResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>df/d13/MDNSResolver_8cc.html</anchorfile>
      <anchor>a322f4ce50505a6f1cc2042570c2cf5f8</anchor>
      <arglist>(MDNSResolver)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSResolver.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/mdns/</path>
    <filename>db/d75/MDNSResolver_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="d9/daa/MDNSProbeScheduler_8h" name="MDNSProbeScheduler.h" local="no" imported="no">MDNSProbeScheduler.h</includes>
    <includes id="dc/d80/MDNSResponseScheduler_8h" name="MDNSResponseScheduler.h" local="no" imported="no">MDNSResponseScheduler.h</includes>
    <includes id="d4/d17/MDNSQueryScheduler_8h" name="MDNSQueryScheduler.h" local="no" imported="no">MDNSQueryScheduler.h</includes>
    <includes id="d5/dd0/MDNSAnnouncer_8h" name="MDNSAnnouncer.h" local="no" imported="no">MDNSAnnouncer.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <class kind="class">MDNSResolver</class>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_TIMER</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>ad6d1511dd655ce451daf068d64053c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_EXTERNAL</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>ab1db506145b2fc3e707023c658a0c4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_INTERNAL_QUERY</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>af9d1c2b8c20ce2368a809e841e78db8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_INTERNAL_PUBLISH</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>a71ef27062ee2501ca370c8376fea8862</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_INTERNAL_REVOKE</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>ac5f7cea8081cabdd1313df53b273bf75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSResponseScheduler.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>d9/d65/MDNSResponseScheduler_8cc</filename>
    <includes id="dc/d80/MDNSResponseScheduler_8h" name="MDNSResponseScheduler.h" local="no" imported="no">MDNSResponseScheduler.h</includes>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>MDNSResponseScheduler.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>dc/d80/MDNSResponseScheduler_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="d3/db7/DNSSimpleCache_8h" name="DNSSimpleCache.h" local="no" imported="no">DNSSimpleCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <class kind="struct">ODnsExtension::MDNSResponseJob</class>
    <class kind="class">ODnsExtension::MDNSResponseScheduler</class>
    <namespace>ODnsExtension</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_RESPONSE_ON_PROBE</name>
      <anchorfile>dc/d80/MDNSResponseScheduler_8h.html</anchorfile>
      <anchor>afb872597c4fd8651a36a56b0313c6a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_RESPONSE_WAIT</name>
      <anchorfile>dc/d80/MDNSResponseScheduler_8h.html</anchorfile>
      <anchor>a48bcb863bfd07ee886ef2a8bf1d4a002</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSResponseJob</type>
      <name>mdns_response_job</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aab73a7b83559bbb5d2ddd3f1c920b610</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeEventSet.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>db/dcf/TimeEventSet_8cc</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>TimeEventSet.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>dd/d68/TimeEventSet_8h</filename>
    <class kind="class">ODnsExtension::TimeEvent</class>
    <class kind="class">ODnsExtension::TimeEventComparator</class>
    <class kind="class">ODnsExtension::TimeEventSet</class>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="file">
    <name>Utils.cc</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/utils/</path>
    <filename>d3/dd8/Utils_8cc</filename>
    <includes id="d9/ded/Utils_8h" name="Utils.h" local="yes" imported="no">utils/Utils.h</includes>
    <namespace>ODnsExtension</namespace>
    <member kind="function">
      <type>int</type>
      <name>stdstr_has_suffix</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>abd67ccfae4a4fb06634d9fe9e9acea61</anchor>
      <arglist>(std::string base, std::string suffix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Utils.h</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/utils/</path>
    <filename>d9/ded/Utils_8h</filename>
    <namespace>ODnsExtension</namespace>
  </compound>
  <compound kind="class">
    <name>DNSAuthServer</name>
    <filename>d6/d41/classDNSAuthServer.html</filename>
    <base>DNSServerBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a5bcf90776f0b7955d3a74e8fbc8b0248</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a4fc546452c77057174615e4b3dd507e6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>appendAuthority</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a20fcf7b84c1a1b151d7818ccdcd5e916</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; ns_list, int *ns_records)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>appendAdditionals</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a298b99aab9bea411b89e826f48637669</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; ns_list, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; ar_list, int *ns_records)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>appendEntries</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a5a4c9d41973d7ad72e245447da2b940b</anchor>
      <arglist>(std::string hash, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; dstlist, int type, int *num_records)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>appendTransitiveEntries</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a9c35a6c54b3daa3b3e69801ef485763e</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; srclist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; dstlist, const char *DNS_TYPE_STR, int DNS_TYPE_VALUE, int *ar_records)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>handleQuery</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a1899d0d020c8bb74a2a69e30e3d2ed01</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::Query &gt; query)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a51b5b79e0d0197d46f8b399213d50781</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>unsupportedOperation</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a7d443c88d8d8cf48c116893bceea07bd</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::Query &gt; q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendResponse</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>abcc041b210fa22357f508c815bf97e94</anchor>
      <arglist>(DNSPacket *response, IPvXAddress returnAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>handleRecursion</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a5da10ca3d8be01bf6a85c9714af8aa4b</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>store_in_query_cache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a889f0f12250294e9ef2b4075f4a30602</anchor>
      <arglist>(int id, std::shared_ptr&lt; ODnsExtension::Query &gt; query)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIdAndInc</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a3cdd838e7b6b814874a74207e2bea6bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_query_from_cache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a543d9cf19151bdbd018f648558423933</anchor>
      <arglist>(int id, std::shared_ptr&lt; ODnsExtension::CachedQuery &gt; cq)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::CachedQuery &gt;</type>
      <name>get_query_from_cache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a6210a916e8ce99f3c1ba76ee3f62e084</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>master_file</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a479f1ccb0940f9862a3b321b95e09eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DNSZoneConfig *</type>
      <name>config</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a2a90fbb140d749f5bcbaca88234f0a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>recursion_available</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a7cb37774c9512ded8acdf7afaeb6820d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>response_count</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a356592310091c2cadb1b10786ee8e592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receivedQueries</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>ab83a993b93cd6e4d8a9747f37b4c6697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>internal_query_id</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>aa5ac8195af6fc55f1330fac40a7bb701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, std::shared_ptr&lt; ODnsExtension::CachedQuery &gt; &gt;</type>
      <name>queryCache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a8660abe35bb785d57584d55c60698ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::DNSCache *</type>
      <name>responseCache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a7f19fa80d8db63047724af7022bf8f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>rootServers</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a22b237f2db3605a2185ebd0c4f3ef5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>out</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>ac9f7c9f9ff932dd3567ba8dd1475b1a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSClient</name>
    <filename>d1/de5/classDNSClient.html</filename>
    <base>cSimpleModule</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a75897ddfee3cb2d23415a3e51fbd4e2f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a11eebe1c8cd56eaaf1f5b564c2b3147c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a95d324647f66e43e2e21c59480eb7c8a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPvXAddress *</type>
      <name>getAddressFromCache</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a4dae82b9c2886d9801f5bc4f36bcdc02</anchor>
      <arglist>(std::string dns_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>resolve</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a30d6b3c4fd232de2ba1d9ea0838b4905</anchor>
      <arglist>(std::string dns_name, int qtype, int primary, void(*callback)(int, void *), int id, void *handle)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>dns_servers</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a6ce1eb51e790a31947789e1c06364e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, DNSPacket * &gt;</type>
      <name>queries</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>ae332981074c1b6d1f07ebdb9cf46ddd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, void(*)(int, void *)&gt;</type>
      <name>callbacks</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a2c0e578b9157b68ec8bb667c750216c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, void * &gt;</type>
      <name>callback_handles</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a5aa538828ece2d7c468a76630ab703c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::DNSCache *</type>
      <name>cache</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>aefbaca997946e8b0c168a5be3c9e898c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>query_count</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a3d7aefdce0e7062f356ad9ae40bb73cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>out</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a967e2a3921496825cb1b83fcc8e00aa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSClientTraffGen</name>
    <filename>d4/d96/classDNSClientTraffGen.html</filename>
    <base>DNSClient</base>
    <member kind="function">
      <type></type>
      <name>DNSClientTraffGen</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a1fe51fc126cff2e278c435da2f1005cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSClientTraffGen</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a236b88a5732ef1b63a1af787c4b20725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>qcount</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>adaac08f2a9daf04c0640dca52fa944fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>time_to_send</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>ab0bfa35763ead1e1fa118df243c4601d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a0732f2a1f3d77c7e0228d5ff8346ed1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>host_names</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>ac1d3e537fc6c382524f0818ac4a5782a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>types</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>acf75c57c4f560496347e015e9f396fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a1e4eb1837f5a7e8a50dacd3ebe315827</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a01a97b5534bc6e80afbb0c5f2a80e3ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>aef92212ffc9064e74abc739b581f3b77</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>ab046920382fb9e489b0d01cc121511f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>aeeaf682bb8e56ac5abc1095503347de9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleResponse</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a3b271250d1ddcd4fb05de6374f5c2e0c</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_hostnames</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>ad5cdf447b2a57d4fca5a9728ffbbb65b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>callback</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a7155db4436d206ab7e31d8d0add77583</anchor>
      <arglist>(int id, void *this_pointer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSEchoServer</name>
    <filename>d7/ddb/classDNSEchoServer.html</filename>
    <base>cSimpleModule</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a1915c618bc9c756917acc598b1ca6418</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a4e0c0478b68d5cbddb4621c48fa36f34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>acb0d0f054f750951968f1c2eb287ba00</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>unsupportedOperation</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a40e71ae59cded4e653bdef0ddcd95106</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::Query &gt; q)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendResponse</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a32ff65dde385a42b47630ab94ff3c9cb</anchor>
      <arglist>(DNSPacket *response, IPvXAddress returnAddress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>handleQuery</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>ae62cea67ec4e33f46d3f02369d80ea51</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::Query &gt; query)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nameserver</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>ab4eedfa55857a05f510f428cb141be66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nameserver_ip</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>ac6bff8834db69676bcf5224896f7700d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receivedQueries</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a5e7dd42d6db1aca58bf6493cc308082d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>response_count</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a846805ca51fd9990418b5d0c24b30024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>out</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>ae31e813d50c1becf30236c429531e312</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSLocalCache</name>
    <filename>d1/dd3/classDNSLocalCache.html</filename>
    <base>DNSServerBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d1/dd3/classDNSLocalCache.html</anchorfile>
      <anchor>abcc0ec629b70fd93a45624b191fee236</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d1/dd3/classDNSLocalCache.html</anchorfile>
      <anchor>a47fc55f8927a8cf66e635bf0f781a4f6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>handleQuery</name>
      <anchorfile>d1/dd3/classDNSLocalCache.html</anchorfile>
      <anchor>a281be17d4274e6477901dc78a2d61872</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::Query &gt; query)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>recursion_available</name>
      <anchorfile>d1/dd3/classDNSLocalCache.html</anchorfile>
      <anchor>aa4a4e6ea1f1ea5b9d8ec06eb1719183e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>response_count</name>
      <anchorfile>d1/dd3/classDNSLocalCache.html</anchorfile>
      <anchor>af2855a5c27cd16371514c54419d9ee0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSPacket</name>
    <filename>da/d67/classDNSPacket.html</filename>
    <base>cPacket</base>
    <member kind="function">
      <type></type>
      <name>DNSPacket</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ad51995373fa84eba3aca65612cadff80</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DNSPacket</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a1d1600094c2b49a793cfa1f36ec95dd1</anchor>
      <arglist>(const DNSPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSPacket</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>abcdd3039414339446972ea6fec5fea3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ac8a0d21d72a59fed76c5ac2af3f88f0a</anchor>
      <arglist>(const DNSPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>dup</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a6d4b825e7216f338e758c55d464ea38d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a3e7bf0ec8f70bb483dc4dfacd2a8659a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a3528c6c6a3d98d977d5e3629f8c66248</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a9c4af725155148a02d4291d62211da86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a7ccc297a3a64f38c5dadf4a594a2502b</anchor>
      <arglist>(const char *displayString)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getId</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a8a3812f1a9749ba1627a5dc2f00d4fdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a105aeebe5adb5dfe27d9fa9c060f3dc9</anchor>
      <arglist>(unsigned short id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getOptions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a118852cf4d888d64fd8d3b59ec207d56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a989c9f5a06e8e770716b2a40788dbafb</anchor>
      <arglist>(unsigned short options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getQdcount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aaad51550c457f8da502121175a4fdb21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQdcount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a95d194f84c9081d64648976060ebdaef</anchor>
      <arglist>(unsigned short qdcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getAncount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a033b36c3aba5f8fa14001171ba23edd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAncount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ae62be1da71573b3c87da8228edfd4655</anchor>
      <arglist>(unsigned short ancount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getNscount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a3f5bf04bc99de15a818509fc0107f7f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNscount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aae11625a90c1b88e34bde4e4be2e58ec</anchor>
      <arglist>(unsigned short nscount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getArcount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a5d962139b6482b25b8c77a373b302c64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setArcount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a156e5220345ba83b06a61feac4f51477</anchor>
      <arglist>(unsigned short arcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ac78513b61367b3e343d88215b4bcfe36</anchor>
      <arglist>(short size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNumQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a4c7953dbd44d1733cb917ea15edfbfed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSQuestion &amp;</type>
      <name>getQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a57633b190fd456a349d25d7cdb654619</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DNSQuestion &amp;</type>
      <name>getQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a7671e3394aa0da725f079530fdb51178</anchor>
      <arglist>(short k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>af0c1c2e867a8644cf81453f2323c77ad</anchor>
      <arglist>(short k, const DNSQuestion &amp;questions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a122dffdded75c81647b8036e46138853</anchor>
      <arglist>(short size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNumAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a500ab2071d3c36d26c8997f1ef8d98dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSRecord &amp;</type>
      <name>getAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ad5b16204308e27d397b2c131de42da83</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DNSRecord &amp;</type>
      <name>getAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a6d6cb8ed019bcde4d5fe6bba741231fd</anchor>
      <arglist>(short k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a0157636ed74f534fce4eed0b29c0c6cd</anchor>
      <arglist>(short k, const DNSRecord &amp;answers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>affcbc8c6c83fc64f0ad634498ff35fc7</anchor>
      <arglist>(short size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNumAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>abc35efffef6bacae63be377a011e33db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSRecord &amp;</type>
      <name>getAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a8c2bf2b575e41966bc0fbf3181b0e65d</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DNSRecord &amp;</type>
      <name>getAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aa3b7649446b805dd51cdbe342209b7fe</anchor>
      <arglist>(short k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a06f9a63314a155f448cdc7492ca91783</anchor>
      <arglist>(short k, const DNSRecord &amp;authorities)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>abbf61dc89da9eb5a49b1591112d309d2</anchor>
      <arglist>(short size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNumAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aee95369755683454873682e81938a177</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSRecord &amp;</type>
      <name>getAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a11b935744f696f266f0ddfe9477fbadd</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DNSRecord &amp;</type>
      <name>getAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a949614f9e51aa5747897a5f2b8fdd5c8</anchor>
      <arglist>(short k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a2db080b3396885ebe1f58706abbc5f92</anchor>
      <arglist>(short k, const DNSRecord &amp;additional)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a9aa3b41f4e29440c44597d88fb8b61c2</anchor>
      <arglist>(const DNSPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>displayString_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a3abc51d4b793fefd5858cb9234f51208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>id_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ada103072ce845a53cea74ef401e58da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>options_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a702f7b2ddc2bc2e985e79c797e861302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>qdcount_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a2a43b5ada162d3feadf1b5e071c08c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>ancount_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a749e8d1174cb0ed75dfb2e87a95f3910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>nscount_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a17036aa87fb4b0c868b5c23782e295fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>arcount_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a897ac097af39677bfb8efd87254abdde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSQuestion *</type>
      <name>questions_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aef638c849cd1e0141dc73ec7fecdc243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>questions_arraysize</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a52d603efb926a57e830ecf7f805298c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSRecord *</type>
      <name>answers_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a5f66e7e399673188ed288d7fa870fa12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>answers_arraysize</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a8a36d1f14885ca46ecd4ac9b67f24906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSRecord *</type>
      <name>authorities_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ad37ac4eed10930e117865d66df7311a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>authorities_arraysize</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a7633d32159e770a6e103e63ded58c027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSRecord *</type>
      <name>additional_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a94479d1f7c5b60cf54abbe03988a0e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>additional_arraysize</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a95156797943ba7ad16257102e7dd71d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a5082b6431af326ade8f57bfef7c93005</anchor>
      <arglist>(const DNSPacket &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSServerBase</name>
    <filename>dd/df1/classDNSServerBase.html</filename>
    <base>cSimpleModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>af50a30468329246b3a2635c862496a43</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a8742be6aca12303a6ebe8545b1a75de5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>handleQuery</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a9060266af61a3a703745dce2ee6d685f</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::Query &gt; query)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSZoneConfig</name>
    <filename>df/ddd/classDNSZoneConfig.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSZoneConfig</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a1fdf2b89faccb8865482be3addd19e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSZoneConfig</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a55aff4c9808eb058d8d67b614eabb28f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a9a24fe48ce82f5a40a747647e3ab6a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>aa91a393454ee4831f427842f7e6b4c77</anchor>
      <arglist>(std::string config_file)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTTL</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>ae5c07000eaaa7b4cc498db2fd82ba0eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; soa &gt;</type>
      <name>getSOA</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a1db4a681c3b5d00a751a43aed8f8ec5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getOrigin</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a27f37f25c09cd17a92932432621e50b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hasEntry</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a7dfd4dacaec8add387ecae9df307d6db</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; zone_entry &gt; &gt;</type>
      <name>getEntry</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>adde6789f91cca819188ad8d8b6c18a8e</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; zone_entry &gt; &gt; &gt; *</type>
      <name>getEntries</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a48805d8dc08390a49d1539799fe5ca51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>config_file</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a73a4af12e75525f3292ee18878082efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>TTL</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>ac6fb83d20e9ed2664cdf0d67a7f28c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a26c5e91c315058c240aaafbff8981294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>origin</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>aab8c098ef7100b8bd2e49ea4a50beca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; zone_entry &gt; &gt; &gt;</type>
      <name>zone_catalog</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>aab21d42ac269110d313dd059621a6fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; soa &gt;</type>
      <name>zone_soa</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a3dd55bef926db4c3d0cebedc919166d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MDNSResolver</name>
    <filename>dc/d51/classMDNSResolver.html</filename>
    <base>cSimpleModule</base>
    <member kind="function">
      <type></type>
      <name>MDNSResolver</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a99ac15e032827d6336c96e79825805f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MDNSResolver</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a6d9eddc4acaa45ac35b4dfc77cb76f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>af97aa644d0ba1c94adce6862a5ade72f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>af58d5565712aa6ac4b9adf599cd0ed66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a4d200a7d6a13dd35723af39b9e96dfe8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>callback</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>adcd86ab9c9b9453e092e601de2848903</anchor>
      <arglist>(std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elapsedTimeCheck</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ae3414492f32508b38994f347ff23b1b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleQuery</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a7717be2b2ab7511ea16cdb956960e70b</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleResponse</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a7fba5555976b28b1523181b616415656</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleSelfMessage</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a598c93aed0f2da666a6cb83f662cdb87</anchor>
      <arglist>(simtime_t tv)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeServices</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a8954cbb4db03e7bf9c4d60c15916d8c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeServiceFile</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a4edc641538f1c1fe62cac1f8b803aa9a</anchor>
      <arglist>(std::string file)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePrivateServices</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a7e009c7a996fd56881bd767dff78963e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a2e44bf48f170195951427b49eb0fc7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::MDNSProbeScheduler *</type>
      <name>probeScheduler</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ab87fedc6c7dfb281c96da8194db5ee81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::MDNSResponseScheduler *</type>
      <name>responseScheduler</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a1171f157d1517dc470b7d89f34a1b2e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::MDNSQueryScheduler *</type>
      <name>queryScheduler</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a7a8762936370b865d72939e33dfddd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::MDNSAnnouncer *</type>
      <name>announcer</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a37beb38d854f2b2736c75e64e9df8a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::AnnouncerState</type>
      <name>announcer_state</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>aad0cda7253646d8c002ca02adc44708e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::DNSTTLCache *</type>
      <name>cache</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ae5cdb39e483cab238aaa779dbc49599b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>outSock</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ac6cab10e701c4c030e43ed449c6a0e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>privacySock</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a893b7561da4cfd35fbfd63dc32519c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; ODnsExtension::MDNSService &gt; &gt;</type>
      <name>services</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ada0cb54d1328440ada05ac48a5cb223e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>hostname</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a0bd9de98bb613a975c26bbb9767f890f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>hostaddress</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a909f127a683f3bd9ebdcdabdec6f09b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessage</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a56d8d6cae7a330802ea47402fbe28297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::PrivateMDNSService &gt; &gt; *</type>
      <name>private_service_table</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ab35c55b5dc1dbf14b3b0f7437ed619d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::FriendData &gt; &gt; *</type>
      <name>friend_data_table</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a8f79e0d859e4188aef33169198584d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::FriendData &gt; &gt; *</type>
      <name>instance_name_table</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a1d5093434f425145e172b06737623737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>own_instance_name</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a98cb3d01429ecd3eed1984fffe3d6507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasPrivacy</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ae4046d527308f8e1c2fc020c34e880e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>last_schedule</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a25f29c3f99070a34d4a833cdd1d48ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>elapseTime</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ab3389c5a7321e156da3e4c7b1ceb8fdc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soa</name>
    <filename>d2/dd0/structsoa.html</filename>
    <member kind="function">
      <type></type>
      <name>soa</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>ad12690d9b3dd51576d3019ccc869cdc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mname</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a76551b266771bd26ebb8d5e10ae9afa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>rname</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>ad6cf07c12ed82c2536dc37f339dac693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>serial</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a91695888193c05a8107efdf8983a135b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>refresh</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a7bcb46ed45ffe764a9fce7222de5199c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>retry</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>aa4c4275a478746ee76f0d2c246a69e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>expire</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a30170b676da12c619dd163e330170452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>minimum</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a7fdb828eb44d1f48e7f4e9a30a2f5e19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>zone_entry</name>
    <filename>de/d38/structzone__entry.html</filename>
    <member kind="function">
      <type></type>
      <name>zone_entry</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a6f07e0dc882f3b59b3791d7a34da6fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>domain</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a8887a19d7e9d94337189b0092ae99e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>__class</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a0e1fcd063499a268d482a1cb8ad2d9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a4c3427d8ce2615d479b3c04c0aaaa710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>data</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a64e8a85c90a434fb015fe3e6eae6a15e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ODnsExtension</name>
    <filename>d8/d72/namespaceODnsExtension.html</filename>
    <class kind="struct">ODnsExtension::CachedQuery</class>
    <class kind="class">ODnsExtension::DNSCache</class>
    <class kind="struct">ODnsExtension::DNSQuestion</class>
    <class kind="struct">ODnsExtension::DNSRecord</class>
    <class kind="class">ODnsExtension::DNSSimpleCache</class>
    <class kind="struct">ODnsExtension::DNSTimeRecord</class>
    <class kind="class">ODnsExtension::DNSTimeRecordComparator</class>
    <class kind="class">ODnsExtension::DNSTTLCache</class>
    <class kind="struct">ODnsExtension::FriendData</class>
    <class kind="class">ODnsExtension::MDNSAnnouncer</class>
    <class kind="struct">ODnsExtension::MDNSKey</class>
    <class kind="struct">ODnsExtension::MDNSProbeJob</class>
    <class kind="class">ODnsExtension::MDNSProbeScheduler</class>
    <class kind="struct">ODnsExtension::MDNSQueryJob</class>
    <class kind="class">ODnsExtension::MDNSQueryScheduler</class>
    <class kind="struct">ODnsExtension::MDNSResponseJob</class>
    <class kind="class">ODnsExtension::MDNSResponseScheduler</class>
    <class kind="struct">ODnsExtension::MDNSService</class>
    <class kind="struct">ODnsExtension::PairingData</class>
    <class kind="struct">ODnsExtension::PrivateMDNSService</class>
    <class kind="struct">ODnsExtension::Probe</class>
    <class kind="struct">ODnsExtension::Query</class>
    <class kind="struct">ODnsExtension::Response</class>
    <class kind="struct">ODnsExtension::SRVData</class>
    <class kind="class">ODnsExtension::TimeEvent</class>
    <class kind="class">ODnsExtension::TimeEventComparator</class>
    <class kind="class">ODnsExtension::TimeEventSet</class>
    <member kind="typedef">
      <type>struct ODnsExtension::CachedQuery</type>
      <name>cached_query</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a37b5b26fb07ea2e2545bf2c1ebd3a763</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::DNSTimeRecord</type>
      <name>dns_time_record</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a16bf38c869208dfbd8d61da57f716691</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::PrivateMDNSService</type>
      <name>private_mdns_service</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac95bf84a14c92059a5731023a4955521</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::PairingData</type>
      <name>pairing_data</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>af36b4f180c51ea95c642555f661ba5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::FriendData</type>
      <name>friend_data</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ad96b62dcc4ef391d4aa1338095d0e330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSProbeJob</type>
      <name>probe_job</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ad3cd6dfc88e8021ebeb5a89d544d91cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSQueryJob</type>
      <name>query_job</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a9b3ed9f737230a1f1c661bc8eda8f5ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSResponseJob</type>
      <name>mdns_response_job</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aab73a7b83559bbb5d2ddd3f1c920b610</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSService</type>
      <name>mdns_service</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a629ca88667a58ca975910cd07d6214a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ODnsExtension::MDNSKey</type>
      <name>mdns_key</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e2fdc48303511e3f99d2b2335cb5aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProbeState</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STARTING</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559a8c5eea8f9848197fd4fa0479729acce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROBING</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559acc0db946f9464e3065c1fd6cc9968ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANNOUNCING</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559aaacc6c94d3d47bd9b6756ca916571cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANNOUNCED</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac856fde5254fd7a23c3eb8d62333d559a1fc3ccc9e790f8abd1e0cede5d14c665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AnnouncerState</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>START</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078a797e2fdb115243a80c18b80f0f99d67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RESTART</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078a2e180c5e0383c434447973dc8d3308e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROBE</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078ad20b715ace00f7b0eb0856724df92a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SLEEP</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078a458959457559d2cab197493b67335738</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FINISHED</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4e1a5d3efdc90a049d08f4a383c2c078ac324ed074bc72eb542b4939e48336ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::regex</type>
      <name>privacy_type_expr</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>af7dbd9fa28ee134f803c421b9b9e7f41</anchor>
      <arglist>(&quot;_.+\\._.+\\.local&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>extract_stype</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ad482907e6c8295caab95ae2e6435193d</anchor>
      <arglist>(std::string label)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::PrivateMDNSService &gt;</type>
      <name>private_service_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ae5af0f14963f3af7f8dd5474c3b8dbe3</anchor>
      <arglist>(std::string service_type, int is_private)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::PairingData &gt;</type>
      <name>pairing_data_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a2848d120612703edf93e02d83d603acb</anchor>
      <arglist>(std::string crypto_key, std::string friend_id, std::string privacy_instance_name)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::FriendData &gt;</type>
      <name>friend_data_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a8827af710e8620658941ed50784a7464</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::PairingData &gt; pdata, int port)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; FriendData &gt;</type>
      <name>friend_data_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a2b7c038515b348cab26a1debc4a969c7</anchor>
      <arglist>(std::shared_ptr&lt; PairingData &gt; pdata, int port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isProbe</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ab4c84c73f09f74bd147ab63a2d7b934e</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isAnnouncement</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ab779e3a434e6d743b38785bb72dc076e</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQuery</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4528f16e8efdabb9b0e4aab1ff41daaa</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isResponse</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a6ef8ba40636275910caffa18ba84a155</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isGoodbye</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4d6a422b1257f6a2538208c8b212b660</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; MDNSKey &gt;</type>
      <name>mdns_key_new</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a88cc90d39dc6416db40f2e12a056e8c5</anchor>
      <arglist>(std::string name, int type, int _class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mdns_key_free</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a086b075f5993ebe8022049b4d799fe9c</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKey</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ab66bb967f00aa41126fcb28ff067abba</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key1, std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKeyANY</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a70e2163e76e32c955828e2503dafa00a</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key1, std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::DNSQuestion &gt;</type>
      <name>createQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a2ebdcec0c18d793976057dfd746fb0c2</anchor>
      <arglist>(std::string name, unsigned short type, unsigned short _class)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ODnsExtension::DNSQuestion &gt;</type>
      <name>createQuestionFromKey</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aead53260a94f936a20e9bec7e122734c</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>createQuestionFromKey</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a298d1dc65d5c42dfc92222a4a9e56b6f</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createQuery</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a749b296236a76c43434278b6a92cb70c</anchor>
      <arglist>(std::string msg_name, std::string name, unsigned short dnsclass, unsigned short type, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createNQuery</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a3f06c0fa8745e9f2b0c3d8b2aaf3aa4f</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Query &gt;</type>
      <name>resolveQuery</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>acf37904a6861ce340403d0374fd42805</anchor>
      <arglist>(cPacket *query)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createResponse</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aa3640f8897e99d1894e26c46e9cf7815</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short opcode, unsigned short AA, unsigned short rd, unsigned short ra, unsigned short rcode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aef4a7c31fcca41faffd072bef87bfe52</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSQuestion &gt; q, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAnswer</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a22d05b99b9e5d7dd4007b47df13f506b</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAuthority</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a049fa619a827fac965836eed3b23927d</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAdditional</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>af9284bad5b6001ffb7af7c05a44a512e</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Response &gt;</type>
      <name>resolveResponse</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac8da965bfaf10547c33ec595c60c8f11</anchor>
      <arglist>(cPacket *response)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isDNSpacket</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4548afaf13597844181f72165a96d3df</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQueryOrResponse</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ad76019efbe24f8dab1afc216738503db</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeStringForValue</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a5fccb3b0d20719b40885f335eafb155e</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeValueForString</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ac6f1e2b6475c4774df2f6db1822d8e3e</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassStringForValue</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a82e36d51ae29f2e33b93f789042849dd</anchor>
      <arglist>(int _class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSRecord</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a9a2c0261041a12fc4f4f466312b56ea9</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a8a12e8321cecac3f50f86188d22daeeb</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dnsPacketToString</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>aacf5f7576e945e663f3323505d4e1ce3</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>estimateDnsPacketSize</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a1d8627b1d77e0e26a4348dc39e8c5ff6</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a43b7d7aa588afe0424517b7e79bffb3e</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsRecord</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ab1094409cde738f91583ba1c770b8336</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a2ce46fcb5157b55e61ec40152a7774f0</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ae452bc27fa176bfd0e1ddbc2ff9483e8</anchor>
      <arglist>(DNSRecord *r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a34addd06355c483a45b5a593882ec00d</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a7e8cdca50c4d75b3d596293c286e24b9</anchor>
      <arglist>(DNSQuestion *q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordDataEqual</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>ae910f8de8a2bfcc0a274094c23277721</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordEqualNoData</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a966a6a77ebf650ad8d73ae7f15e74c69</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>getTypeArray</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a4aefa127b6ce642537453103b47845b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stdstr_has_suffix</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>abd67ccfae4a4fb06634d9fe9e9acea61</anchor>
      <arglist>(std::string base, std::string suffix)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>DNS_TYPE_ARRAY_ANY</name>
      <anchorfile>d8/d72/namespaceODnsExtension.html</anchorfile>
      <anchor>a0b8dc337b5b8692f7c2f7d50ac452b34</anchor>
      <arglist>[13]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::CachedQuery</name>
    <filename>de/da6/structODnsExtension_1_1CachedQuery.html</filename>
    <member kind="function">
      <type></type>
      <name>CachedQuery</name>
      <anchorfile>de/da6/structODnsExtension_1_1CachedQuery.html</anchorfile>
      <anchor>a7b897490ccada7ad0b552032a8290bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>internal_id</name>
      <anchorfile>de/da6/structODnsExtension_1_1CachedQuery.html</anchorfile>
      <anchor>ae3a3e1d07176804e38f4001ad2c9c3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; ODnsExtension::Query &gt;</type>
      <name>query</name>
      <anchorfile>de/da6/structODnsExtension_1_1CachedQuery.html</anchorfile>
      <anchor>a96b506d9acb00903dca71863b7d56105</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::DNSCache</name>
    <filename>d0/df2/classODnsExtension_1_1DNSCache.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSCache</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>ab8bbd6d11f4539c798f67176b0f0ef99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSCache</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a196b043a390ce366bb23dfff4ce77e6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>put_into_cache</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a40df0e43d87e8850b9ce00b58c28f9f2</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>get_from_cache</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>afe604a1a5f6512489941a527c59c19f4</anchor>
      <arglist>(std::string hash)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a494b217f46f58717d3f2444638f70fdd</anchor>
      <arglist>(std::string hash)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; ODnsExtension::DNSRecord &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a66657f6a3d3f2678e7a3d23767ab1e99</anchor>
      <arglist>(std::string hash, std::shared_ptr&lt; ODnsExtension::DNSRecord &gt; r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_in_cache</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>ae540687fbe921a62161db23fad296032</anchor>
      <arglist>(std::string hash)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>evict</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a78620f26ee27e9253bd77ca9afc8ec4d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>get_matching_hashes</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a374483adbbb16869304fdb38bc51b1e8</anchor>
      <arglist>(std::string hash)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxRecords</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a5664a854e03407b55f92d054680ff9e4</anchor>
      <arglist>(int _max_records)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxRecords</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a112d01bd3ea54dce5a9c59209a6c7f63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheSize</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a9efd3a98b3b7112382f68f0dc41d3ac9</anchor>
      <arglist>(int cs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCacheSize</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a0bca4ebcf4e70d70bc71d65a0713a044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_records</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>a16de4455d5f7a93ea57663f74e5144a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>current_cache_size</name>
      <anchorfile>d0/df2/classODnsExtension_1_1DNSCache.html</anchorfile>
      <anchor>af90d915c1061fe3b516e1759458b4bc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::DNSQuestion</name>
    <filename>dc/d1b/structODnsExtension_1_1DNSQuestion.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSQuestion</name>
      <anchorfile>dc/d1b/structODnsExtension_1_1DNSQuestion.html</anchorfile>
      <anchor>ae520c88c1cb3a926d89182e4d2935ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DNSQuestion</name>
      <anchorfile>dc/d1b/structODnsExtension_1_1DNSQuestion.html</anchorfile>
      <anchor>ab4c76b1231e36b776e198e92ff2a6f70</anchor>
      <arglist>(std::string _qname, unsigned short _qtype, unsigned short _qclass)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>qname</name>
      <anchorfile>dc/d1b/structODnsExtension_1_1DNSQuestion.html</anchorfile>
      <anchor>a8393469030d5cf9d583c3e8cab333f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>qtype</name>
      <anchorfile>dc/d1b/structODnsExtension_1_1DNSQuestion.html</anchorfile>
      <anchor>a132657d6904a1ba62eb68d537e8311db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>qclass</name>
      <anchorfile>dc/d1b/structODnsExtension_1_1DNSQuestion.html</anchorfile>
      <anchor>ae9e7592d76b4c6f4396a4b02fe4efd87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::DNSRecord</name>
    <filename>dc/de9/structODnsExtension_1_1DNSRecord.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSRecord</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>ace4b06c4eaf5cb013af98802af6c98cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DNSRecord</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>a57416956b5d7e7d7d5b48897496bf85b</anchor>
      <arglist>(std::string _rname, unsigned short _rtype, unsigned short _rclass, unsigned int _ttl, unsigned short _rdlength, std::shared_ptr&lt; void &gt; _rdata, std::string _strdata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DNSRecord</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>a0e8e88a09c796f605fa781054e20ec34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>rname</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>a5cc2381a849d757dea637b1f1f12f919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>rtype</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>a6c9737efe9f54cd45878aa7f92e04c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>rclass</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>ab855995d26e7b2d0087d8a3f28efd53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ttl</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>a0c102c9e7dc5c0034e1676e6e68fb795</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>rdlength</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>a50e135def870d7ed778806ec97ebacf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>rdata</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>acbb56eca3c24eeb9144cc6ea116ccbb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>strdata</name>
      <anchorfile>dc/de9/structODnsExtension_1_1DNSRecord.html</anchorfile>
      <anchor>a843515578ae059ab79ce19c24bc12004</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::DNSSimpleCache</name>
    <filename>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</filename>
    <base>ODnsExtension::DNSCache</base>
    <member kind="function">
      <type></type>
      <name>DNSSimpleCache</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a70776d17954e80b94efd941c9dfb3d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSSimpleCache</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>aa80916c8059e9e76f6af9b0d131e6c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>put_into_cache</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a2d34082f3ca0cee627c01772758734f9</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; record)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>get_from_cache</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a0e151964a6b0b57f183afb0bc94161fa</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_in_cache</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a06601bb929ccbcebded118c43a5a975c</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a864805e80073e163d0fdd8785ba9e3ab</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a1150fc333a098cd70f8148323bc1fd2e</anchor>
      <arglist>(std::string hash, std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>evict</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a830ad8051158df2a860f370150212ab3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>get_matching_hashes</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>ade513f7f99945f12b7b0ca72ea7787bd</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt; &gt;</type>
      <name>cache</name>
      <anchorfile>d9/deb/classODnsExtension_1_1DNSSimpleCache.html</anchorfile>
      <anchor>ae23f73f92b1aae41ccccb4ae148b5a3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::DNSTimeRecord</name>
    <filename>db/dfe/structODnsExtension_1_1DNSTimeRecord.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSTimeRecord</name>
      <anchorfile>db/dfe/structODnsExtension_1_1DNSTimeRecord.html</anchorfile>
      <anchor>a590e05184c97235f1e4d8f851ed2628c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>record</name>
      <anchorfile>db/dfe/structODnsExtension_1_1DNSTimeRecord.html</anchorfile>
      <anchor>a31bed5ef5a2ded2e9c9c99ae947791bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>hash</name>
      <anchorfile>db/dfe/structODnsExtension_1_1DNSTimeRecord.html</anchorfile>
      <anchor>a9f28aaf10855f36bd5c06a139c317f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rcv_time</name>
      <anchorfile>db/dfe/structODnsExtension_1_1DNSTimeRecord.html</anchorfile>
      <anchor>aaf62fcf22bf4de5b43977ca1222f4309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>expiry</name>
      <anchorfile>db/dfe/structODnsExtension_1_1DNSTimeRecord.html</anchorfile>
      <anchor>a431dd457b83ec17ed0c600ce8ca2915c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::DNSTimeRecordComparator</name>
    <filename>d0/d5c/classODnsExtension_1_1DNSTimeRecordComparator.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSTimeRecordComparator</name>
      <anchorfile>d0/d5c/classODnsExtension_1_1DNSTimeRecordComparator.html</anchorfile>
      <anchor>a85e4d0752e04e4c016aa8e3f75a3d5a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSTimeRecordComparator</name>
      <anchorfile>d0/d5c/classODnsExtension_1_1DNSTimeRecordComparator.html</anchorfile>
      <anchor>a96a9ae82375ccedde45348e2ed8732ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>d0/d5c/classODnsExtension_1_1DNSTimeRecordComparator.html</anchorfile>
      <anchor>a8c3cc88669131b5213fb8335884b7fbd</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::DNSTimeRecord &gt; t1, std::shared_ptr&lt; ODnsExtension::DNSTimeRecord &gt; t2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::DNSTTLCache</name>
    <filename>df/d6a/classODnsExtension_1_1DNSTTLCache.html</filename>
    <base>ODnsExtension::DNSCache</base>
    <member kind="function">
      <type></type>
      <name>DNSTTLCache</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>aa65e7cb56f6a33f4168173d25eaa84b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSTTLCache</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a2fdea983830b4101de2367fb40291e60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>put_into_cache</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a323a4b726c5c00ee3138862fbdf5eec5</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; record)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>get_from_cache</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a6ebf4e0819c5c05c392c503feefd8e81</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_in_cache</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a030d347ad239ce158b39b6498f5e6bbc</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a680d9c77a6d57297928e3ffe45e14153</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a0711c4a3373f0a56c19c2f7762d23917</anchor>
      <arglist>(std::string hash, std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>evict</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a8b8d3a00b6e51b0cd8499ff9ffe4400d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>get_matching_hashes</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a85e8a9d81da6f9bf84e2e692bdc4dacd</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>halfTTL</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a31a6169fb32dbeedb24fb7190ba8c1cc</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>cleanup</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>adc25deb491745ec21b77cceaa973440a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; DNSTimeRecord &gt; &gt; &gt;</type>
      <name>get_cache_table</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a4ac1e73380432c21dd584b023ca3be48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_time_record</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>af7f2e193c3950fa2d63b50143ee928b7</anchor>
      <arglist>(std::shared_ptr&lt; DNSTimeRecord &gt; tr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; DNSTimeRecord &gt; &gt; &gt;</type>
      <name>cache</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a942dbd196261f21692cc6b5e37e5d6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::shared_ptr&lt; ODnsExtension::DNSTimeRecord &gt;, ODnsExtension::DNSTimeRecordComparator &gt;</type>
      <name>dnsRecordPriorityCache</name>
      <anchorfile>df/d6a/classODnsExtension_1_1DNSTTLCache.html</anchorfile>
      <anchor>a05bc12597e99679f05f6ef5773948eb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::FriendData</name>
    <filename>de/d64/structODnsExtension_1_1FriendData.html</filename>
    <member kind="function">
      <type></type>
      <name>FriendData</name>
      <anchorfile>de/d64/structODnsExtension_1_1FriendData.html</anchorfile>
      <anchor>a366f21e42d14254fbcf550f7b9c36a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; PairingData &gt;</type>
      <name>pdata</name>
      <anchorfile>de/d64/structODnsExtension_1_1FriendData.html</anchorfile>
      <anchor>aa4be868d2c9ce4224b45982190cfed57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>address</name>
      <anchorfile>de/d64/structODnsExtension_1_1FriendData.html</anchorfile>
      <anchor>a733ed97efb89d5f90625998bb185618e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>port</name>
      <anchorfile>de/d64/structODnsExtension_1_1FriendData.html</anchorfile>
      <anchor>a40e7b3ded5acae178e1862c5bdcdead1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>last_informed</name>
      <anchorfile>de/d64/structODnsExtension_1_1FriendData.html</anchorfile>
      <anchor>ac48082294b2fd01cf452c3494aeb4b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>online</name>
      <anchorfile>de/d64/structODnsExtension_1_1FriendData.html</anchorfile>
      <anchor>a9135ef1344cea444ee2c0cb60cef4066</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::MDNSAnnouncer</name>
    <filename>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSAnnouncer</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>aa7dd2cfeed13fe79b3bf7f41b163b77d</anchor>
      <arglist>(ODnsExtension::MDNSProbeScheduler *_probe_scheduler, ODnsExtension::MDNSResponseScheduler *_response_scheduler, ODnsExtension::TimeEventSet *_timeEventSet, std::vector&lt; std::shared_ptr&lt; MDNSService &gt;&gt; services, std::string _hostname, IPvXAddress *_hostaddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDNSAnnouncer</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a698f74ad468c6948e47932e8246dd32e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a1135270319ff46a286d92fb16228b98e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restart</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a9c5a7ac2cb192acf4877379b504579db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>check_conflict</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a46a07f6e01c6ef530ce498b846568f18</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_service</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a1fe129ae255de8b78d9f6dcc2c8e2241</anchor>
      <arglist>(std::shared_ptr&lt; MDNSService &gt; service)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>get_announced_services</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>adcef0f44d7447d3f06792838a91e823d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elapse</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a717ddc588281f9644d01dbf0d30884bb</anchor>
      <arglist>(ODnsExtension::TimeEvent *e, std::shared_ptr&lt; void &gt; data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>withdraw</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a704afbe0ada6568a8ccb9c0da0893052</anchor>
      <arglist>(std::shared_ptr&lt; Probe &gt; p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>goodbye</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a5fbb8baddda2c93ad7a372ce69f22d95</anchor>
      <arglist>(std::shared_ptr&lt; Probe &gt; p, int send_goodbye, int remove)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAnnounced</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a9120db2fe0839408a713b39eb3873a67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AnnouncerState</type>
      <name>getState</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>acf7e7f9d9ebcc7bcc3b0ff3fffce08cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ODnsExtension::DNSTTLCache *</type>
      <name>getCache</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>ae0fcd2326c86e46bcd14963fd7d3b72e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>elapseCallback</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>ad9344dc5345754fe0d03e2c35d6cf9ef</anchor>
      <arglist>(ODnsExtension::TimeEvent *e, std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a303b008d196d4236fdc93d25540938f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::DNSTTLCache *</type>
      <name>auth_cache</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a88efd0b0703544a792ae1fe999aeb4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::MDNSProbeScheduler *</type>
      <name>probe_scheduler</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a39404115bb1eeab9c6d5fd7f93d1e42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::MDNSResponseScheduler *</type>
      <name>response_scheduler</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a2e65997fe3370748dcae890bf6d1674d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress *</type>
      <name>hostaddress</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a9bd6f8bfdf96c66f7fc8c3ff22678e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>hostname</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>ad0f1039d9b579c42697958ae3bb204c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>target</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>aadef0a47090e9f944edfce9310c66219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_internal</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a48d37fac07af1894ab87356fae9ac5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_announced_jobs</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a2cdd143f5b7f6e5bf22dc4d0d35025db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnouncerState</type>
      <name>s</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a7c573855c88b32439dea863cbb624523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, std::string &gt;</type>
      <name>probe_to_cache</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>ac0065d0da273287fb62f1aedb3feb36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSService &gt; &gt;</type>
      <name>to_announce</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a65cab59ba4a53b7fa74ca96fcd1fc4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; Probe &gt; &gt;</type>
      <name>probing</name>
      <anchorfile>d4/dcc/classODnsExtension_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a8c6e86d0c5dc59a78e88fa900a2c50ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::MDNSKey</name>
    <filename>d4/dd0/structODnsExtension_1_1MDNSKey.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSKey</name>
      <anchorfile>d4/dd0/structODnsExtension_1_1MDNSKey.html</anchorfile>
      <anchor>a32d2b98a9c244f54477702b81e08bac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>d4/dd0/structODnsExtension_1_1MDNSKey.html</anchorfile>
      <anchor>a45a33515137fcec47adfca80665eb423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>type</name>
      <anchorfile>d4/dd0/structODnsExtension_1_1MDNSKey.html</anchorfile>
      <anchor>a86c8b12a126b6d68ffdaf6760bbcd391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>_class</name>
      <anchorfile>d4/dd0/structODnsExtension_1_1MDNSKey.html</anchorfile>
      <anchor>a52e0e32dd4bef4084a34bf73eef52c58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::MDNSProbeJob</name>
    <filename>de/df8/structODnsExtension_1_1MDNSProbeJob.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSProbeJob</name>
      <anchorfile>de/df8/structODnsExtension_1_1MDNSProbeJob.html</anchorfile>
      <anchor>a9522b0490cd653c95455ea9c059d84b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>id</name>
      <anchorfile>de/df8/structODnsExtension_1_1MDNSProbeJob.html</anchorfile>
      <anchor>a1fdc0ab915764b9f215f52f3bf95e337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeEvent *</type>
      <name>e</name>
      <anchorfile>de/df8/structODnsExtension_1_1MDNSProbeJob.html</anchorfile>
      <anchor>a1b488ed1f477e4045f0a40d9627db906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>r</name>
      <anchorfile>de/df8/structODnsExtension_1_1MDNSProbeJob.html</anchorfile>
      <anchor>aee49fa5545df8bf6f016814c967d8ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>done</name>
      <anchorfile>de/df8/structODnsExtension_1_1MDNSProbeJob.html</anchorfile>
      <anchor>adffad65c156f0796ef3b8c01ad2a4bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delivery</name>
      <anchorfile>de/df8/structODnsExtension_1_1MDNSProbeJob.html</anchorfile>
      <anchor>a862475fc882ab2e83ca1c577bf79d35b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::MDNSProbeScheduler</name>
    <filename>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSProbeScheduler</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a1952206ec6116af101e37f7d9334bbcb</anchor>
      <arglist>(TimeEventSet *_timeEventSet, UDPSocket *_outSock, void *resolver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDNSProbeScheduler</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a50a04c66d5210e96e3b11e0514928eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a3c4e6e8560ef07837ba6d48b4ff231ba</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int immediately)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elapse</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a3d6128b7b73f50c787b6066b0da2bbfb</anchor>
      <arglist>(TimeEvent *e, std::shared_ptr&lt; void &gt; data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a3f69edd38f453268f73c19c5a2698f94</anchor>
      <arglist>(void(_callback)(std::shared_ptr&lt; void &gt;, void *))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSocket</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a1f9e5e188abbe8a6d8c7f5043c5ad2e3</anchor>
      <arglist>(UDPSocket *sock)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCache</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a42490741f57066dfcc729ab2024eca55</anchor>
      <arglist>(DNSTTLCache *_cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrivacyData</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a32b499745bc94fb89d3e28507e7e736e</anchor>
      <arglist>(std::unordered_map&lt; std::string, std::shared_ptr&lt; PrivateMDNSService &gt;&gt; *private_service_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *friend_data_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *instance_name_table, UDPSocket *privacySocket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>elapseCallback</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a974af6a1b7c5d37839ceaf4a22f9aeb8</anchor>
      <arglist>(TimeEvent *e, std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSProbeJob &gt;</type>
      <name>new_job</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ab2d873e3df0c55ca2504b17d26e16f16</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSProbeJob &gt;</type>
      <name>find_job</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a12ce56dde1c1193b48fea93eb9903046</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSProbeJob &gt;</type>
      <name>find_history</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ab9a3d887fd8a3a63d8ee58e122d2943d</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>done</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>aebc29a2022d3f4d24d2a723d7ee5a9bd</anchor>
      <arglist>(std::shared_ptr&lt; MDNSProbeJob &gt; pj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_job</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>af2e9d627f3e6458fed3d60770536ec8f</anchor>
      <arglist>(std::shared_ptr&lt; MDNSProbeJob &gt; pj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>preparePacketAndSend</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>abe796b3eb1b071363c1e35e9570b1af0</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSQuestion &gt;&gt; qlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; nslist, int qdcount, int nscount, int packetSize, int TC, int is_private)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>append_question</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a99bd16ff2a9af4fda0e44eaf56055425</anchor>
      <arglist>(std::shared_ptr&lt; MDNSProbeJob &gt; pj, std::list&lt; std::shared_ptr&lt; DNSQuestion &gt;&gt; *qlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *nslist, int *packetSize, int *qdcount, int *nscount, int is_private)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>resolver</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ae70b1eb9d4ce1072b2eafb3de1983cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>af019eea5b70679d491af67e324d8c42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSProbeJob &gt; &gt;</type>
      <name>jobs</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>adcd6a7ab1b83cd8d76a3b0f04f552108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSProbeJob &gt; &gt;</type>
      <name>history</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a69c3604d89a6d91b608fef977dd49efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>outSock</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a2be5065f1dfaceb8d50a16ad1b267278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>privacySock</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a968b53fd256daa04196c3208eb97b68b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>multicast_address</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a97fc35015604ad1baa93f2c17ca2ff06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::PrivateMDNSService &gt; &gt; *</type>
      <name>private_service_table</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a8b5d16bc4113daaa810f61cfaae6bf65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::FriendData &gt; &gt; *</type>
      <name>friend_data_table</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a680fc8631c0b841deba9d09a68236d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::FriendData &gt; &gt; *</type>
      <name>instance_name_table</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ae65d58ea38a0ce4f173f94ed74ab0e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hasPrivacy</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ac03b2ae56f334e2c8e7f05530ad54074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSTTLCache *</type>
      <name>cache</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a976d2c26f03322d95f8d5c57ec0031bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>id_count</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a8afedfa2ea2df7c70d49feda78b02a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>d4/dd9/classODnsExtension_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>afc82077f081d6d3a5cd6949fec19e0e1</anchor>
      <arglist>)(std::shared_ptr&lt; void &gt;, void *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::MDNSQueryJob</name>
    <filename>de/d13/structODnsExtension_1_1MDNSQueryJob.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSQueryJob</name>
      <anchorfile>de/d13/structODnsExtension_1_1MDNSQueryJob.html</anchorfile>
      <anchor>a44022cda569c95f096e74a64d5f65666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>id</name>
      <anchorfile>de/d13/structODnsExtension_1_1MDNSQueryJob.html</anchorfile>
      <anchor>aff1e093549ab38af3ed2bb49b1cf0055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ODnsExtension::TimeEvent *</type>
      <name>e</name>
      <anchorfile>de/d13/structODnsExtension_1_1MDNSQueryJob.html</anchorfile>
      <anchor>a3d8aa01cbd76465325fa455ac3ba719d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; ODnsExtension::MDNSKey &gt;</type>
      <name>key</name>
      <anchorfile>de/d13/structODnsExtension_1_1MDNSQueryJob.html</anchorfile>
      <anchor>aac02625ae06a629bcb0c9ffa5d113918</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>done</name>
      <anchorfile>de/d13/structODnsExtension_1_1MDNSQueryJob.html</anchorfile>
      <anchor>a4dd0be0ca63f66f01bc3481334b29e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delivery</name>
      <anchorfile>de/d13/structODnsExtension_1_1MDNSQueryJob.html</anchorfile>
      <anchor>a39b8bc6ad788249ff73dc403df2764ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::MDNSQueryScheduler</name>
    <filename>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSQueryScheduler</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a3c3e1fc1bb7df5566b8d17726457fb05</anchor>
      <arglist>(ODnsExtension::TimeEventSet *_timeEventSet, UDPSocket *_outSock, void *resolver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDNSQueryScheduler</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a00351c49b61e2ff2da53d4afadff8e15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a54218427ab72dcd7fad70410a48daceb</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key, int immediately)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>check_dup</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ac77101935ee26d7906ed050adac6906e</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elapse</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>aa68f25f87bf6901b9cc546246a3fc401</anchor>
      <arglist>(ODnsExtension::TimeEvent *e, std::shared_ptr&lt; void &gt; data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a63fade634e56c6da8e9c2669aa7cf7c0</anchor>
      <arglist>(void(_callback)(std::shared_ptr&lt; void &gt;, void *))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSocket</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ac19cb153b94790ff96afe74f9e40c74f</anchor>
      <arglist>(UDPSocket *sock)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCache</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a4622269ebcc23d0601c61e3159840665</anchor>
      <arglist>(ODnsExtension::DNSTTLCache *_cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrivacyData</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a1cb30f58a63fcf12f9160afebb156d34</anchor>
      <arglist>(std::unordered_map&lt; std::string, std::shared_ptr&lt; PrivateMDNSService &gt;&gt; *private_service_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *friend_data_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *instance_name_table, UDPSocket *privacySocket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>elapseCallback</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ad2408c7c99b3a140541087b937b41d43</anchor>
      <arglist>(ODnsExtension::TimeEvent *e, std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; ODnsExtension::MDNSQueryJob &gt;</type>
      <name>new_job</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a1b8c4403c20098c0f0daf84c0521d7b0</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; ODnsExtension::MDNSQueryJob &gt;</type>
      <name>find_job</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a1de0cdad3205db2cb61b1dcbbc673eb1</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; ODnsExtension::MDNSQueryJob &gt;</type>
      <name>find_history</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a36f3201b41a4e652d9fa1aaa23c97cef</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>done</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a6c9ac55d07b18cb96a7beaa8d9df8c1f</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSQueryJob &gt; qj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_job</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>aa78f4e1f98574d5bb87ddbb925ee6d54</anchor>
      <arglist>(std::shared_ptr&lt; ODnsExtension::MDNSQueryJob &gt; qj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>append_cache_entries</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ae1fd405fad5471bb97293c16a8646de0</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>append_question</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a1ad8feaa866e6554ad353caae29d17be</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key, std::list&lt; std::shared_ptr&lt; DNSQuestion &gt;&gt; *qlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *anlist, int *packetSize, int *qdcount, int *ancount, int is_private)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>preparePacketAndSend</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>aae2c0dfc7d738c18b21ab12e0090704d</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSQuestion &gt;&gt; qlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; anlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; nslist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; arlist, int qdcount, int ancount, int nscount, int arcount, int packetSize, int TC, int is_private)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>resolver</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a746e9120bae21d50569b58fbe5d09a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a61ad614efc0ebb04c5e96b30f7ec29e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSQueryJob &gt; &gt;</type>
      <name>jobs</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ab0a2549f2b31765c3f22bfc9fccbaf76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSQueryJob &gt; &gt;</type>
      <name>history</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ae2d5e5199fdc3ef4b89f05e6c7f573f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>outSock</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a5992d813e201f529dcf885c1e6a4d5b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>privacySock</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ad97c6585b5eb2033b2d603452b58e52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>multicast_address</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a626316921c6de53cc80bba3606f63ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::PrivateMDNSService &gt; &gt; *</type>
      <name>private_service_table</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a3d24e2c0e55ab4d548022aefaf5c7092</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::FriendData &gt; &gt; *</type>
      <name>friend_data_table</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>af0f6dec7aa385809f4d8eb7f8ff65242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::FriendData &gt; &gt; *</type>
      <name>instance_name_table</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a362c7491d57486c7b7ae946f15f9f447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hasPrivacy</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ac54fcde8034385444a744765662f7642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSTTLCache *</type>
      <name>cache</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a747b26c188a674e60bc1efed615f99bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>id_count</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>af3fa09c82b7f09b27a060f836824e80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>d1/d12/classODnsExtension_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ab4aa5696820b76a02ec3a68bda386e6a</anchor>
      <arglist>)(std::shared_ptr&lt; void &gt;, void *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::MDNSResponseJob</name>
    <filename>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSResponseJob</name>
      <anchorfile>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</anchorfile>
      <anchor>ac4346d5f1ede858571cf354f1bc12c57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>id</name>
      <anchorfile>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a68acb5d9a8adb9ff17f95f4e4d1222b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeEvent *</type>
      <name>e</name>
      <anchorfile>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</anchorfile>
      <anchor>aa0ce47dab390523ee73c06da1226d8ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>r</name>
      <anchorfile>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</anchorfile>
      <anchor>af41be0e09d22967ace9186b6c8deee6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress *</type>
      <name>querier</name>
      <anchorfile>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a87e3283cab1d43c3e3198637962de63c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>done</name>
      <anchorfile>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</anchorfile>
      <anchor>ac304458e74a2008099e727db13fbede8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>suppressed</name>
      <anchorfile>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a665db4e08cb145213e467cc1d41898e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>flush_cache</name>
      <anchorfile>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a76feadf62eb2300b429c3797526dd8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delivery</name>
      <anchorfile>d6/d11/structODnsExtension_1_1MDNSResponseJob.html</anchorfile>
      <anchor>aab5dc2dc880ef0dd977070c869f69659</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::MDNSResponseScheduler</name>
    <filename>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSResponseScheduler</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a3140e0fd76bf431f8d9424a4da659a18</anchor>
      <arglist>(TimeEventSet *_timeEventSet, UDPSocket *_outSock, void *resolver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDNSResponseScheduler</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ae60b7e3ef0ad8ab4082dc8ae8ace2215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>aac0e114bff5356113cd37cb3414e5273</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int flush_cache, IPvXAddress *querier, int immediately)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elapse</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a7e2a4f54aa67f5126cd7b758fca3ff28</anchor>
      <arglist>(TimeEvent *e, std::shared_ptr&lt; void &gt; data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>check_dup</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a3b5b2053ca1eaee0e61fc3f01df39dd9</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int flush_cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>suppress</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ace56dbba31fe82175c551d0f62e60cc4</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int flush_cache, IPvXAddress *querier, int immediately)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a384349b9c32c8d89e343a9755089ee0e</anchor>
      <arglist>(void(_callback)(std::shared_ptr&lt; void &gt;, void *))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSocket</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ad9d5e9fdfe66baf9fb8fc491debb1bb9</anchor>
      <arglist>(UDPSocket *sock)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthCache</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a3b892521d57477ff1859ee7d8c95c020</anchor>
      <arglist>(DNSTTLCache *_cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrivacyData</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a2e43b1d6eb1fd2c808368d6ec191502e</anchor>
      <arglist>(std::unordered_map&lt; std::string, std::shared_ptr&lt; PrivateMDNSService &gt;&gt; *private_service_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *friend_data_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *instance_name_table, UDPSocket *privacySocket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>elapseCallback</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>abbfe56ff855f562824f0da3337c1e0de</anchor>
      <arglist>(TimeEvent *e, std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSResponseJob &gt;</type>
      <name>new_job</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a1eb21627b30174deb69162d92aaabdf5</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int done, int suppress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSResponseJob &gt;</type>
      <name>find_job</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>abbed2c3ed4af239fa2be4ce1667d42ea</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSResponseJob &gt;</type>
      <name>find_history</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a0a8d9371cb1ef94240410eaf17252d2a</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSResponseJob &gt;</type>
      <name>find_suppressed</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a56e99dfb7ec2b8ce9e39314309236dc2</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, IPvXAddress *querier)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>done</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>afed6f6452cd7e6f988de571d479daf84</anchor>
      <arglist>(std::shared_ptr&lt; MDNSResponseJob &gt; rj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_job</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a08547e3b363dd9ae0be98406949e10ec</anchor>
      <arglist>(std::shared_ptr&lt; MDNSResponseJob &gt; rj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>appendTransitiveEntries</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a049eeb0f4d9ea016e420639499a10f5e</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *anlist, int *packetSize, int *ancount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>appendFromCache</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>aae20b1d4e9cb90b520b17aa7249ca871</anchor>
      <arglist>(std::string hash, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *anlist, int *packetSize, int *ancount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>appendRecord</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a8eada1fc2fcf6b54c37b4f5342d41ddb</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *anlist, int *packetSize, int *ancount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>preparePacketAndSend</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a66c6946439c439b9b4b71238190f51e5</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; anlist, int ancount, int packetSize, int is_private)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>resolver</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a4674df14361e4b27cee5c4f258f2b5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODnsExtension::TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a984e66647a5c878716e9276d80278428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSQueryJob &gt; &gt;</type>
      <name>jobs</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a00d56079f73d093442a1571c8bf87ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSQueryJob &gt; &gt;</type>
      <name>history</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a8d24018b97990ef6b958e965095b33d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSResponseJob &gt; &gt;</type>
      <name>suppressed</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a4c2aba56d8ec3214f3697dcedb0a0d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>outSock</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>addf70decefdc16daf55fbe758a247e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>privacySock</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a8c0a02a7b1e9b0d9e649427423315c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>multicast_address</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a1d84939bfd90ff2f4e9c27e6421704ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::PrivateMDNSService &gt; &gt; *</type>
      <name>private_service_table</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>aec1b453201f0e008b75c8b6ca54e8f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::FriendData &gt; &gt; *</type>
      <name>friend_data_table</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ade9370f74e173a305da21274755c17e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; ODnsExtension::FriendData &gt; &gt; *</type>
      <name>instance_name_table</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a9923c670e8fff7603c891d14d2eb932e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hasPrivacy</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>aa8aea0d332ed03050f295673ed30d582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSTTLCache *</type>
      <name>auth_cache</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>aab8afa9fa9b570f8e1812d3d89c7a101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>id_count</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a88644f8b17fdaef9fb15c413a5df1a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>d7/d24/classODnsExtension_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a7668dfc71abef5b1c7005880470dd9f6</anchor>
      <arglist>)(std::shared_ptr&lt; void &gt;, void *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::MDNSService</name>
    <filename>de/dc0/structODnsExtension_1_1MDNSService.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSService</name>
      <anchorfile>de/dc0/structODnsExtension_1_1MDNSService.html</anchorfile>
      <anchor>a8861df46b6703b4a62a713a91adac36f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>service_type</name>
      <anchorfile>de/dc0/structODnsExtension_1_1MDNSService.html</anchorfile>
      <anchor>a5801c278555e91f16ab6af61c9db2f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>de/dc0/structODnsExtension_1_1MDNSService.html</anchorfile>
      <anchor>a826995aa2c4746082e947d2bdb1a8861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; std::string &gt;</type>
      <name>txtrecords</name>
      <anchorfile>de/dc0/structODnsExtension_1_1MDNSService.html</anchorfile>
      <anchor>a2cdcb08eaf5ce2fb34c76bf7d862aa4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>port</name>
      <anchorfile>de/dc0/structODnsExtension_1_1MDNSService.html</anchorfile>
      <anchor>a2081cbbc32293de2b0b186d2477a6390</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::PairingData</name>
    <filename>d5/d93/structODnsExtension_1_1PairingData.html</filename>
    <member kind="function">
      <type></type>
      <name>PairingData</name>
      <anchorfile>d5/d93/structODnsExtension_1_1PairingData.html</anchorfile>
      <anchor>a14a8e1276522a10a4e29310fde0b5e3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>crypto_key</name>
      <anchorfile>d5/d93/structODnsExtension_1_1PairingData.html</anchorfile>
      <anchor>aa7d8d9fbcb6d131522173e1909e6e362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>friend_id</name>
      <anchorfile>d5/d93/structODnsExtension_1_1PairingData.html</anchorfile>
      <anchor>a65cfc4be16c024db727dc5dde4dc8a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>privacy_service_instance_name</name>
      <anchorfile>d5/d93/structODnsExtension_1_1PairingData.html</anchorfile>
      <anchor>a10d0f2bb1d0d11e87a29f847e8aeeb80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::PrivateMDNSService</name>
    <filename>d9/d2f/structODnsExtension_1_1PrivateMDNSService.html</filename>
    <member kind="function">
      <type></type>
      <name>PrivateMDNSService</name>
      <anchorfile>d9/d2f/structODnsExtension_1_1PrivateMDNSService.html</anchorfile>
      <anchor>a98224ad5b46830c61e6c4b227f18aa6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>service_type</name>
      <anchorfile>d9/d2f/structODnsExtension_1_1PrivateMDNSService.html</anchorfile>
      <anchor>a3537acce485a492f0918cee268b1f929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>is_private</name>
      <anchorfile>d9/d2f/structODnsExtension_1_1PrivateMDNSService.html</anchorfile>
      <anchor>aac3099fab3290459ea75c697883c68dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; std::string &gt;</type>
      <name>offered_to</name>
      <anchorfile>d9/d2f/structODnsExtension_1_1PrivateMDNSService.html</anchorfile>
      <anchor>add7c733b1d22c19c310417ccaf5a5c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; std::string &gt;</type>
      <name>offered_by</name>
      <anchorfile>d9/d2f/structODnsExtension_1_1PrivateMDNSService.html</anchorfile>
      <anchor>ac66a8f206e01295980a4d08f1576d927</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::Probe</name>
    <filename>d9/dfb/structODnsExtension_1_1Probe.html</filename>
    <member kind="function">
      <type></type>
      <name>Probe</name>
      <anchorfile>d9/dfb/structODnsExtension_1_1Probe.html</anchorfile>
      <anchor>a14a0d651d79423dc366eafd74c60eeb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>probe_id</name>
      <anchorfile>d9/dfb/structODnsExtension_1_1Probe.html</anchorfile>
      <anchor>afca24353345414e7df53ac237680935e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ODnsExtension::TimeEvent *</type>
      <name>e</name>
      <anchorfile>d9/dfb/structODnsExtension_1_1Probe.html</anchorfile>
      <anchor>af4379ba9a828e9bd526bcfa13539eb62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; ODnsExtension::DNSRecord &gt;</type>
      <name>r</name>
      <anchorfile>d9/dfb/structODnsExtension_1_1Probe.html</anchorfile>
      <anchor>acd5f5e57acea83e6e3e2e81f6abbf40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n_iter</name>
      <anchorfile>d9/dfb/structODnsExtension_1_1Probe.html</anchorfile>
      <anchor>a9aa0fe77737e4d7a72e1c839dbceed29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>collision_count</name>
      <anchorfile>d9/dfb/structODnsExtension_1_1Probe.html</anchorfile>
      <anchor>a4f8b6633305534d2a10550089893be1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; MDNSService &gt;</type>
      <name>ref_service</name>
      <anchorfile>d9/dfb/structODnsExtension_1_1Probe.html</anchorfile>
      <anchor>abe12dec5b3e3307fef0a364837106733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ProbeState</type>
      <name>s</name>
      <anchorfile>d9/dfb/structODnsExtension_1_1Probe.html</anchorfile>
      <anchor>a93d36d98a131e343466b0ca00229b257</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::Query</name>
    <filename>dc/d23/structODnsExtension_1_1Query.html</filename>
    <member kind="function">
      <type></type>
      <name>Query</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>a903f5b8e61d11c4a4e4749f802ddef00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Query</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>a821c71844ac5d4abf012e0fe03129345</anchor>
      <arglist>(unsigned short _id, unsigned short _options, unsigned short _qdcount, unsigned short _ancount, unsigned short _nscount, unsigned short _arcount, DNSQuestion *_questions, std::string _src_address)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>id</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>a9c1181d50e5e72f278b32d7603031a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>options</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>a1dd625e8bae7e868bbab3e0622a4d6a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>qdcount</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>aeb605b5128d340238d77e4491cd26b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>ancount</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>a47c4ce4347cd30c8803bc25eb27e5f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nscount</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>a9ddeca02f07844c01031e80aa5a19516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>arcount</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>adff65d8727be0be35a715dd1bba11b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct DNSQuestion *</type>
      <name>questions</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>a17a1482ab75b4f71586464b1cd44f2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>src_address</name>
      <anchorfile>dc/d23/structODnsExtension_1_1Query.html</anchorfile>
      <anchor>a8241dd0f1f2d3388ebd8e76b739b3dd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::Response</name>
    <filename>d2/d0f/structODnsExtension_1_1Response.html</filename>
    <member kind="function">
      <type></type>
      <name>Response</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>ada8922627739eb2027795334a2d4babf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Response</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>a3498885cf1793363ebd39a340ca88bcb</anchor>
      <arglist>(unsigned short _id, unsigned short _options, unsigned short _qdcount, unsigned short _ancount, unsigned short _nscount, unsigned short _arcount, DNSRecord *_answers, DNSRecord *_authoritative, DNSRecord *_additional)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>id</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>a297d95afb660851f2e7605b7bc670ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>options</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>a80f254fef127d6a9d3752dcecd7c12b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>qdcount</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>ad94044ae312234b05f98dd287efab454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>ancount</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>a115a2db2ceff47e50f79535a8e88839f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nscount</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>a3a0d02428b402a565f85c10d24c836ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>arcount</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>a216e3f30406e241bc66ccb6ce42b88ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct DNSRecord *</type>
      <name>answers</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>acc530c7480945c71ca9786defcc46c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct DNSRecord *</type>
      <name>authoritative</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>a547e19ee95a382daffe4ab86f4434430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct DNSRecord *</type>
      <name>additional</name>
      <anchorfile>d2/d0f/structODnsExtension_1_1Response.html</anchorfile>
      <anchor>a762bf363a4e6ef333353ca1c9e719251</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ODnsExtension::SRVData</name>
    <filename>d3/daf/structODnsExtension_1_1SRVData.html</filename>
    <member kind="function">
      <type></type>
      <name>SRVData</name>
      <anchorfile>d3/daf/structODnsExtension_1_1SRVData.html</anchorfile>
      <anchor>ababe7d79fbdfb2ba581673f9f8f029ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>service</name>
      <anchorfile>d3/daf/structODnsExtension_1_1SRVData.html</anchorfile>
      <anchor>afca2d860a518636b7803654b43577268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>proto</name>
      <anchorfile>d3/daf/structODnsExtension_1_1SRVData.html</anchorfile>
      <anchor>a1247a1533ba2bb281ad802f7c31234b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>d3/daf/structODnsExtension_1_1SRVData.html</anchorfile>
      <anchor>a9045dee7b7fa42a49d2de4e6bef80f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>target</name>
      <anchorfile>d3/daf/structODnsExtension_1_1SRVData.html</anchorfile>
      <anchor>afb2788cdfe8596b494348aed1ceae9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>ttl</name>
      <anchorfile>d3/daf/structODnsExtension_1_1SRVData.html</anchorfile>
      <anchor>a6eb0d8c41746f2982c5de9e8588ed090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>weight</name>
      <anchorfile>d3/daf/structODnsExtension_1_1SRVData.html</anchorfile>
      <anchor>a36e536914cfa01ddbe0a0e11266831f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>priority</name>
      <anchorfile>d3/daf/structODnsExtension_1_1SRVData.html</anchorfile>
      <anchor>aa53ca9bfb3ba2578869c9fae8dccc0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>port</name>
      <anchorfile>d3/daf/structODnsExtension_1_1SRVData.html</anchorfile>
      <anchor>aaddb6f78ec185ec125d7596a41731da4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::TimeEvent</name>
    <filename>d3/d54/classODnsExtension_1_1TimeEvent.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeEvent</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a5d75c87544516d073b6b7638973f43c8</anchor>
      <arglist>(void *_scheduler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeEvent</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a54fa732bf31d81677f87ba7220f7de9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>getData</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a19e8a296b4cad875ee2c0b2c1dc5b865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a31d17fee96904dedd2cf2eb001fa3dce</anchor>
      <arglist>(std::shared_ptr&lt; void &gt; _data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performCallback</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a2190c89373872f501d619f6e40dad324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a7237a3abe31ee83980c98a397d91c325</anchor>
      <arglist>(void(_callback)(ODnsExtension::TimeEvent *, std::shared_ptr&lt; void &gt;, void *))</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getLastRun</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a07d9c10eeb04c5bc4a2cd93ef7e91dc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastRun</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>afa2f6601137cda7f42be4cb886782ffc</anchor>
      <arglist>(simtime_t _last_run)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getExpiry</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a2d75fb91e614d5800bf44753162ed873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpiry</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a5f53249aafd17086befb1c0c219e15c6</anchor>
      <arglist>(simtime_t _expiry)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>expiry</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>ae3c882840ad7b7b1d45bdff62e03f5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>last_run</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a8482bfeb631e36e2167bea6a62f73789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>data</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>aca2ff320736b12237564cd29da0ef294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>scheduler</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a2400ebc1861f37c74e9506ed349ff693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>d3/d54/classODnsExtension_1_1TimeEvent.html</anchorfile>
      <anchor>a813c3813d5bb5923d1cd67dc501b86ef</anchor>
      <arglist>)(ODnsExtension::TimeEvent *, std::shared_ptr&lt; void &gt;, void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::TimeEventComparator</name>
    <filename>d0/dc2/classODnsExtension_1_1TimeEventComparator.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeEventComparator</name>
      <anchorfile>d0/dc2/classODnsExtension_1_1TimeEventComparator.html</anchorfile>
      <anchor>a2f8b470af8a9ff24c8877682836ce2cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeEventComparator</name>
      <anchorfile>d0/dc2/classODnsExtension_1_1TimeEventComparator.html</anchorfile>
      <anchor>af75c84a18bb6089292d8a30fc6486cb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>d0/dc2/classODnsExtension_1_1TimeEventComparator.html</anchorfile>
      <anchor>a6532510ed5c9b7dc557e3d0138a155b8</anchor>
      <arglist>(ODnsExtension::TimeEvent *t1, ODnsExtension::TimeEvent *t2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ODnsExtension::TimeEventSet</name>
    <filename>db/d9f/classODnsExtension_1_1TimeEventSet.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeEventSet</name>
      <anchorfile>db/d9f/classODnsExtension_1_1TimeEventSet.html</anchorfile>
      <anchor>a140774618cda057b13caf7dc06c6b76f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeEventSet</name>
      <anchorfile>db/d9f/classODnsExtension_1_1TimeEventSet.html</anchorfile>
      <anchor>af9c6dc29157bc956fea37a29620bb68f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTimeEvent</name>
      <anchorfile>db/d9f/classODnsExtension_1_1TimeEventSet.html</anchorfile>
      <anchor>aa7187f19dc55d89f5a4eb73b8ae9a02e</anchor>
      <arglist>(ODnsExtension::TimeEvent *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTimeEvent</name>
      <anchorfile>db/d9f/classODnsExtension_1_1TimeEventSet.html</anchorfile>
      <anchor>ac978cf81cd30391d7f37784a91a171e5</anchor>
      <arglist>(ODnsExtension::TimeEvent *t, simtime_t expiry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTimeEvent</name>
      <anchorfile>db/d9f/classODnsExtension_1_1TimeEventSet.html</anchorfile>
      <anchor>a392c865943a09eff4d86abd991d9884b</anchor>
      <arglist>(ODnsExtension::TimeEvent *t)</arglist>
    </member>
    <member kind="function">
      <type>ODnsExtension::TimeEvent *</type>
      <name>getTimeEventIfDue</name>
      <anchorfile>db/d9f/classODnsExtension_1_1TimeEventSet.html</anchorfile>
      <anchor>a2afa2475d1be1b4c1d2b7a0d68e4cd1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ODnsExtension::TimeEvent *</type>
      <name>getTopElement</name>
      <anchorfile>db/d9f/classODnsExtension_1_1TimeEventSet.html</anchorfile>
      <anchor>a03ece0bdf31af5ae7e0e9c453d1628bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; ODnsExtension::TimeEvent *, ODnsExtension::TimeEventComparator &gt;</type>
      <name>timeEventSet</name>
      <anchorfile>db/d9f/classODnsExtension_1_1TimeEventSet.html</anchorfile>
      <anchor>a36588bec9bb96e1c4f40ca9f9fb42519</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>applications</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/</path>
    <filename>dir_5300cae3a1557603f8e561b18f8f3907.html</filename>
    <dir>dns</dir>
    <dir>mdns</dir>
  </compound>
  <compound kind="dir">
    <name>common</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/</path>
    <filename>dir_fdedb0aba14d44ce9d99bc100e026e6a.html</filename>
    <dir>mdns</dir>
    <file>DNS.h</file>
    <file>DNSCache.cc</file>
    <file>DNSCache.h</file>
    <file>DNSSimpleCache.cc</file>
    <file>DNSSimpleCache.h</file>
    <file>DNSTTLCache.cc</file>
    <file>DNSTTLCache.h</file>
    <file>MDNS.cc</file>
    <file>MDNS.h</file>
  </compound>
  <compound kind="dir">
    <name>dns</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/dns/</path>
    <filename>dir_a70cec7c16c9e7bb14706c7a9a88bf31.html</filename>
    <file>DNSAuthServer.cc</file>
    <file>DNSAuthServer.h</file>
    <file>DNSClient.cc</file>
    <file>DNSClient.h</file>
    <file>DNSClientTraffGen.cc</file>
    <file>DNSClientTraffGen.h</file>
    <file>DNSEchoServer.cc</file>
    <file>DNSEchoServer.h</file>
    <file>DNSLocalCache.cc</file>
    <file>DNSLocalCache.h</file>
    <file>DNSServerBase.cc</file>
    <file>DNSServerBase.h</file>
  </compound>
  <compound kind="dir">
    <name>mdns</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/applications/mdns/</path>
    <filename>dir_c51e66ba7422a661c629ec4690827b49.html</filename>
    <file>MDNSResolver.cc</file>
    <file>MDNSResolver.h</file>
  </compound>
  <compound kind="dir">
    <name>mdns</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/common/mdns/</path>
    <filename>dir_a48fd9ad2b347c5e1223a112ba4994d8.html</filename>
    <file>MDNS_Privacy.cc</file>
    <file>MDNS_Privacy.h</file>
    <file>MDNSAnnouncer.cc</file>
    <file>MDNSAnnouncer.h</file>
    <file>MDNSProbeScheduler.cc</file>
    <file>MDNSProbeScheduler.h</file>
    <file>MDNSQueryScheduler.cc</file>
    <file>MDNSQueryScheduler.h</file>
    <file>MDNSResponseScheduler.cc</file>
    <file>MDNSResponseScheduler.h</file>
    <file>TimeEventSet.cc</file>
    <file>TimeEventSet.h</file>
  </compound>
  <compound kind="dir">
    <name>messages</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/messages/</path>
    <filename>dir_7e580a9e3cd345dd51216eb99dadc8eb.html</filename>
    <file>DNSPacket_m.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/</path>
    <filename>dir_68267d1309a1af8e8297ef4c3efbcdba.html</filename>
    <dir>applications</dir>
    <dir>common</dir>
    <dir>messages</dir>
    <dir>utils</dir>
  </compound>
  <compound kind="dir">
    <name>utils</name>
    <path>/home/saen/Disy/sources/opp_dns_extension/src/utils/</path>
    <filename>dir_313caf1132e152dd9b58bea13a4052ca.html</filename>
    <file>DNSTools.cc</file>
    <file>DNSTools.h</file>
    <file>DNSZoneConfig.cc</file>
    <file>DNSZoneConfig.h</file>
    <file>Utils.cc</file>
    <file>Utils.h</file>
  </compound>
</tagfile>
