<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>batch.py</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/scripts/</path>
    <filename>da/d19/batch_8py</filename>
    <namespace>batch</namespace>
    <member kind="function">
      <type>def</type>
      <name>run_command</name>
      <anchorfile>dd/db3/namespacebatch.html</anchorfile>
      <anchor>a96352d7e63b5d4b6972972e55f8d7738</anchor>
      <arglist>(cmd)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>performRun</name>
      <anchorfile>dd/db3/namespacebatch.html</anchorfile>
      <anchor>a9181a7dca55761ae90d1006d3d5eb168</anchor>
      <arglist>(low, high)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>main</name>
      <anchorfile>dd/db3/namespacebatch.html</anchorfile>
      <anchor>a710a34fb71b616741b0fa45385a1d5e7</anchor>
      <arglist>(argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNS.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>df/d90/DNS_8h</filename>
    <class kind="struct">INETDNS::Query</class>
    <class kind="struct">INETDNS::DNSQuestion</class>
    <class kind="struct">INETDNS::Response</class>
    <class kind="struct">INETDNS::SRVData</class>
    <class kind="struct">INETDNS::DNSRecord</class>
    <namespace>INETDNS</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_A</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a8ad10b7e8af14b060ee91ff78cb6a8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_NS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a34949f61cf814d35d727c1aafbbff642</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_CNAME</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a473b8041906a9af6d2672f2ad7deb636</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_SOA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aff8deda14e693b7b76dd365f7c056e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_NULL</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a818867c62e0cd35f37d25ad8ccb5fe5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_PTR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a330d99f5b7f49581b57d1795dc794253</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_HINFO</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a902c234134801d119b7cb29c67e0af01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_MINFO</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a32186749ae3507b717fc4ace2fb83615</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_MX</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aa4dd08c64f36a980aacc1227cfd3f260</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_TXT</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ab64d1044637a2dd9bda6bee28ab5d2f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_AAAA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ad60cb47d7da09044c95420b0db294e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_SRV</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ab5e4e846e8413750385db6c1b6d239f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_A</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a452aed1cac945a9721905a10e01583c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_NS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>af98ce1b5dac090d11cbf2888d34fa8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_CNAME</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a15e993799fc3bdada6d863f1a9089c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_SOA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a1fb0766fee820fee8bb6c2691a637bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_NULL</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a09cf751e97c6aee8bb3e9c8ae47bdd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_PTR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a3618a6d52d8ee12924bea989848e3734</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_HINFO</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a7c5227c45954f69f0be57e2740feb999</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_MINFO</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a869ccb001087bcc34ec789f3d99fcc2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_MX</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a0e986364c37728357f2bb6548498fcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_TXT</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>abec90afa8ff8b5846c477dd9ba23db63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_AAAA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a88009c3e8807d2b62c520fa6782c8f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_SRV</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a0caac14cc431b1b3750da66acb8590b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_AXFR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a2be1f4273e26a7335e618926b94ac533</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_VALUE_ANY</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a3e72cc70d3936af1f78ac8127cc39d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_AXFR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>af38c57d748e6e6ba4d603f7fee8d094d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_TYPE_STR_ANY</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a1fb288d50a6b8162b8ebbf523d6924cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_IN</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a9cc84b120d830f184e7249db81ed1736</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_CS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>afe503bec10b85f53a869bae9178c7f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_CH</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aa3eb5221ee3ac4ac83cd88b74553e15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_HS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>abfa6914cc6fb0b8e086e07e35e22bdbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_ANY</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a5559ce92af93f2440518dcec488986e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_IN</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a276f4dafc8a5ff0fef9124ef85be081d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_CS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a362d6e3355bcdf3c50cc2df160f35690</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_CH</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>af8a20f6512bdc2d123481acd64b3c9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_HS</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a16f99d184ee86357f52432a50d9c04bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_CLASS_STR_ANY</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a792d2cbf818bcf121619638a294fa954</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_PORT</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ab1d3f5c08428c20521a92ca2fa20f46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_QR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a341b1b221aec81be28332b87523d131b</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_OPCODE</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ab7235624b8f3e51d7c9d16c7851408a9</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_AA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a1d02d86437fc672d8728075707fdb989</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_TC</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a729c94e16aee82df7113ef9ae152850c</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_RD</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a79416d9667448e1a544f30abb8dec9e8</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_RA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>ae8fb38aad7beed1ca780f559a6cc2dc5</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_Z</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a800356871631da55c47ba406eece35e0</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_RCODE</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>abaa6c7669b9d66693dd70e909675d979</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_QR</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a7a9a911d4b85bc87952616d5f6b1475c</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_OPCODE</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a0e69b7bc433f85cd02d4f6e8585a3113</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_AA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aaa53d31cff982c92490f73c1cefab764</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_TC</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a45a0d8e9bb43257ae202842475b20cfa</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_RD</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a77f7561409370156f2c6ac01e03c6e0b</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_RA</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a0841e2a16a1dc5e13e6f8709a7c84989</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_Z</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>a4809a52a0d335c2fb1137a5e4fa14e57</anchor>
      <arglist>(h, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNS_HEADER_SET_RCODE</name>
      <anchorfile>df/d90/DNS_8h.html</anchorfile>
      <anchor>aa39e8f83fc2a8d3d4fee492798e04b11</anchor>
      <arglist>(h, v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSAuthServer.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>df/def/DNSAuthServer_8cc</filename>
    <includes id="da/d6f/DNSAuthServer_8h" name="DNSAuthServer.h" local="yes" imported="no">DNSAuthServer.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>df/def/DNSAuthServer_8cc.html</anchorfile>
      <anchor>a39ed6b8494b281308d1f2f38f7e1a421</anchor>
      <arglist>(DNSAuthServer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSAuthServer.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>da/d6f/DNSAuthServer_8h</filename>
    <includes id="dc/db7/DNSServerBase_8h" name="DNSServerBase.h" local="yes" imported="no">DNSServerBase.h</includes>
    <includes id="da/dc0/DNSZoneConfig_8h" name="DNSZoneConfig.h" local="yes" imported="no">DNSZoneConfig.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <class kind="class">DNSAuthServer</class>
  </compound>
  <compound kind="file">
    <name>DNSCache.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>d5/d9f/DNSCache_8cc</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>DNSCache.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>dd/d72/DNSCache_8h</filename>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="yes" imported="no">DNSTools.h</includes>
    <class kind="class">INETDNS::DNSCache</class>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>DNSCachingServer.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>d8/df2/DNSCachingServer_8cc</filename>
    <includes id="d6/d1d/DNSCachingServer_8h" name="DNSCachingServer.h" local="yes" imported="no">DNSCachingServer.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d8/df2/DNSCachingServer_8cc.html</anchorfile>
      <anchor>a30d4025850e11281a23840798d72aae9</anchor>
      <arglist>(DNSCachingServer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSCachingServer.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>d6/d1d/DNSCachingServer_8h</filename>
    <includes id="dc/db7/DNSServerBase_8h" name="DNSServerBase.h" local="yes" imported="no">DNSServerBase.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="yes" imported="no">DNSTTLCache.h</includes>
    <includes id="d3/db7/DNSSimpleCache_8h" name="DNSSimpleCache.h" local="yes" imported="no">DNSSimpleCache.h</includes>
    <class kind="class">DNSCachingServer</class>
  </compound>
  <compound kind="file">
    <name>DNSClient.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>df/d43/DNSClient_8cc</filename>
    <includes id="d8/dd8/DNSClient_8h" name="DNSClient.h" local="yes" imported="no">DNSClient.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>df/d43/DNSClient_8cc.html</anchorfile>
      <anchor>a06623ad7f979494f3e48d4db3d1dcd75</anchor>
      <arglist>(DNSClient)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSClient.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>d8/dd8/DNSClient_8h</filename>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="yes" imported="no">DNSTools.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d3/db7/DNSSimpleCache_8h" name="DNSSimpleCache.h" local="yes" imported="no">DNSSimpleCache.h</includes>
    <class kind="class">DNSClient</class>
  </compound>
  <compound kind="file">
    <name>DNSClientTraffGen.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>d0/df9/DNSClientTraffGen_8cc</filename>
    <includes id="db/dc5/DNSClientTraffGen_8h" name="DNSClientTraffGen.h" local="no" imported="no">DNSClientTraffGen.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d0/df9/DNSClientTraffGen_8cc.html</anchorfile>
      <anchor>a5ef0fc1a63f7c6a03def2ce6c82aa04a</anchor>
      <arglist>(DNSClientTraffGen)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSClientTraffGen.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>db/dc5/DNSClientTraffGen_8h</filename>
    <includes id="d8/dd8/DNSClient_8h" name="DNSClient.h" local="no" imported="no">DNSClient.h</includes>
    <class kind="class">DNSClientTraffGen</class>
  </compound>
  <compound kind="file">
    <name>DNSEchoServer.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>d0/d64/DNSEchoServer_8cc</filename>
    <includes id="d5/db6/DNSEchoServer_8h" name="DNSEchoServer.h" local="yes" imported="no">DNSEchoServer.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d0/d64/DNSEchoServer_8cc.html</anchorfile>
      <anchor>a211c0c4e4810c6bf45e504c978e1acb8</anchor>
      <arglist>(DNSEchoServer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSEchoServer.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>d5/db6/DNSEchoServer_8h</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="yes" imported="no">DNSTools.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <class kind="class">DNSEchoServer</class>
  </compound>
  <compound kind="file">
    <name>DNSPacket_m.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/messages/</path>
    <filename>de/d08/DNSPacket__m_8h</filename>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">../common/DNS.h</includes>
    <class kind="class">DNSPacket</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::DNSQuestion</type>
      <name>DNSQuestion</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>a7d42201c947df734a06dc619b5f7a537</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::DNSRecord</type>
      <name>DNSRecord</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>a4d66b080af24ba41d18faa00f84bc87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>ac1cda762091fc699694687663984c331</anchor>
      <arglist>(cCommBuffer *b, DNSPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>de/d08/DNSPacket__m_8h.html</anchorfile>
      <anchor>a234bd1965526082d499d0619e17749d5</anchor>
      <arglist>(cCommBuffer *b, DNSPacket &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSServerBase.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>d7/da9/DNSServerBase_8cc</filename>
    <includes id="dc/db7/DNSServerBase_8h" name="DNSServerBase.h" local="yes" imported="no">DNSServerBase.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d7/da9/DNSServerBase_8cc.html</anchorfile>
      <anchor>aa9b77013eaf39f86140d9d4510e42dbe</anchor>
      <arglist>(DNSServerBase)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSServerBase.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/dns/</path>
    <filename>dc/db7/DNSServerBase_8h</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="yes" imported="no">DNSTools.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">DNS.h</includes>
    <class kind="struct">INETDNS::CachedQuery</class>
    <class kind="class">DNSServerBase</class>
    <namespace>INETDNS</namespace>
    <member kind="typedef">
      <type>struct INETDNS::CachedQuery</type>
      <name>cached_query</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a7db29282c1d8f1b7030f9914eb931368</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSSimpleCache.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>d3/d19/DNSSimpleCache_8cc</filename>
    <includes id="d3/db7/DNSSimpleCache_8h" name="DNSSimpleCache.h" local="no" imported="no">DNSSimpleCache.h</includes>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>DNSSimpleCache.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>d3/db7/DNSSimpleCache_8h</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d9/ded/Utils_8h" name="Utils.h" local="yes" imported="no">utils/Utils.h</includes>
    <class kind="class">INETDNS::DNSSimpleCache</class>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>DNSTools.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/utils/</path>
    <filename>d6/d90/DNSTools_8cc</filename>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <namespace>INETDNS</namespace>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a396dfbaab84ed23df012c68752a3d927</anchor>
      <arglist>(std::string msg_name, std::string name, unsigned short dnsclass, unsigned short type, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createNQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>abb292c753ff4e64971e3e7cee51ead66</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Query &gt;</type>
      <name>resolveQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>acae9b7f5bf011212bad4d8b298d0870e</anchor>
      <arglist>(cPacket *query)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>afdcec0fd8f3ca5837495e5f2fb0735f1</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short opcode, unsigned short AA, unsigned short rd, unsigned short ra, unsigned short rcode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a007b64b9d3072035f7cec024582d40a3</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSQuestion &gt; q, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAnswer</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>af550670c19137f9b7fdae7bd281e3610</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAuthority</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a598eb5048372fc1da6d1a34fde78ee2f</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAdditional</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>add860b7e4107e5c2620320ed4b64c011</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Response &gt;</type>
      <name>resolveResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a4693874ccebfd664d6a350c0df67ab6f</anchor>
      <arglist>(cPacket *response)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isDNSpacket</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3473496cbc669d4daf644e7f1371efe4</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQueryOrResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a9361c8f287399f9aeb90bd02b5428e3b</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeStringForValue</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3a0e990cd5d324e3b12455734b7a272d</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeValueForString</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a98242bda4c87eae07bce0ed67d7a15aa</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassStringForValue</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ab2b2a3c35b06bc02f2891e68082cfec1</anchor>
      <arglist>(int _class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a6059f4c9936c4b50245de536d8dbc6ee</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a4816047c1655c25f98aff41a3043ce8d</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dnsPacketToString</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3e50b42e1611e4746b6305407603222b</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tokenizeAndGetSize</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a048d1d4f48e158eb816f6aa2cf31a411</anchor>
      <arglist>(std::string s, std::unordered_map&lt; std::string, bool &gt; *ncm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>estimateDnsPacketSize</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ac9ec70019bb30a7d048265134adf542e</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa6e77d8e91f827013fc27d80590094a6</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>acc6dc92c049a26c6f568909ff2c8f2c4</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aacc949cac360ac408830eefc0c7c25c4</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>afef4a3cb7d7646aedfea709247c2fd54</anchor>
      <arglist>(DNSRecord *r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a63abc6faa5bab6a4c9bb21cfbd7c1787</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>af08370d111f8853bb627704239100c0c</anchor>
      <arglist>(DNSQuestion *q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordDataEqual</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa3af98a7825d362038c9cad07eeddb51</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordEqualNoData</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a010660bcb277815b2dc0aed40b040fbb</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>getTypeArray</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3e2cfe6651104ce8a0aae993b47dfaf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>DNS_TYPE_ARRAY_ANY</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a70d2ad1a8d38d7aff6342ef76bd9e629</anchor>
      <arglist>[13]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSTools.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/utils/</path>
    <filename>d9/dd7/DNSTools_8h</filename>
    <includes id="de/d08/DNSPacket__m_8h" name="DNSPacket_m.h" local="yes" imported="no">../messages/DNSPacket_m.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="yes" imported="no">../common/DNS.h</includes>
    <namespace>INETDNS</namespace>
    <member kind="define">
      <type>#define</type>
      <name>E_NOT_A_DNSPACKET</name>
      <anchorfile>d9/dd7/DNSTools_8h.html</anchorfile>
      <anchor>ab4e85b76fdf5416a49dc0477e37ffc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_BAD_INDEX</name>
      <anchorfile>d9/dd7/DNSTools_8h.html</anchorfile>
      <anchor>a8ceaa75e3e14692cc7356431174d8adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_WRONG_QR</name>
      <anchorfile>d9/dd7/DNSTools_8h.html</anchorfile>
      <anchor>a8fcd23018b0de0fb3a7ef4626348b001</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a396dfbaab84ed23df012c68752a3d927</anchor>
      <arglist>(std::string msg_name, std::string name, unsigned short dnsclass, unsigned short type, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createNQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>abb292c753ff4e64971e3e7cee51ead66</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Query &gt;</type>
      <name>resolveQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>acae9b7f5bf011212bad4d8b298d0870e</anchor>
      <arglist>(cPacket *query)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>afdcec0fd8f3ca5837495e5f2fb0735f1</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short opcode, unsigned short AA, unsigned short rd, unsigned short ra, unsigned short rcode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a007b64b9d3072035f7cec024582d40a3</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSQuestion &gt; q, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAnswer</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>af550670c19137f9b7fdae7bd281e3610</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAuthority</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a598eb5048372fc1da6d1a34fde78ee2f</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAdditional</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>add860b7e4107e5c2620320ed4b64c011</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Response &gt;</type>
      <name>resolveResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a4693874ccebfd664d6a350c0df67ab6f</anchor>
      <arglist>(cPacket *response)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isDNSpacket</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3473496cbc669d4daf644e7f1371efe4</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQueryOrResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a9361c8f287399f9aeb90bd02b5428e3b</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>getTypeArray</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3e2cfe6651104ce8a0aae993b47dfaf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeStringForValue</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3a0e990cd5d324e3b12455734b7a272d</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeValueForString</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a98242bda4c87eae07bce0ed67d7a15aa</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassStringForValue</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ab2b2a3c35b06bc02f2891e68082cfec1</anchor>
      <arglist>(int _class)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dnsPacketToString</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3e50b42e1611e4746b6305407603222b</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>estimateDnsPacketSize</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ac9ec70019bb30a7d048265134adf542e</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a6059f4c9936c4b50245de536d8dbc6ee</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a4816047c1655c25f98aff41a3043ce8d</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa6e77d8e91f827013fc27d80590094a6</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>acc6dc92c049a26c6f568909ff2c8f2c4</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aacc949cac360ac408830eefc0c7c25c4</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>afef4a3cb7d7646aedfea709247c2fd54</anchor>
      <arglist>(DNSRecord *r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a63abc6faa5bab6a4c9bb21cfbd7c1787</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>af08370d111f8853bb627704239100c0c</anchor>
      <arglist>(DNSQuestion *q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordDataEqual</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa3af98a7825d362038c9cad07eeddb51</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordEqualNoData</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a010660bcb277815b2dc0aed40b040fbb</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSTTLCache.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>d6/d67/DNSTTLCache_8cc</filename>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>DNSTTLCache.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>da/d34/DNSTTLCache_8h</filename>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="yes" imported="no">DNSCache.h</includes>
    <includes id="d9/ded/Utils_8h" name="Utils.h" local="yes" imported="no">utils/Utils.h</includes>
    <class kind="struct">INETDNS::DNSTimeRecord</class>
    <class kind="class">INETDNS::DNSTimeRecordComparator</class>
    <class kind="class">INETDNS::DNSTTLCache</class>
    <namespace>INETDNS</namespace>
    <member kind="typedef">
      <type>struct INETDNS::DNSTimeRecord</type>
      <name>dns_time_record</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>abefe782e12afe55e2e1fb547c1cfa8c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DNSZoneConfig.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/utils/</path>
    <filename>df/d7e/DNSZoneConfig_8cc</filename>
    <includes id="da/dc0/DNSZoneConfig_8h" name="DNSZoneConfig.h" local="no" imported="no">DNSZoneConfig.h</includes>
  </compound>
  <compound kind="file">
    <name>DNSZoneConfig.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/utils/</path>
    <filename>da/dc0/DNSZoneConfig_8h</filename>
    <includes id="d9/ded/Utils_8h" name="Utils.h" local="yes" imported="no">utils/Utils.h</includes>
    <class kind="struct">soa</class>
    <class kind="struct">zone_entry</class>
    <class kind="class">DNSZoneConfig</class>
    <member kind="typedef">
      <type>struct soa</type>
      <name>soa</name>
      <anchorfile>da/dc0/DNSZoneConfig_8h.html</anchorfile>
      <anchor>a5f58c2124cea979cbfc24f13a2b5e2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct zone_entry</type>
      <name>zone_entry</name>
      <anchorfile>da/dc0/DNSZoneConfig_8h.html</anchorfile>
      <anchor>a8ed5dff8f372992d93e48434d7b5e856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>states</name>
      <anchorfile>da/dc0/DNSZoneConfig_8h.html</anchorfile>
      <anchor>aa19be6305a5a4485e1e70de70ed7d677</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericTraffGen.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/traffic/</path>
    <filename>d0/d8d/GenericTraffGen_8cc</filename>
    <includes id="d3/d55/GenericTraffGen_8h" name="GenericTraffGen.h" local="yes" imported="no">GenericTraffGen.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d0/d8d/GenericTraffGen_8cc.html</anchorfile>
      <anchor>ae37ad996013f1bef42948474dca097e0</anchor>
      <arglist>(GenericTraffGen)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericTraffGen.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/traffic/</path>
    <filename>d3/d55/GenericTraffGen_8h</filename>
    <class kind="class">GenericTraffGen</class>
  </compound>
  <compound kind="file">
    <name>MDNS.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>d9/d94/MDNS_8cc</filename>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="yes" imported="no">MDNS.h</includes>
    <namespace>INETDNS</namespace>
    <member kind="function">
      <type>int</type>
      <name>isProbe</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a2adb64e0f940710b8e722c0d2837d2a2</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isAnnouncement</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a7ae9eee3d4171e087f226d0e5337bb3c</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a42b3c33b175ac178203531cb6a8d0e50</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa98ddb5ae26cb4a82b37f92ce302b8ce</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isGoodbye</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a36bdae0fc0ec948ad93d08244ce29b16</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; MDNSKey &gt;</type>
      <name>mdns_key_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a058dcb4eed5c86ebed041eca2530335b</anchor>
      <arglist>(std::string name, int type, int _class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mdns_key_free</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a528113814a3a7fe4ee292867f11218e4</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKey</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ae2f3e2460bf4b27ec320f4416c10f136</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key1, std::shared_ptr&lt; INETDNS::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKeyANY</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a48737701ab9f97252d64ec8614d07c50</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key1, std::shared_ptr&lt; INETDNS::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::DNSQuestion &gt;</type>
      <name>createQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3d31bc3adb5d189a2656f203ad0ce925</anchor>
      <arglist>(std::string name, unsigned short type, unsigned short _class)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::DNSQuestion &gt;</type>
      <name>createQuestionFromKey</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a788edc4ad1aa036eb39e6e491d5af8e5</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNS.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>dd/d86/MDNS_8h</filename>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="de/d08/DNSPacket__m_8h" name="DNSPacket_m.h" local="yes" imported="no">DNSPacket_m.h</includes>
    <class kind="struct">INETDNS::MDNSService</class>
    <class kind="struct">INETDNS::MDNSKey</class>
    <namespace>INETDNS</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAX_MDNS_PACKET_SIZE</name>
      <anchorfile>dd/d86/MDNS_8h.html</anchorfile>
      <anchor>a6d65d64a08c423abd8297df4f6de27fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_PORT</name>
      <anchorfile>dd/d86/MDNS_8h.html</anchorfile>
      <anchor>ab16900c77e60e00f401b684c45a37c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_HOST_TTL</name>
      <anchorfile>dd/d86/MDNS_8h.html</anchorfile>
      <anchor>a18a54581bbbf4f6475b42184e7d7ac3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_SERVICE_TTL</name>
      <anchorfile>dd/d86/MDNS_8h.html</anchorfile>
      <anchor>ade351b9eabfaf64716c408f30d4e10cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::MDNSService</type>
      <name>mdns_service</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ac0108268e00e05106db7fb71edc63c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::MDNSKey</type>
      <name>mdns_key</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ae85f52eebd20a635cb4cd7e25657f72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isProbe</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a2adb64e0f940710b8e722c0d2837d2a2</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isAnnouncement</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a7ae9eee3d4171e087f226d0e5337bb3c</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a42b3c33b175ac178203531cb6a8d0e50</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa98ddb5ae26cb4a82b37f92ce302b8ce</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isGoodbye</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a36bdae0fc0ec948ad93d08244ce29b16</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKey</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ae2f3e2460bf4b27ec320f4416c10f136</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key1, std::shared_ptr&lt; INETDNS::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKeyANY</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a48737701ab9f97252d64ec8614d07c50</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key1, std::shared_ptr&lt; INETDNS::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; MDNSKey &gt;</type>
      <name>mdns_key_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a058dcb4eed5c86ebed041eca2530335b</anchor>
      <arglist>(std::string name, int type, int _class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mdns_key_free</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a528113814a3a7fe4ee292867f11218e4</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::DNSQuestion &gt;</type>
      <name>createQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3d31bc3adb5d189a2656f203ad0ce925</anchor>
      <arglist>(std::string name, unsigned short type, unsigned short _class)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>createQuestionFromKey</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa788d1436e84bbdaff6f36063d249c11</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNS_Privacy.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>d8/dc7/MDNS__Privacy_8cc</filename>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <namespace>INETDNS</namespace>
    <member kind="function">
      <type>std::regex</type>
      <name>privacy_type_expr</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a23f87df3adaea3049174f4a1547c43d5</anchor>
      <arglist>(&quot;(.*)(_.+\\._.+\\.local)&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>extract_stype</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa67588160d67afc493b08b42d38c24c7</anchor>
      <arglist>(std::string label)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt;</type>
      <name>private_service_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ad0605005d258decb586bbe32d1248da9</anchor>
      <arglist>(std::string service_type, int is_private)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::PairingData &gt;</type>
      <name>pairing_data_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a0ce23ed11b0565e8b0a9a4b45e81f4e9</anchor>
      <arglist>(std::string crypto_key, std::string friend_id, std::string privacy_instance_name)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::FriendData &gt;</type>
      <name>friend_data_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a953020d99272e61b9d7b71259cb08ab4</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::PairingData &gt; pdata, int port)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNS_Privacy.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>de/dcf/MDNS__Privacy_8h</filename>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <class kind="struct">INETDNS::PrivateMDNSService</class>
    <class kind="struct">INETDNS::PairingData</class>
    <class kind="struct">INETDNS::FriendData</class>
    <namespace>INETDNS</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_PRIVACY_SOCKET_PORT</name>
      <anchorfile>de/dcf/MDNS__Privacy_8h.html</anchorfile>
      <anchor>adb874e39a9308cc955bb2b3df46fa281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::PrivateMDNSService</type>
      <name>private_mdns_service</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aab3b854e909d441056eb5626d51bce11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::PairingData</type>
      <name>pairing_data</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a4caf1598a061caa7623f766ebc6b4ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::FriendData</type>
      <name>friend_data</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a45d13189bf54fd4f0685f975edca0042</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>extract_stype</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa67588160d67afc493b08b42d38c24c7</anchor>
      <arglist>(std::string label)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt;</type>
      <name>private_service_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ad0605005d258decb586bbe32d1248da9</anchor>
      <arglist>(std::string service_type, int is_private)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::PairingData &gt;</type>
      <name>pairing_data_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a0ce23ed11b0565e8b0a9a4b45e81f4e9</anchor>
      <arglist>(std::string crypto_key, std::string friend_id, std::string privacy_instance_name)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; FriendData &gt;</type>
      <name>friend_data_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a906e6adf8db3f18f5a45a922d200cdf6</anchor>
      <arglist>(std::shared_ptr&lt; PairingData &gt; pdata, int port)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSAnnouncer.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>da/dcb/MDNSAnnouncer_8cc</filename>
    <includes id="d5/dd0/MDNSAnnouncer_8h" name="MDNSAnnouncer.h" local="no" imported="no">MDNSAnnouncer.h</includes>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>MDNSAnnouncer.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>d5/dd0/MDNSAnnouncer_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="dc/d80/MDNSResponseScheduler_8h" name="MDNSResponseScheduler.h" local="no" imported="no">MDNSResponseScheduler.h</includes>
    <includes id="d9/daa/MDNSProbeScheduler_8h" name="MDNSProbeScheduler.h" local="no" imported="no">MDNSProbeScheduler.h</includes>
    <class kind="struct">INETDNS::Probe</class>
    <class kind="class">INETDNS::MDNSAnnouncer</class>
    <namespace>INETDNS</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_PROBE_TIMEOUT</name>
      <anchorfile>d5/dd0/MDNSAnnouncer_8h.html</anchorfile>
      <anchor>ae4523fc3c8e1c464748a700a5f01948d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProbeState</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3a61cbbde60e6820b0e2e8781f02062a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AnnouncerState</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a321531f534bd6ad49adca7675fcd6084</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSNetworkConfigurator.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/generation/</path>
    <filename>d9/dd7/MDNSNetworkConfigurator_8cc</filename>
    <includes id="d9/def/MDNSNetworkConfigurator_8h" name="MDNSNetworkConfigurator.h" local="no" imported="no">MDNSNetworkConfigurator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>T</name>
      <anchorfile>d9/dd7/MDNSNetworkConfigurator_8cc.html</anchorfile>
      <anchor>ab89b0d22278f3de2142bf366d6564949</anchor>
      <arglist>(CODE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>d9/dd7/MDNSNetworkConfigurator_8cc.html</anchorfile>
      <anchor>a3ac26d965d028c98a88b53beb8e69369</anchor>
      <arglist>(MDNSNetworkConfigurator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSNetworkConfigurator.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/generation/</path>
    <filename>d9/def/MDNSNetworkConfigurator_8h</filename>
    <includes id="db/d75/MDNSResolver_8h" name="MDNSResolver.h" local="no" imported="no">MDNSResolver.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <class kind="class">MDNSNetworkConfigurator</class>
    <class kind="struct">MDNSNetworkConfigurator::GeneratorService</class>
  </compound>
  <compound kind="file">
    <name>MDNSProbeScheduler.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>da/d57/MDNSProbeScheduler_8cc</filename>
    <includes id="d9/daa/MDNSProbeScheduler_8h" name="MDNSProbeScheduler.h" local="no" imported="no">mdns/MDNSProbeScheduler.h</includes>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>MDNSProbeScheduler.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>d9/daa/MDNSProbeScheduler_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <includes id="d5/dda/SignalReceiver_8h" name="SignalReceiver.h" local="no" imported="no">SignalReceiver.h</includes>
    <class kind="struct">INETDNS::MDNSProbeJob</class>
    <class kind="class">INETDNS::MDNSProbeScheduler</class>
    <namespace>INETDNS</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_PROBE_WAIT</name>
      <anchorfile>d9/daa/MDNSProbeScheduler_8h.html</anchorfile>
      <anchor>a03d9e6c38db0474001404bffb910b65a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::MDNSProbeJob</type>
      <name>probe_job</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a6db591d6a363bee0a67ee63d876cb216</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSQueryScheduler.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>d6/d05/MDNSQueryScheduler_8cc</filename>
    <includes id="d4/d17/MDNSQueryScheduler_8h" name="MDNSQueryScheduler.h" local="no" imported="no">mdns/MDNSQueryScheduler.h</includes>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>MDNSQueryScheduler.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>d4/d17/MDNSQueryScheduler_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <includes id="d5/dda/SignalReceiver_8h" name="SignalReceiver.h" local="no" imported="no">SignalReceiver.h</includes>
    <class kind="struct">INETDNS::MDNSQueryJob</class>
    <class kind="class">INETDNS::MDNSQueryScheduler</class>
    <namespace>INETDNS</namespace>
    <member kind="typedef">
      <type>struct INETDNS::MDNSQueryJob</type>
      <name>query_job</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a42f02fb85b8778955552c73f6307869b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSResolver.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/mdns/</path>
    <filename>df/d13/MDNSResolver_8cc</filename>
    <includes id="db/d75/MDNSResolver_8h" name="MDNSResolver.h" local="yes" imported="no">MDNSResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>df/d13/MDNSResolver_8cc.html</anchorfile>
      <anchor>a322f4ce50505a6f1cc2042570c2cf5f8</anchor>
      <arglist>(MDNSResolver)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSResolver.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/mdns/</path>
    <filename>db/d75/MDNSResolver_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="d9/daa/MDNSProbeScheduler_8h" name="MDNSProbeScheduler.h" local="no" imported="no">MDNSProbeScheduler.h</includes>
    <includes id="dc/d80/MDNSResponseScheduler_8h" name="MDNSResponseScheduler.h" local="no" imported="no">MDNSResponseScheduler.h</includes>
    <includes id="d4/d17/MDNSQueryScheduler_8h" name="MDNSQueryScheduler.h" local="no" imported="no">MDNSQueryScheduler.h</includes>
    <includes id="d5/dd0/MDNSAnnouncer_8h" name="MDNSAnnouncer.h" local="no" imported="no">MDNSAnnouncer.h</includes>
    <includes id="d3/d91/MDNSTrafficGenerator_8h" name="MDNSTrafficGenerator.h" local="no" imported="no">MDNSTrafficGenerator.h</includes>
    <includes id="d5/dda/SignalReceiver_8h" name="SignalReceiver.h" local="no" imported="no">SignalReceiver.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <class kind="class">MDNSResolver</class>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_TIMER</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>ad6d1511dd655ce451daf068d64053c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_EXTERNAL</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>ab1db506145b2fc3e707023c658a0c4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_INTERNAL_QUERY</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>af9d1c2b8c20ce2368a809e841e78db8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_INTERNAL_PUBLISH</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>a71ef27062ee2501ca370c8376fea8862</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_KIND_INTERNAL_REVOKE</name>
      <anchorfile>db/d75/MDNSResolver_8h.html</anchorfile>
      <anchor>ac5f7cea8081cabdd1313df53b273bf75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSResponseScheduler.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>d9/d65/MDNSResponseScheduler_8cc</filename>
    <includes id="dc/d80/MDNSResponseScheduler_8h" name="MDNSResponseScheduler.h" local="no" imported="no">MDNSResponseScheduler.h</includes>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>MDNSResponseScheduler.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>dc/d80/MDNSResponseScheduler_8h</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="dd/d72/DNSCache_8h" name="DNSCache.h" local="no" imported="no">DNSCache.h</includes>
    <includes id="d3/db7/DNSSimpleCache_8h" name="DNSSimpleCache.h" local="no" imported="no">DNSSimpleCache.h</includes>
    <includes id="da/d34/DNSTTLCache_8h" name="DNSTTLCache.h" local="no" imported="no">DNSTTLCache.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <includes id="d5/dda/SignalReceiver_8h" name="SignalReceiver.h" local="no" imported="no">SignalReceiver.h</includes>
    <class kind="struct">INETDNS::MDNSResponseJob</class>
    <class kind="class">INETDNS::MDNSResponseScheduler</class>
    <namespace>INETDNS</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_RESPONSE_ON_PROBE</name>
      <anchorfile>dc/d80/MDNSResponseScheduler_8h.html</anchorfile>
      <anchor>afb872597c4fd8651a36a56b0313c6a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MDNS_RESPONSE_WAIT</name>
      <anchorfile>dc/d80/MDNSResponseScheduler_8h.html</anchorfile>
      <anchor>a48bcb863bfd07ee886ef2a8bf1d4a002</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::MDNSResponseJob</type>
      <name>mdns_response_job</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a27348ae33bf2c2448126d2917726e6ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MDNSTrafficGenerator.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/traffic/</path>
    <filename>df/d86/MDNSTrafficGenerator_8cc</filename>
    <includes id="d3/d91/MDNSTrafficGenerator_8h" name="MDNSTrafficGenerator.h" local="no" imported="no">MDNSTrafficGenerator.h</includes>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>MDNSTrafficGenerator.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/applications/traffic/</path>
    <filename>d3/d91/MDNSTrafficGenerator_8h</filename>
    <includes id="df/d90/DNS_8h" name="DNS.h" local="no" imported="no">DNS.h</includes>
    <includes id="d9/dd7/DNSTools_8h" name="DNSTools.h" local="no" imported="no">DNSTools.h</includes>
    <includes id="dd/d86/MDNS_8h" name="MDNS.h" local="no" imported="no">MDNS.h</includes>
    <includes id="de/dcf/MDNS__Privacy_8h" name="MDNS_Privacy.h" local="no" imported="no">MDNS_Privacy.h</includes>
    <includes id="d9/daa/MDNSProbeScheduler_8h" name="MDNSProbeScheduler.h" local="no" imported="no">MDNSProbeScheduler.h</includes>
    <includes id="d4/d17/MDNSQueryScheduler_8h" name="MDNSQueryScheduler.h" local="no" imported="no">MDNSQueryScheduler.h</includes>
    <includes id="dc/d80/MDNSResponseScheduler_8h" name="MDNSResponseScheduler.h" local="no" imported="no">MDNSResponseScheduler.h</includes>
    <class kind="class">INETDNS::MDNSTrafficGenerator</class>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/</path>
    <filename>da/ddd/README_8md</filename>
  </compound>
  <compound kind="file">
    <name>SignalReceiver.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>d8/d01/SignalReceiver_8cc</filename>
    <includes id="d5/dda/SignalReceiver_8h" name="SignalReceiver.h" local="no" imported="no">SignalReceiver.h</includes>
  </compound>
  <compound kind="file">
    <name>SignalReceiver.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/</path>
    <filename>d5/dda/SignalReceiver_8h</filename>
    <class kind="class">SignalReceiver</class>
  </compound>
  <compound kind="file">
    <name>TimeEventSet.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>db/dcf/TimeEventSet_8cc</filename>
    <includes id="dd/d68/TimeEventSet_8h" name="TimeEventSet.h" local="no" imported="no">TimeEventSet.h</includes>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>TimeEventSet.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/common/mdns/</path>
    <filename>dd/d68/TimeEventSet_8h</filename>
    <class kind="class">INETDNS::TimeEventSetObserver</class>
    <class kind="class">INETDNS::TimeEvent</class>
    <class kind="class">INETDNS::TimeEventComparator</class>
    <class kind="class">INETDNS::TimeEventSet</class>
    <namespace>INETDNS</namespace>
  </compound>
  <compound kind="file">
    <name>Utils.cc</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/utils/</path>
    <filename>d3/dd8/Utils_8cc</filename>
    <includes id="d9/ded/Utils_8h" name="Utils.h" local="yes" imported="no">utils/Utils.h</includes>
    <namespace>INETDNS</namespace>
    <member kind="function">
      <type>int</type>
      <name>stdstr_has_suffix</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a041b8d30f03953c0e5893e43b1d8a958</anchor>
      <arglist>(std::string base, std::string suffix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Utils.h</name>
    <path>/home/saen/Disy/sources/inet_dns_extension/src/utils/</path>
    <filename>d9/ded/Utils_8h</filename>
    <namespace>INETDNS</namespace>
    <member kind="function">
      <type>int</type>
      <name>stdstr_has_suffix</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a041b8d30f03953c0e5893e43b1d8a958</anchor>
      <arglist>(std::string base, std::string suffix)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::CachedQuery</name>
    <filename>dc/d8e/structINETDNS_1_1CachedQuery.html</filename>
    <member kind="function">
      <type></type>
      <name>CachedQuery</name>
      <anchorfile>dc/d8e/structINETDNS_1_1CachedQuery.html</anchorfile>
      <anchor>ac457be858c69f1da398e998f4fa33d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>internal_id</name>
      <anchorfile>dc/d8e/structINETDNS_1_1CachedQuery.html</anchorfile>
      <anchor>a85e4fa46eaf2599bc80a03ef6377b431</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; INETDNS::Query &gt;</type>
      <name>query</name>
      <anchorfile>dc/d8e/structINETDNS_1_1CachedQuery.html</anchorfile>
      <anchor>add06623f6f476cc2716f2e7b19b0bf9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSAuthServer</name>
    <filename>d6/d41/classDNSAuthServer.html</filename>
    <base>DNSServerBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a5bcf90776f0b7955d3a74e8fbc8b0248</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a4fc546452c77057174615e4b3dd507e6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>appendAuthority</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a20fcf7b84c1a1b151d7818ccdcd5e916</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; ns_list, int *ns_records)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>appendAdditionals</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a298b99aab9bea411b89e826f48637669</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; ns_list, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; ar_list, int *ns_records)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>appendEntries</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a5a4c9d41973d7ad72e245447da2b940b</anchor>
      <arglist>(std::string hash, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; dstlist, int type, int *num_records)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>appendTransitiveEntries</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a9c35a6c54b3daa3b3e69801ef485763e</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; srclist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; dstlist, const char *DNS_TYPE_STR, int DNS_TYPE_VALUE, int *ar_records)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>handleQuery</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a9135e3d543228990a6bad31f9cd77b35</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::Query &gt; query)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>master_file</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a479f1ccb0940f9862a3b321b95e09eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DNSZoneConfig *</type>
      <name>config</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a2a90fbb140d749f5bcbaca88234f0a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>recursion_available</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a7cb37774c9512ded8acdf7afaeb6820d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>response_count</name>
      <anchorfile>d6/d41/classDNSAuthServer.html</anchorfile>
      <anchor>a356592310091c2cadb1b10786ee8e592</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::DNSCache</name>
    <filename>d1/d57/classINETDNS_1_1DNSCache.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSCache</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>ac4151ea39f6fd746bad28ca90dd7dd25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSCache</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>af66c904dee4d4bb1e7b135cf786b5ff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>put_into_cache</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>ab318013940d633c74f24610045745f12</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>get_from_cache</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a464f7e90acd554119315da883a5bb93d</anchor>
      <arglist>(std::string hash)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a2b9171be9ef15e7bc2c1538082bc14c9</anchor>
      <arglist>(std::string hash)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; INETDNS::DNSRecord &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>aa8b3041092f67b0151e0fcfc87b4b5da</anchor>
      <arglist>(std::string hash, std::shared_ptr&lt; INETDNS::DNSRecord &gt; r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_in_cache</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a26c186ee6cc917f867117cf5c66cbf0c</anchor>
      <arglist>(std::string hash)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>evict</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>acde2348928d487caf90084642191f5e1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>get_matching_hashes</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a659ff435b415dceb1d894bfaf7ccb12c</anchor>
      <arglist>(std::string hash)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxRecords</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a60c37493b397fc2ece255fcbcf606370</anchor>
      <arglist>(int _max_records)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxRecords</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a6ccf6f9c4359fd3e68fd249073c3b13a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheSize</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a8509b9827306dac7fc4d3588e59a4986</anchor>
      <arglist>(int cs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCacheSize</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a83852af9a2b3843a9d4fc08ef32d6204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_records</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a7c4b3c66f67fe4d1a852cb77034490d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>current_cache_size</name>
      <anchorfile>d1/d57/classINETDNS_1_1DNSCache.html</anchorfile>
      <anchor>a9fe343c3298f2dcf49362963ccf589ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSCachingServer</name>
    <filename>d1/d16/classDNSCachingServer.html</filename>
    <base>DNSServerBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d1/d16/classDNSCachingServer.html</anchorfile>
      <anchor>a18d6294f4a0dce8038b44600cf054703</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d1/d16/classDNSCachingServer.html</anchorfile>
      <anchor>a294ddab9eb094a0c97154ddc4fefb621</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>handleQuery</name>
      <anchorfile>d1/d16/classDNSCachingServer.html</anchorfile>
      <anchor>ae5ad330c8a4a71d239bb8b1983ae1c84</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::Query &gt; query)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>recursion_available</name>
      <anchorfile>d1/d16/classDNSCachingServer.html</anchorfile>
      <anchor>a1934284888c70290da238cb7378798e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>response_count</name>
      <anchorfile>d1/d16/classDNSCachingServer.html</anchorfile>
      <anchor>a66ebc28dc0ba5d61985dc3f5509449d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSClient</name>
    <filename>d1/de5/classDNSClient.html</filename>
    <base>cSimpleModule</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a75897ddfee3cb2d23415a3e51fbd4e2f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a11eebe1c8cd56eaaf1f5b564c2b3147c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a95d324647f66e43e2e21c59480eb7c8a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPvXAddress *</type>
      <name>getAddressFromCache</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a4dae82b9c2886d9801f5bc4f36bcdc02</anchor>
      <arglist>(std::string dns_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>resolve</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a30d6b3c4fd232de2ba1d9ea0838b4905</anchor>
      <arglist>(std::string dns_name, int qtype, int primary, void(*callback)(int, void *), int id, void *handle)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>dns_servers</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a6ce1eb51e790a31947789e1c06364e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, DNSPacket * &gt;</type>
      <name>queries</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>ae332981074c1b6d1f07ebdb9cf46ddd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, void(*)(int, void *)&gt;</type>
      <name>callbacks</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a2c0e578b9157b68ec8bb667c750216c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, void * &gt;</type>
      <name>callback_handles</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a5aa538828ece2d7c468a76630ab703c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::DNSCache *</type>
      <name>cache</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a4a716b0fc419908377c0e796ec17deef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>query_count</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a3d7aefdce0e7062f356ad9ae40bb73cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>out</name>
      <anchorfile>d1/de5/classDNSClient.html</anchorfile>
      <anchor>a967e2a3921496825cb1b83fcc8e00aa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSClientTraffGen</name>
    <filename>d4/d96/classDNSClientTraffGen.html</filename>
    <base>DNSClient</base>
    <member kind="function">
      <type></type>
      <name>DNSClientTraffGen</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a1fe51fc126cff2e278c435da2f1005cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSClientTraffGen</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a236b88a5732ef1b63a1af787c4b20725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>qcount</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>adaac08f2a9daf04c0640dca52fa944fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>time_to_send</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>ab0bfa35763ead1e1fa118df243c4601d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a0732f2a1f3d77c7e0228d5ff8346ed1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>host_names</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>ac1d3e537fc6c382524f0818ac4a5782a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>types</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>acf75c57c4f560496347e015e9f396fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a1e4eb1837f5a7e8a50dacd3ebe315827</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a01a97b5534bc6e80afbb0c5f2a80e3ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>aef92212ffc9064e74abc739b581f3b77</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>ab046920382fb9e489b0d01cc121511f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>aeeaf682bb8e56ac5abc1095503347de9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleResponse</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a3b271250d1ddcd4fb05de6374f5c2e0c</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_hostnames</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>ad5cdf447b2a57d4fca5a9728ffbbb65b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>callback</name>
      <anchorfile>d4/d96/classDNSClientTraffGen.html</anchorfile>
      <anchor>a7155db4436d206ab7e31d8d0add77583</anchor>
      <arglist>(int id, void *this_pointer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSEchoServer</name>
    <filename>d7/ddb/classDNSEchoServer.html</filename>
    <base>cSimpleModule</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a1915c618bc9c756917acc598b1ca6418</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a4e0c0478b68d5cbddb4621c48fa36f34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>acb0d0f054f750951968f1c2eb287ba00</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>unsupportedOperation</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a33a42bdfdaa249cc7bde63a4f6ea783a</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::Query &gt; q)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendResponse</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a32ff65dde385a42b47630ab94ff3c9cb</anchor>
      <arglist>(DNSPacket *response, IPvXAddress returnAddress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>handleQuery</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a47a46a128602afbf6f0cb545d069aaf5</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::Query &gt; query)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nameserver</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>ab4eedfa55857a05f510f428cb141be66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nameserver_ip</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>ac6bff8834db69676bcf5224896f7700d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receivedQueries</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a5e7dd42d6db1aca58bf6493cc308082d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>response_count</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>a846805ca51fd9990418b5d0c24b30024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>out</name>
      <anchorfile>d7/ddb/classDNSEchoServer.html</anchorfile>
      <anchor>ae31e813d50c1becf30236c429531e312</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSPacket</name>
    <filename>da/d67/classDNSPacket.html</filename>
    <base>cPacket</base>
    <member kind="function">
      <type></type>
      <name>DNSPacket</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ad51995373fa84eba3aca65612cadff80</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DNSPacket</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a1d1600094c2b49a793cfa1f36ec95dd1</anchor>
      <arglist>(const DNSPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSPacket</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>abcdd3039414339446972ea6fec5fea3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ac8a0d21d72a59fed76c5ac2af3f88f0a</anchor>
      <arglist>(const DNSPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>dup</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a6d4b825e7216f338e758c55d464ea38d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a3e7bf0ec8f70bb483dc4dfacd2a8659a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a3528c6c6a3d98d977d5e3629f8c66248</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a9c4af725155148a02d4291d62211da86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a7ccc297a3a64f38c5dadf4a594a2502b</anchor>
      <arglist>(const char *displayString)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getId</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a8a3812f1a9749ba1627a5dc2f00d4fdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a105aeebe5adb5dfe27d9fa9c060f3dc9</anchor>
      <arglist>(unsigned short id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getOptions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a118852cf4d888d64fd8d3b59ec207d56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a989c9f5a06e8e770716b2a40788dbafb</anchor>
      <arglist>(unsigned short options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getQdcount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aaad51550c457f8da502121175a4fdb21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQdcount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a95d194f84c9081d64648976060ebdaef</anchor>
      <arglist>(unsigned short qdcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getAncount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a033b36c3aba5f8fa14001171ba23edd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAncount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ae62be1da71573b3c87da8228edfd4655</anchor>
      <arglist>(unsigned short ancount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getNscount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a3f5bf04bc99de15a818509fc0107f7f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNscount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aae11625a90c1b88e34bde4e4be2e58ec</anchor>
      <arglist>(unsigned short nscount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getArcount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a5d962139b6482b25b8c77a373b302c64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setArcount</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a156e5220345ba83b06a61feac4f51477</anchor>
      <arglist>(unsigned short arcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ac78513b61367b3e343d88215b4bcfe36</anchor>
      <arglist>(short size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNumQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a4c7953dbd44d1733cb917ea15edfbfed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSQuestion &amp;</type>
      <name>getQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a57633b190fd456a349d25d7cdb654619</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DNSQuestion &amp;</type>
      <name>getQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a7671e3394aa0da725f079530fdb51178</anchor>
      <arglist>(short k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQuestions</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>af0c1c2e867a8644cf81453f2323c77ad</anchor>
      <arglist>(short k, const DNSQuestion &amp;questions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a122dffdded75c81647b8036e46138853</anchor>
      <arglist>(short size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNumAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a500ab2071d3c36d26c8997f1ef8d98dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSRecord &amp;</type>
      <name>getAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ad5b16204308e27d397b2c131de42da83</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DNSRecord &amp;</type>
      <name>getAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a6d6cb8ed019bcde4d5fe6bba741231fd</anchor>
      <arglist>(short k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAnswers</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a0157636ed74f534fce4eed0b29c0c6cd</anchor>
      <arglist>(short k, const DNSRecord &amp;answers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>affcbc8c6c83fc64f0ad634498ff35fc7</anchor>
      <arglist>(short size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNumAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>abc35efffef6bacae63be377a011e33db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSRecord &amp;</type>
      <name>getAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a8c2bf2b575e41966bc0fbf3181b0e65d</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DNSRecord &amp;</type>
      <name>getAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aa3b7649446b805dd51cdbe342209b7fe</anchor>
      <arglist>(short k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthorities</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a06f9a63314a155f448cdc7492ca91783</anchor>
      <arglist>(short k, const DNSRecord &amp;authorities)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>abbf61dc89da9eb5a49b1591112d309d2</anchor>
      <arglist>(short size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNumAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aee95369755683454873682e81938a177</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSRecord &amp;</type>
      <name>getAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a11b935744f696f266f0ddfe9477fbadd</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DNSRecord &amp;</type>
      <name>getAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a949614f9e51aa5747897a5f2b8fdd5c8</anchor>
      <arglist>(short k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdditional</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a2db080b3396885ebe1f58706abbc5f92</anchor>
      <arglist>(short k, const DNSRecord &amp;additional)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a9aa3b41f4e29440c44597d88fb8b61c2</anchor>
      <arglist>(const DNSPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>displayString_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a3abc51d4b793fefd5858cb9234f51208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>id_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ada103072ce845a53cea74ef401e58da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>options_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a702f7b2ddc2bc2e985e79c797e861302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>qdcount_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a2a43b5ada162d3feadf1b5e071c08c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>ancount_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a749e8d1174cb0ed75dfb2e87a95f3910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>nscount_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a17036aa87fb4b0c868b5c23782e295fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>arcount_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a897ac097af39677bfb8efd87254abdde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSQuestion *</type>
      <name>questions_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>aef638c849cd1e0141dc73ec7fecdc243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>questions_arraysize</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a52d603efb926a57e830ecf7f805298c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSRecord *</type>
      <name>answers_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a5f66e7e399673188ed288d7fa870fa12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>answers_arraysize</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a8a36d1f14885ca46ecd4ac9b67f24906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSRecord *</type>
      <name>authorities_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>ad37ac4eed10930e117865d66df7311a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>authorities_arraysize</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a7633d32159e770a6e103e63ded58c027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSRecord *</type>
      <name>additional_var</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a94479d1f7c5b60cf54abbe03988a0e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>additional_arraysize</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a95156797943ba7ad16257102e7dd71d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>da/d67/classDNSPacket.html</anchorfile>
      <anchor>a5082b6431af326ade8f57bfef7c93005</anchor>
      <arglist>(const DNSPacket &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::DNSQuestion</name>
    <filename>d1/d51/structINETDNS_1_1DNSQuestion.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSQuestion</name>
      <anchorfile>d1/d51/structINETDNS_1_1DNSQuestion.html</anchorfile>
      <anchor>adbf9e1dd8f517072ac74718d200bfd34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DNSQuestion</name>
      <anchorfile>d1/d51/structINETDNS_1_1DNSQuestion.html</anchorfile>
      <anchor>a0ceef335661d387a7e58706c221d1811</anchor>
      <arglist>(std::string _qname, unsigned short _qtype, unsigned short _qclass)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>qname</name>
      <anchorfile>d1/d51/structINETDNS_1_1DNSQuestion.html</anchorfile>
      <anchor>a7576009237687fdb32f39d824156acb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>qtype</name>
      <anchorfile>d1/d51/structINETDNS_1_1DNSQuestion.html</anchorfile>
      <anchor>a716c14e14f99ac87e4756522e5395980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>qclass</name>
      <anchorfile>d1/d51/structINETDNS_1_1DNSQuestion.html</anchorfile>
      <anchor>aa44e08191955639a827904930f093a48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::DNSRecord</name>
    <filename>d0/db3/structINETDNS_1_1DNSRecord.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSRecord</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>ac0d869ce32dd7a270b0c17aad907c9e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DNSRecord</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>a380959ddd4b543b28973adcd3b14f461</anchor>
      <arglist>(std::string _rname, unsigned short _rtype, unsigned short _rclass, unsigned int _ttl, unsigned short _rdlength, std::shared_ptr&lt; void &gt; _rdata, std::string _strdata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DNSRecord</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>a27a84a893ff8c92e79d61b171da6e459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>rname</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>a8f4ca9064a007a910bab3f3265417452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>rtype</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>a1dfc54a7c0329b7f48a939162d35afcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>rclass</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>a5178221d2585c40fad42746c9e16849f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ttl</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>aa1df24303787c16b0b383d7546e97269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>rdlength</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>ab09c0d9e1816e970efab9ed7cb9f93d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>rdata</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>a01e578577ccb8f5f985df2f55122dfed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>strdata</name>
      <anchorfile>d0/db3/structINETDNS_1_1DNSRecord.html</anchorfile>
      <anchor>a27fb30537daaeba624e180d1e897e647</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSServerBase</name>
    <filename>dd/df1/classDNSServerBase.html</filename>
    <base>cSimpleModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>af50a30468329246b3a2635c862496a43</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a51b5b79e0d0197d46f8b399213d50781</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a8742be6aca12303a6ebe8545b1a75de5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>unsupportedOperation</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a99a3c0caafac13a82c266bde2b16f738</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::Query &gt; q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendResponse</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>abcc041b210fa22357f508c815bf97e94</anchor>
      <arglist>(DNSPacket *response, IPvXAddress returnAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>handleQuery</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a55ac8f75d21f1eb0b63231d80ef8d9e8</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::Query &gt; query)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DNSPacket *</type>
      <name>handleRecursion</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a5da10ca3d8be01bf6a85c9714af8aa4b</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>store_in_query_cache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a6e7d2eefe8695c47560120bc519c85af</anchor>
      <arglist>(int id, std::shared_ptr&lt; INETDNS::Query &gt; query)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIdAndInc</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a3cdd838e7b6b814874a74207e2bea6bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_query_from_cache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a3cf6b1c121576ea91c28950b69c5ffd0</anchor>
      <arglist>(int id, std::shared_ptr&lt; INETDNS::CachedQuery &gt; cq)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::CachedQuery &gt;</type>
      <name>get_query_from_cache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a8edb85147fa989be473a2a1194e6026e</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receivedQueries</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>ab83a993b93cd6e4d8a9747f37b4c6697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>internal_query_id</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>aa5ac8195af6fc55f1330fac40a7bb701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, std::shared_ptr&lt; INETDNS::CachedQuery &gt; &gt;</type>
      <name>queryCache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a21ca75159b4df31eab655c7759e48272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::DNSCache *</type>
      <name>responseCache</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a7f5e94f0a266864eca87ad77e2b1a4ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>rootServers</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>a22b237f2db3605a2185ebd0c4f3ef5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>out</name>
      <anchorfile>dd/df1/classDNSServerBase.html</anchorfile>
      <anchor>ac9f7c9f9ff932dd3567ba8dd1475b1a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::DNSSimpleCache</name>
    <filename>d7/d76/classINETDNS_1_1DNSSimpleCache.html</filename>
    <base>INETDNS::DNSCache</base>
    <member kind="function">
      <type></type>
      <name>DNSSimpleCache</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a7929a1934714983e6ba42c1543f31737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSSimpleCache</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a75b7485d194c8551ccaf9c320f8ac1b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>put_into_cache</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a869fc9e336fe364a7ad1a0d9498ed592</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; record)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>get_from_cache</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>abb459282886fe9777ef6e04aa17f91b6</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_in_cache</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a162a41615d60a710fe6ec1304f8d4fd1</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>ad4cb8c1d51e8976a5a5e2b5e429d30bc</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>ac9acb19b019c642a3839582a526693d1</anchor>
      <arglist>(std::string hash, std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>evict</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>ae091c4e78da4943045d35ee7cbd1f1e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>get_matching_hashes</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a4939b2401cd04e249d5130a18566a145</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt; &gt;</type>
      <name>cache</name>
      <anchorfile>d7/d76/classINETDNS_1_1DNSSimpleCache.html</anchorfile>
      <anchor>a63261b7f6be94613a16ebe593f1511f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::DNSTimeRecord</name>
    <filename>d8/db7/structINETDNS_1_1DNSTimeRecord.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSTimeRecord</name>
      <anchorfile>d8/db7/structINETDNS_1_1DNSTimeRecord.html</anchorfile>
      <anchor>a056d54f43005fab998a172483650de07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>record</name>
      <anchorfile>d8/db7/structINETDNS_1_1DNSTimeRecord.html</anchorfile>
      <anchor>a076823d0d8192ba534f62e58fd3accb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>hash</name>
      <anchorfile>d8/db7/structINETDNS_1_1DNSTimeRecord.html</anchorfile>
      <anchor>a043f1ef06e885432155a3cb013d03078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rcv_time</name>
      <anchorfile>d8/db7/structINETDNS_1_1DNSTimeRecord.html</anchorfile>
      <anchor>aac81dd73dd1894593156fb05734d3cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>expiry</name>
      <anchorfile>d8/db7/structINETDNS_1_1DNSTimeRecord.html</anchorfile>
      <anchor>ac58db0958cf7796426d6e3a3eeba9b67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::DNSTimeRecordComparator</name>
    <filename>da/dd3/classINETDNS_1_1DNSTimeRecordComparator.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSTimeRecordComparator</name>
      <anchorfile>da/dd3/classINETDNS_1_1DNSTimeRecordComparator.html</anchorfile>
      <anchor>a9da54008d2050ed78b200a3455eb8f68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSTimeRecordComparator</name>
      <anchorfile>da/dd3/classINETDNS_1_1DNSTimeRecordComparator.html</anchorfile>
      <anchor>aa49b919f69b99aa43f49d39b4138f028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>da/dd3/classINETDNS_1_1DNSTimeRecordComparator.html</anchorfile>
      <anchor>ab5673eb979b94d138e3bfe2670db3885</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::DNSTimeRecord &gt; t1, std::shared_ptr&lt; INETDNS::DNSTimeRecord &gt; t2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::DNSTTLCache</name>
    <filename>d7/d9b/classINETDNS_1_1DNSTTLCache.html</filename>
    <base>INETDNS::DNSCache</base>
    <member kind="function">
      <type></type>
      <name>DNSTTLCache</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a8b29c05c3df3d3b419375d5f962178d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSTTLCache</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a527d022628e900baac2d9c275a8a7a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>put_into_cache</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a4057f37a8fe835d64214c030c4849a35</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; record)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>get_from_cache</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a35c6b2b641a907f42c207e75637c762c</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_in_cache</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a75ca6dc6391bf060661fbb5c092de83c</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a1421a040513d5aa6bd07b67c62e2c53e</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>remove_from_cache</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>ad1eb2702fcd59ad71d2f428ad4e597b6</anchor>
      <arglist>(std::string hash, std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>evict</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>af6f8647e565cfa4a5d6cc6d89fff30d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>get_matching_hashes</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>af3f87f4c88bac1e17838ced11bbd2fac</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>halfTTL</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a5783648d6eebe764cab0167139b65c87</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>cleanup</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a8e0c63c11a23ba6aa421778853cdd566</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; DNSTimeRecord &gt; &gt; &gt;</type>
      <name>get_cache_table</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a9079924eb92b00467d6250117b522023</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_time_record</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>a13ffb2d15b30b833858722729987c4bf</anchor>
      <arglist>(std::shared_ptr&lt; DNSTimeRecord &gt; tr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; DNSTimeRecord &gt; &gt; &gt;</type>
      <name>cache</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>ae8ccd51920bda87e8f4b913af20e0eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::shared_ptr&lt; INETDNS::DNSTimeRecord &gt;, INETDNS::DNSTimeRecordComparator &gt;</type>
      <name>dnsRecordPriorityCache</name>
      <anchorfile>d7/d9b/classINETDNS_1_1DNSTTLCache.html</anchorfile>
      <anchor>ae2e217789285cbfb9c265033f83909b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DNSZoneConfig</name>
    <filename>df/ddd/classDNSZoneConfig.html</filename>
    <member kind="function">
      <type></type>
      <name>DNSZoneConfig</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a1fdf2b89faccb8865482be3addd19e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DNSZoneConfig</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a55aff4c9808eb058d8d67b614eabb28f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a9a24fe48ce82f5a40a747647e3ab6a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>aa91a393454ee4831f427842f7e6b4c77</anchor>
      <arglist>(std::string config_file)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTTL</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>ae5c07000eaaa7b4cc498db2fd82ba0eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; soa &gt;</type>
      <name>getSOA</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a1db4a681c3b5d00a751a43aed8f8ec5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getOrigin</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a27f37f25c09cd17a92932432621e50b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hasEntry</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a7dfd4dacaec8add387ecae9df307d6db</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::shared_ptr&lt; zone_entry &gt; &gt;</type>
      <name>getEntry</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>adde6789f91cca819188ad8d8b6c18a8e</anchor>
      <arglist>(std::string hash)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; zone_entry &gt; &gt; &gt; *</type>
      <name>getEntries</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a48805d8dc08390a49d1539799fe5ca51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>config_file</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a73a4af12e75525f3292ee18878082efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>TTL</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>ac6fb83d20e9ed2664cdf0d67a7f28c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a26c5e91c315058c240aaafbff8981294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>origin</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>aab8c098ef7100b8bd2e49ea4a50beca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::list&lt; std::shared_ptr&lt; zone_entry &gt; &gt; &gt;</type>
      <name>zone_catalog</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>aab21d42ac269110d313dd059621a6fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; soa &gt;</type>
      <name>zone_soa</name>
      <anchorfile>df/ddd/classDNSZoneConfig.html</anchorfile>
      <anchor>a3dd55bef926db4c3d0cebedc919166d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::FriendData</name>
    <filename>d7/d7e/structINETDNS_1_1FriendData.html</filename>
    <member kind="function">
      <type></type>
      <name>FriendData</name>
      <anchorfile>d7/d7e/structINETDNS_1_1FriendData.html</anchorfile>
      <anchor>af48145e971cc9fbaa103572b91865a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; PairingData &gt;</type>
      <name>pdata</name>
      <anchorfile>d7/d7e/structINETDNS_1_1FriendData.html</anchorfile>
      <anchor>acf2070140956b8983a7ccb025ac9ac2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>address</name>
      <anchorfile>d7/d7e/structINETDNS_1_1FriendData.html</anchorfile>
      <anchor>a0db7cd044a0520ddf22328d0d63bd00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>port</name>
      <anchorfile>d7/d7e/structINETDNS_1_1FriendData.html</anchorfile>
      <anchor>a63a5f9201757c0fdf5bebdff260477ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>last_informed</name>
      <anchorfile>d7/d7e/structINETDNS_1_1FriendData.html</anchorfile>
      <anchor>a020484d5231dd4d59b438a7a232c4415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>online</name>
      <anchorfile>d7/d7e/structINETDNS_1_1FriendData.html</anchorfile>
      <anchor>a936b551bc870b60278700905d55de808</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MDNSNetworkConfigurator::GeneratorService</name>
    <filename>d8/ddd/structMDNSNetworkConfigurator_1_1GeneratorService.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>service</name>
      <anchorfile>d8/ddd/structMDNSNetworkConfigurator_1_1GeneratorService.html</anchorfile>
      <anchor>a0e5caac781f09766aec09052475e1f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>port</name>
      <anchorfile>d8/ddd/structMDNSNetworkConfigurator_1_1GeneratorService.html</anchorfile>
      <anchor>a4b3d1222c1afc0d4a975d113b0515bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>probability</name>
      <anchorfile>d8/ddd/structMDNSNetworkConfigurator_1_1GeneratorService.html</anchorfile>
      <anchor>a90c0e835c9c2b0ad9f3d5db1622443e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_private</name>
      <anchorfile>d8/ddd/structMDNSNetworkConfigurator_1_1GeneratorService.html</anchorfile>
      <anchor>a63b05e19fad34c78da452e3b2c7faa79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericTraffGen</name>
    <filename>d1/d97/classGenericTraffGen.html</filename>
    <base>cSimpleModule</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d1/d97/classGenericTraffGen.html</anchorfile>
      <anchor>a787cfab53097ebd426a996db75da7bad</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>d1/d97/classGenericTraffGen.html</anchorfile>
      <anchor>ae0eff9aa9e3fa595e74c8fe289f700e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d1/d97/classGenericTraffGen.html</anchorfile>
      <anchor>af3631f6a4a468a0fb26a980cf7d814e0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::MDNSAnnouncer</name>
    <filename>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSAnnouncer</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a1866530c0dd9173f8f58df488092c891</anchor>
      <arglist>(INETDNS::MDNSProbeScheduler *_probe_scheduler, INETDNS::MDNSResponseScheduler *_response_scheduler, INETDNS::TimeEventSet *_timeEventSet, std::vector&lt; std::shared_ptr&lt; MDNSService &gt;&gt; services, std::string _hostname, IPvXAddress *_hostaddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDNSAnnouncer</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a5f9c99bdb769af2e41713c01277f040d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>af54f1219b279020a7808d0bcd8c97c50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restart</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a529f5314c5c39cada09da0ede5ae1aab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>check_conflict</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>ac3fb55d914039c41596ae42bc7782e55</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_service</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>aa67c746ca1988746b0d7cf9ae5976d55</anchor>
      <arglist>(std::shared_ptr&lt; MDNSService &gt; service)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>get_announced_services</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>afbba104088913bc86aa3698ee04ca5e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elapse</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a1b43203f0cbbe5027a826a44819ce84b</anchor>
      <arglist>(INETDNS::TimeEvent *e, std::shared_ptr&lt; void &gt; data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>withdraw</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a46f7357fa5314621c9f391fd8e77b8e8</anchor>
      <arglist>(std::shared_ptr&lt; Probe &gt; p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>goodbye</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a2f66eb1af48eda9074f260f43cc7e08f</anchor>
      <arglist>(std::shared_ptr&lt; Probe &gt; p, int send_goodbye, int remove)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a6d15bc90b2c6567a8d3f97de8bb95c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAnnounced</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a5558dd9defb165501ea01ae133147653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AnnouncerState</type>
      <name>getState</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a45179b54b205cb6b145857915af46793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual INETDNS::DNSTTLCache *</type>
      <name>getCache</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a404808d44b5c52f3fe02713ecd2e2cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>elapseCallback</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a726502e76f30221f4bc168dbb1246632</anchor>
      <arglist>(INETDNS::TimeEvent *e, std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a9ce5900c56a28add22bfd84dd000e88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::DNSTTLCache *</type>
      <name>auth_cache</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a63ef013cde7c4a93a868d3753fe2db47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSProbeScheduler *</type>
      <name>probe_scheduler</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a98f6bd16cced518a9e25f9619f2b9c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSResponseScheduler *</type>
      <name>response_scheduler</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a04134ab78f656be62b5f5076201dd1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress *</type>
      <name>hostaddress</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>ad46c5fe73eca98bef4efe5f756bf3b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>hostname</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>adfca811d8d591a9307a9e25442977fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>target</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a3c64ad45b39d71edac6ad95e29513acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_internal</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a1bc7201551a7054e9f9c52d0c9e6814a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_announced_jobs</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a7e66132cc7a14cd2c307bc9919d47974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnouncerState</type>
      <name>s</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>ae9e1f49a5390aa04ca24180358cd9259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; int, std::string &gt;</type>
      <name>probe_to_cache</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>a1aa7c11bd5ffda0f6758c9553d5233a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSService &gt; &gt;</type>
      <name>to_announce</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>aa1ad221ffb3b02f6f511aaa55d83ad00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; Probe &gt; &gt;</type>
      <name>probing</name>
      <anchorfile>d4/dd9/classINETDNS_1_1MDNSAnnouncer.html</anchorfile>
      <anchor>ae163eb03c8dd8a8791f99e627a9a1e01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::MDNSKey</name>
    <filename>d1/d7c/structINETDNS_1_1MDNSKey.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSKey</name>
      <anchorfile>d1/d7c/structINETDNS_1_1MDNSKey.html</anchorfile>
      <anchor>a76318798627303b0702657d84600875e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>d1/d7c/structINETDNS_1_1MDNSKey.html</anchorfile>
      <anchor>a54dca642f8028510a35bbdf817561673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>type</name>
      <anchorfile>d1/d7c/structINETDNS_1_1MDNSKey.html</anchorfile>
      <anchor>a6b3a09a2050a468a5bbd7bd2c0bf4c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>_class</name>
      <anchorfile>d1/d7c/structINETDNS_1_1MDNSKey.html</anchorfile>
      <anchor>a23b399cf4cc1fb040bc299a0700907e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MDNSNetworkConfigurator</name>
    <filename>d8/db1/classMDNSNetworkConfigurator.html</filename>
    <base>cSimpleModule</base>
    <class kind="struct">MDNSNetworkConfigurator::GeneratorService</class>
    <member kind="function">
      <type></type>
      <name>~MDNSNetworkConfigurator</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a411d09c1f9bb217d2e644e730e7bc885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a6ba46053881252b2bb0e95baecfc2be2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a9a9246679a0eed13f3be57f06e710e89</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>af05162a64d3b3ea335eddaa79b3e5239</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeMDNSNetwork</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>ad780f2d8b04c1440bdc29bd209d32aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>Distributions</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a516ece39d25709f05d52a1ab59193558</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>TrafficModels</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>ad16cf7531b29f7a3f4399172032d8435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>GAUSSIAN</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a516ece39d25709f05d52a1ab59193558a4bf23a0d769b805c922173d4c2804015</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>CBR</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>ad16cf7531b29f7a3f4399172032d8435ae5801351da1ff796b571d3b89a881278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>BURST</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>ad16cf7531b29f7a3f4399172032d8435a33461a13f75e9ec641c2fd91b2401f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>POISSON</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>ad16cf7531b29f7a3f4399172032d8435ac2890c618be1b376403fd1541a76c981</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pair</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>aa24fe6bb3501c6e9aaf62de89aa04fae</anchor>
      <arglist>(MDNSResolver *m1, MDNSResolver *m2, std::string device_name1, std::string device_name2, std::string instance_name1, std::string instance_name2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>share</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>aedf07d5be137c783d7aabcfa414323f6</anchor>
      <arglist>(MDNSResolver *m1, MDNSResolver *m2, std::string device_name1, std::string device_name2, std::shared_ptr&lt; MDNSNetworkConfigurator::GeneratorService &gt; service)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::shared_ptr&lt; MDNSNetworkConfigurator::GeneratorService &gt;</type>
      <name>generateNextService</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>af64ec1f06c3736a24c0e59e93d4cee5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_resolvers</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a396de7354a36a3ac3b4b732cbb3b5641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_private</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>af8669005849de69d6f4fb9d28ca1e7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_friends</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a336865f53d60b389a70efe96eb8b573c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>min_friends</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>ac382a379206a5248c9b74f8cf8841fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_services</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>ae948183fcc46d5fc940b4dcd0e570dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>min_services</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a66114199f79030ad9729aabb277e245e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>private_service_ratio</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a032cbeaa7800dfabcbe5119bcabe2d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_generated_services</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>aac1fc57abd077c04d5e44c0d12a89f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>average_uptime</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>abad98a956304fec18aed49b17e8139f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>max_online_duration</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>ad4351083f75b418480798df9ca11e56e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Topology</type>
      <name>topology</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a5d7d42eff20c63761d111d8aab7d2aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>querying_enabled</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a7b6f4c321d55f56a38a7707de5b49f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, MDNSResolver * &gt;</type>
      <name>device_map</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a0a46dc18d1447dc1038ad719a308530b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, MDNSResolver * &gt;</type>
      <name>private_device_map</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a6f7d60ef13871a900fac867be3d7400c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::list&lt; std::string &gt; &gt;</type>
      <name>pairing_map</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a55e92dda714541bd9cedc604cc58345f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>service_usage_probability</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>af423d71bcf6b0c0e0aecf58d2537c9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>distribution</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>ac317dbbbd0d1a8017bbf7de76142f666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>traffic_model</name>
      <anchorfile>d8/db1/classMDNSNetworkConfigurator.html</anchorfile>
      <anchor>a2bae9e4dbab2d632a0bf6cab0379a492</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::MDNSProbeJob</name>
    <filename>d2/d63/structINETDNS_1_1MDNSProbeJob.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSProbeJob</name>
      <anchorfile>d2/d63/structINETDNS_1_1MDNSProbeJob.html</anchorfile>
      <anchor>aadb8ea8dc1004faf43eb13b67f10cc1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>id</name>
      <anchorfile>d2/d63/structINETDNS_1_1MDNSProbeJob.html</anchorfile>
      <anchor>a1eac994f4ea0dd0fe41559dee4ad6042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeEvent *</type>
      <name>e</name>
      <anchorfile>d2/d63/structINETDNS_1_1MDNSProbeJob.html</anchorfile>
      <anchor>a5a07a6e9e87979f93c18c4c649b6ffb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>r</name>
      <anchorfile>d2/d63/structINETDNS_1_1MDNSProbeJob.html</anchorfile>
      <anchor>a424eb7a03160c1d5e17f2a99286bbbad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>done</name>
      <anchorfile>d2/d63/structINETDNS_1_1MDNSProbeJob.html</anchorfile>
      <anchor>a5e8e62581394621da9ca5744c49b2537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delivery</name>
      <anchorfile>d2/d63/structINETDNS_1_1MDNSProbeJob.html</anchorfile>
      <anchor>acbfe51fc52b3bef1372ed09d72f2bfc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::MDNSProbeScheduler</name>
    <filename>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSProbeScheduler</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ae4c30096a84f4d1f675411b8df219d0d</anchor>
      <arglist>(TimeEventSet *_timeEventSet, UDPSocket *_outSock, void *resolver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDNSProbeScheduler</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ae5fe25114e79c6a804b514f4ec8bc2bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ac0a39bc2ad492973a59b17581eada0ed</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int immediately)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elapse</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>aabc5773cf6f515521c2a6ee9522a66e9</anchor>
      <arglist>(TimeEvent *e, std::shared_ptr&lt; void &gt; data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>adb387bc1ab1dd39994988c72ef549ccd</anchor>
      <arglist>(void(_callback)(std::shared_ptr&lt; void &gt;, void *))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSocket</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ac98896d0eb6670487a8b050b6cb6b39f</anchor>
      <arglist>(UDPSocket *sock)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCache</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>afaa78723ff26b263abd46cea87b43de1</anchor>
      <arglist>(DNSTTLCache *_cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrivacyData</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>aef94217c0f794693c41133ef75e0f85d</anchor>
      <arglist>(std::unordered_map&lt; std::string, std::shared_ptr&lt; PrivateMDNSService &gt;&gt; *private_service_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *friend_data_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *instance_name_table, UDPSocket *privacySocket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSignalReceiver</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ab3fce19aa22ce5b1ee9a58fb4db5a394</anchor>
      <arglist>(SignalReceiver *pSignalReceiver)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>elapseCallback</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a82252d9d2e1e34efa5428297323b7a61</anchor>
      <arglist>(TimeEvent *e, std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSProbeJob &gt;</type>
      <name>new_job</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a1c85471583c656b8ff2b51d1512ec9a0</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSProbeJob &gt;</type>
      <name>find_job</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a62bea65bdeba6649ae7dce2e5384e319</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSProbeJob &gt;</type>
      <name>find_history</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>aa5e0554628728c25aab665ab49c0e695</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>done</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ad99ecbdd582e152918c4e97314fc6163</anchor>
      <arglist>(std::shared_ptr&lt; MDNSProbeJob &gt; pj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_job</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a26e27e2861580e3a704b635b78cffb1b</anchor>
      <arglist>(std::shared_ptr&lt; MDNSProbeJob &gt; pj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>preparePacketAndSend</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ad77575a0bf93fa869c47060bb1cf7c3e</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSQuestion &gt;&gt; qlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; nslist, int qdcount, int nscount, int packetSize, int TC, int is_private)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>append_question</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ae4bc4d231c6eea728eaa553012143f1a</anchor>
      <arglist>(std::shared_ptr&lt; MDNSProbeJob &gt; pj, std::list&lt; std::shared_ptr&lt; DNSQuestion &gt;&gt; *qlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *nslist, int *packetSize, int *qdcount, int *nscount, int is_private)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>resolver</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a4f9a31b992700a2e2aa9c84972ae1269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SignalReceiver *</type>
      <name>signalReceiver</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ac0610b5fd5ba58faf1856b4af264f879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a320f359078f173171accfbb0d7aac8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSProbeJob &gt; &gt;</type>
      <name>jobs</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a79e7c2a47c1834ecb64884ccdc8a47e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSProbeJob &gt; &gt;</type>
      <name>history</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a98fa1f32757f9c5724f521f8fc8757c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket *</type>
      <name>outSock</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>aee6517d7ea7e75cd7d14b65c30bdf6e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket *</type>
      <name>privacySock</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ac4a1d03635f3b5750656c8cc4195c4d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>multicast_address</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>aede02e0faa513dedbbf7eb771da1dc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt; &gt; *</type>
      <name>private_service_table</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a4c366c625d9ce42149c6815a56677cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>friend_data_table</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a0b09d13a3236c29485eed3d2e7940d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>instance_name_table</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>aeae0901c2e1e69e9d61ef98da16a2a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hasPrivacy</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a624a66b02f060b7d2088675bf37e1ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSTTLCache *</type>
      <name>cache</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>ac36af4b4d61988b451fed3b79b49f67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>id_count</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>a80fffea735a702f83140158e69f5d4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>d3/db2/classINETDNS_1_1MDNSProbeScheduler.html</anchorfile>
      <anchor>afd08f7fb423d1f5ba4cfb2031b39b0e0</anchor>
      <arglist>)(std::shared_ptr&lt; void &gt;, void *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::MDNSQueryJob</name>
    <filename>d0/dbe/structINETDNS_1_1MDNSQueryJob.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSQueryJob</name>
      <anchorfile>d0/dbe/structINETDNS_1_1MDNSQueryJob.html</anchorfile>
      <anchor>aa27c693a0b9edc58771627d59a835968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>id</name>
      <anchorfile>d0/dbe/structINETDNS_1_1MDNSQueryJob.html</anchorfile>
      <anchor>aa1c1b4870201fe9ee6f5e3ca6b21c2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETDNS::TimeEvent *</type>
      <name>e</name>
      <anchorfile>d0/dbe/structINETDNS_1_1MDNSQueryJob.html</anchorfile>
      <anchor>ae623e82f61d9e1d724602a75b606cc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; INETDNS::MDNSKey &gt;</type>
      <name>key</name>
      <anchorfile>d0/dbe/structINETDNS_1_1MDNSQueryJob.html</anchorfile>
      <anchor>a296e6b5a1ca0e55030e939f7b9cb876c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>done</name>
      <anchorfile>d0/dbe/structINETDNS_1_1MDNSQueryJob.html</anchorfile>
      <anchor>aeb51790e5f056cfde079c280578dadd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delivery</name>
      <anchorfile>d0/dbe/structINETDNS_1_1MDNSQueryJob.html</anchorfile>
      <anchor>a9f2b5651d89d0e0b4c1a0d39c85743c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::MDNSQueryScheduler</name>
    <filename>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSQueryScheduler</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a0eb43f9a876c1ce8f9d5d4b3a5817c5c</anchor>
      <arglist>(INETDNS::TimeEventSet *_timeEventSet, UDPSocket *_outSock, void *resolver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDNSQueryScheduler</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a7d75104fc0d011af67c541de8619d1a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ae174f37f8960e6cd5c2745def49ca130</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key, int immediately)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>check_dup</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ad8e504ac3947ce3656547778adfd06fb</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elapse</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a3b1d58c24ad3a1982db518af66cf20b7</anchor>
      <arglist>(INETDNS::TimeEvent *e, std::shared_ptr&lt; void &gt; data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a4524355678571cc161a6ef808487b727</anchor>
      <arglist>(void(_callback)(std::shared_ptr&lt; void &gt;, void *))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSocket</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a159461457719ad0dca69436122b57754</anchor>
      <arglist>(UDPSocket *sock)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCache</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a254f08c98f007a639d34e8e3e235acc0</anchor>
      <arglist>(INETDNS::DNSTTLCache *_cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrivacyData</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>aa291171a61157def3c88345117a645f3</anchor>
      <arglist>(std::unordered_map&lt; std::string, std::shared_ptr&lt; PrivateMDNSService &gt;&gt; *private_service_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *friend_data_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *instance_name_table, UDPSocket *privacySocket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSignalReceiver</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>abf42fe4b14a19b456feb7224419fb909</anchor>
      <arglist>(SignalReceiver *pSignalReceiver)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>elapseCallback</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ab68e8302f0fbe36bbf06d80a53a8b2e0</anchor>
      <arglist>(INETDNS::TimeEvent *e, std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; INETDNS::MDNSQueryJob &gt;</type>
      <name>new_job</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a70b9c60ec7857300dcbe066892a4f4db</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; INETDNS::MDNSQueryJob &gt;</type>
      <name>find_job</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ac1347abaf22e0366748f0ed768bb3918</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; INETDNS::MDNSQueryJob &gt;</type>
      <name>find_history</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a65db176f5e2f25796802a93e2272231b</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>done</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ac29d694f4fc28a411a203fafd902b480</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSQueryJob &gt; qj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_job</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>add0570bc0a865681b0ad176fa9a5ff47</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSQueryJob &gt; qj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::list&lt; std::shared_ptr&lt; DNSRecord &gt; &gt;</type>
      <name>append_cache_entries</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a801540aa019ea1ad4e3d73d406bfa9c1</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>append_question</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>aa42d04b7b21839638b291a585b6d0b17</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key, std::list&lt; std::shared_ptr&lt; DNSQuestion &gt;&gt; *qlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *anlist, int *packetSize, int *qdcount, int *ancount, int is_private)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>preparePacketAndSend</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a538e4e6ee576fd8457a891a74096a612</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSQuestion &gt;&gt; qlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; anlist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; nslist, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; arlist, int qdcount, int ancount, int nscount, int arcount, int packetSize, int TC, int is_private)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>resolver</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ada9417a04f5ee73bbe0cd91d73474497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SignalReceiver *</type>
      <name>signalReceiver</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a1623459e4f9ea05c58b574df741ce4e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a03fc35d7c7315a440be6bb88bfe00afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSQueryJob &gt; &gt;</type>
      <name>jobs</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a5196710c3b7c82089227ec82cac37747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSQueryJob &gt; &gt;</type>
      <name>history</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ab1178c37777859eede27b33a74ac92c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket *</type>
      <name>outSock</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ad91b14f5801e88a4e8d056b4cf36caa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket *</type>
      <name>privacySock</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a7090ec182e0f9f7962e5f6e7e5cac570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>multicast_address</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ae0052e270d523ee156f14eaba357c020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt; &gt; *</type>
      <name>private_service_table</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a49c2e1ffe7a830e6fa0390e0c5c59185</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>friend_data_table</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a1a5a4dfac0f257b12132644da89f17de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>instance_name_table</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a382ad6538982458d26bff64174200b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hasPrivacy</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ac5f20d5c47778af946e5dfa6811d034a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSTTLCache *</type>
      <name>cache</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a2fce3de1e16631eb71c4c288a6adce10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>id_count</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>a24d36b4c13cc0ccd77bddb2a75318676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>da/d51/classINETDNS_1_1MDNSQueryScheduler.html</anchorfile>
      <anchor>ae09d32ef373f813c143c050757db1906</anchor>
      <arglist>)(std::shared_ptr&lt; void &gt;, void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MDNSResolver</name>
    <filename>dc/d51/classMDNSResolver.html</filename>
    <base>cSimpleModule</base>
    <base>SignalReceiver</base>
    <base>INETDNS::TimeEventSetObserver</base>
    <member kind="function">
      <type></type>
      <name>MDNSResolver</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a99ac15e032827d6336c96e79825805f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MDNSResolver</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a6d9eddc4acaa45ac35b4dfc77cb76f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>af97aa644d0ba1c94adce6862a5ade72f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>af58d5565712aa6ac4b9adf599cd0ed66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a4d200a7d6a13dd35723af39b9e96dfe8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicParams</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a6fdacfdac2cae401b9e0fc7706ad1bce</anchor>
      <arglist>(std::string hostname, std::string own_instance_name, bool hasPrivacy, bool isQuerying)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addService</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a9294d826cfee9e53cd34b8b0c55bcaa8</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSService &gt; service)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPrivateService</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a41fdfc3799baa5cfbbab0a945b4886d3</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt; pService)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePrivateService</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a3e198e6055e262f7db40af41751614f0</anchor>
      <arglist>(std::string service_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOfferedTo</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>af8f9dcc54c9c691dc2168a27a4c11c23</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt; pService, std::string offered_to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOfferedBy</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>aa0d2f7c35d8bc645badc8dea153bbe41</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt; pService, std::string offered_by)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFriend</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a0f69029c473b3f9b2ee2e38bbeab578b</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::FriendData &gt; fdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimingSchedule</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ae6b35e8d336988dcaf97771d82e35f90</anchor>
      <arglist>(std::vector&lt; std::shared_ptr&lt; std::pair&lt; SimTime, SimTime &gt;&gt;&gt; timingSchedule)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPrivate</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a107585824ba7c7f4139af679a206a833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>aa2bb2b5474ca653fae9e6664cb9ddd12</anchor>
      <arglist>(std::unordered_map&lt; std::string, int &gt; parMap, void *additionalPayload)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>af1f6b323845130e43ad20a1cbe21b1b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>callback</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>adcd86ab9c9b9453e092e601de2848903</anchor>
      <arglist>(std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>MDNSResolverState</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a5155f13e07ad7e229c646bd14b979140</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>RUNNING</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a5155f13e07ad7e229c646bd14b979140a831c8c7d12753f4d58eb004cb970fbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SHUTDOWN</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a5155f13e07ad7e229c646bd14b979140a4e393754c9f1a22c077bcbbe336a8f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elapsedTimeCheck</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ae3414492f32508b38994f347ff23b1b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleQuery</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a7717be2b2ab7511ea16cdb956960e70b</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleResponse</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a7fba5555976b28b1523181b616415656</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleSelfMessage</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a598c93aed0f2da666a6cb83f662cdb87</anchor>
      <arglist>(simtime_t tv)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeServices</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a8954cbb4db03e7bf9c4d60c15916d8c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeServiceFile</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a4edc641538f1c1fe62cac1f8b803aa9a</anchor>
      <arglist>(std::string file)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePrivateServices</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a7e009c7a996fd56881bd767dff78963e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a91e6f0562398c8c0280e63881fdc3d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSProbeScheduler *</type>
      <name>probeScheduler</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a9c49eb4b1d11c468a830efe36c4b0220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSResponseScheduler *</type>
      <name>responseScheduler</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>af3656fb5018e0a1059c20b3fb7d9f0b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSQueryScheduler *</type>
      <name>queryScheduler</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a843c5c9f874bc8ab32ce8cebc0719283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSAnnouncer *</type>
      <name>announcer</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>aad7e9edea948cc7719076ff89c3eddb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSTrafficGenerator *</type>
      <name>mdnsTrafficGenerator</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ac6fac7627f6e6a84833805cfa310c705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::AnnouncerState</type>
      <name>announcer_state</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a8ec9199ab56a70e4ad18ba6b1c6ad1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::DNSTTLCache *</type>
      <name>cache</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a2bf94286a4c2abdf9f61093d7a063274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>outSock</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ac6cab10e701c4c030e43ed449c6a0e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>privacySock</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a893b7561da4cfd35fbfd63dc32519c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; INETDNS::MDNSService &gt; &gt;</type>
      <name>services</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a9718f7db4a1845e7437f436a016ec5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>hostname</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a0bd9de98bb613a975c26bbb9767f890f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>hostaddress</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a909f127a683f3bd9ebdcdabdec6f09b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessage</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a56d8d6cae7a330802ea47402fbe28297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt; &gt; *</type>
      <name>private_service_table</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a7daef0eb722f8cbeb5b0a4c03838c85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>friend_data_table</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a304e80d5c7e37d0c01c1da1b7882630c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>instance_name_table</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a3b1ac1ea6094fb65052ee674f5bdcd56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>own_instance_name</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a98cb3d01429ecd3eed1984fffe3d6507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasPrivacy</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ae4046d527308f8e1c2fc020c34e880e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isQuerying</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>aa15987eebe0990da1af4adb6542836fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>last_schedule</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a25f29c3f99070a34d4a833cdd1d48ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>elapseTime</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ab3389c5a7321e156da3e4c7b1ceb8fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>static_configuration</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ab719fd8fa9b179abe9b174929298e1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; std::pair&lt; SimTime, SimTime &gt; &gt; &gt;</type>
      <name>uptimes</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>aa58ee5e11c854ef3e04dcd6fac464b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>current_uptime</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a9e5b3b772d205da515e8ce1d125b69b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MDNSResolverState</type>
      <name>state</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a5a1459ef0f9e8c45e4201c87ae17450a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mdnsQueryRcvd</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>aa1a5a5ac373ae9cc7e29d14b227bbc2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mdnsQuerySent</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a6970b69387396492c728bcb982d38d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mdnsResponseRcvd</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a53345f692bc74eacee6247ca0634135e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mdnsResponseSent</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>ae0d49a8b2732b5ee62cb5eaa7a07e26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mdnsProbeRcvd</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a91868083b5e3105cd01ce633aab7485d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mdnsProbeSent</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a480c85a04355df390c5520adb432ac31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>privateQueryRcvd</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a62fce561efb692f2146097f587745736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>privateQuerySent</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a62c7c6d1d1c7532055c32a929b72a51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>privateResponseRcvd</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a285c06e2b509200d6ac43dc3235595ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>privateResponseSent</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a4303e12d196199e37eaa61d182660182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>privateProbeRcvd</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>acf5ef8e99c12d4c3531ff6286ea6e74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>privateProbeSent</name>
      <anchorfile>dc/d51/classMDNSResolver.html</anchorfile>
      <anchor>a15bef11c70474a9720adf7c0fa35ba8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::MDNSResponseJob</name>
    <filename>d1/d30/structINETDNS_1_1MDNSResponseJob.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSResponseJob</name>
      <anchorfile>d1/d30/structINETDNS_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a44524a175eab5f95c531fff446c3ce20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>id</name>
      <anchorfile>d1/d30/structINETDNS_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a3f3e1a4fd736337521c1304e508de049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeEvent *</type>
      <name>e</name>
      <anchorfile>d1/d30/structINETDNS_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a8cb609579b6c6a39c949ce845d5d8613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>r</name>
      <anchorfile>d1/d30/structINETDNS_1_1MDNSResponseJob.html</anchorfile>
      <anchor>ab5d89bb33a451f4073720cd0b7c9be70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress *</type>
      <name>querier</name>
      <anchorfile>d1/d30/structINETDNS_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a9b0773c01052c27ac99ead5e3c633c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>done</name>
      <anchorfile>d1/d30/structINETDNS_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a532bba0fdcb4c992261ec5a6aa77afe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>suppressed</name>
      <anchorfile>d1/d30/structINETDNS_1_1MDNSResponseJob.html</anchorfile>
      <anchor>ab230aa053f2b710218a9b8121938f7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>flush_cache</name>
      <anchorfile>d1/d30/structINETDNS_1_1MDNSResponseJob.html</anchorfile>
      <anchor>a98a49c1c2a5b2defd3dfb740f4917697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delivery</name>
      <anchorfile>d1/d30/structINETDNS_1_1MDNSResponseJob.html</anchorfile>
      <anchor>acf15874f39935bb1f909786c9b29a0c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::MDNSResponseScheduler</name>
    <filename>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSResponseScheduler</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a578fe9ebad6bf6157eecc603b33e453d</anchor>
      <arglist>(TimeEventSet *_timeEventSet, UDPSocket *_outSock, void *resolver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDNSResponseScheduler</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a1e7bb582618af3838876acd505359c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a4a60de587016619d9912aec35eee87ab</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int flush_cache, IPvXAddress *querier, int immediately)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elapse</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ad486cf0781dfb91e9bde32c0892636d8</anchor>
      <arglist>(TimeEvent *e, std::shared_ptr&lt; void &gt; data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>check_dup</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a9ca2e8dde73cfb4ae1257249603fe67a</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int flush_cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>suppress</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a1db554adbfef5830b4a195379dc69cf8</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int flush_cache, IPvXAddress *querier, int immediately)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a367dbdaf6cd92d0eb208002be15b95ec</anchor>
      <arglist>(void(_callback)(std::shared_ptr&lt; void &gt;, void *))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSocket</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a2fa948f3e59bf1619805dfa86a07b36c</anchor>
      <arglist>(UDPSocket *sock)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthCache</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a744dc8d85bdfbca394dd6a11dd584428</anchor>
      <arglist>(DNSTTLCache *_cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrivacyData</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a305dcac8f07406b77aab06555185d120</anchor>
      <arglist>(std::unordered_map&lt; std::string, std::shared_ptr&lt; PrivateMDNSService &gt;&gt; *private_service_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *friend_data_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *instance_name_table, UDPSocket *privacySocket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSignalReceiver</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>aaf8be6d67eef2cfc7adf0333be81ef98</anchor>
      <arglist>(SignalReceiver *pSignalReceiver)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>elapseCallback</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a058f11b04819152e01e587428af9ed81</anchor>
      <arglist>(TimeEvent *e, std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSResponseJob &gt;</type>
      <name>new_job</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a5227e45e06e25c78ca98b04f2be9d348</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, int done, int suppress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSResponseJob &gt;</type>
      <name>find_job</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a0f2a83e4320bb26e58fc2d9b07d0610d</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSResponseJob &gt;</type>
      <name>find_history</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ade2720a1551289e673641e5db23ac236</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; MDNSResponseJob &gt;</type>
      <name>find_suppressed</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a6fd062caff1820518e7d9b0b94a54f45</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, IPvXAddress *querier)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>done</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ae7c24daf0e4b1d702becdb8da0930088</anchor>
      <arglist>(std::shared_ptr&lt; MDNSResponseJob &gt; rj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_job</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a360567e07efc39b707708043c0891e9e</anchor>
      <arglist>(std::shared_ptr&lt; MDNSResponseJob &gt; rj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>appendTransitiveEntries</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a6b7e1fcd89904b89b89c32a39ceae5ae</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *anlist, int *packetSize, int *ancount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>appendFromCache</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ac02c5fa691679871b8fd95d4d15ee641</anchor>
      <arglist>(std::string hash, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *anlist, int *packetSize, int *ancount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>appendRecord</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>aa4bb36cbea77e69a8aec45f98d1f4a65</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r, std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; *anlist, int *packetSize, int *ancount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>preparePacketAndSend</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a5f51ccd0922838db929d07c3bab034db</anchor>
      <arglist>(std::list&lt; std::shared_ptr&lt; DNSRecord &gt;&gt; anlist, int ancount, int packetSize, int is_private)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>resolver</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a7c431ee1fc99d23568d4f666b6f1f917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SignalReceiver *</type>
      <name>signalReceiver</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a7ddaff1ddb6fb4c55bc2d3f7fb6207fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ac9a5942486bbf89ed807ebf4c062dc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSResponseJob &gt; &gt;</type>
      <name>jobs</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>aaf66e4b0788f24a9eb3df5520c5f8da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSResponseJob &gt; &gt;</type>
      <name>history</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>acfd012c1e65e922ac23cc0872967e1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; MDNSResponseJob &gt; &gt;</type>
      <name>suppressed</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a0cee4eff49002f9e3f4abdb1e96e0a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket *</type>
      <name>outSock</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a8f3f83b4165e2e0df7bea4c7b1693a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket *</type>
      <name>privacySock</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ae2d58e06709211955e8489c59f3b2936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>multicast_address</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a5ee7b026b6d6998372498cfd1cc08154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt; &gt; *</type>
      <name>private_service_table</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a0fccb88a61f8e261fee87bfcf674162c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>friend_data_table</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>af2f71efed4b7e201da7cfe6be997de58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>instance_name_table</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>aaecd7758fd1fe7aa350f9f1910ed2ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hasPrivacy</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a85e0f88e18e32d6d227b5f14985c382b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DNSTTLCache *</type>
      <name>auth_cache</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ac29c1d33a9809141a624f57eed516d95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>id_count</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>ab07e8d27ae4ffed2d08034ea8c3d5725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>d8/d3f/classINETDNS_1_1MDNSResponseScheduler.html</anchorfile>
      <anchor>a406989ca5ba933a25d868b27cf681f6a</anchor>
      <arglist>)(std::shared_ptr&lt; void &gt;, void *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::MDNSService</name>
    <filename>d0/dff/structINETDNS_1_1MDNSService.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSService</name>
      <anchorfile>d0/dff/structINETDNS_1_1MDNSService.html</anchorfile>
      <anchor>a0748759236b63db2c534d0a07a5f6eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>service_type</name>
      <anchorfile>d0/dff/structINETDNS_1_1MDNSService.html</anchorfile>
      <anchor>a8506e210a0f24b410791435cc3a84e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>d0/dff/structINETDNS_1_1MDNSService.html</anchorfile>
      <anchor>aea479cd30368d765f22e3a43e92a749d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; std::string &gt;</type>
      <name>txtrecords</name>
      <anchorfile>d0/dff/structINETDNS_1_1MDNSService.html</anchorfile>
      <anchor>a8e8cebaa5acf0f6eb5df867c316e679c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>port</name>
      <anchorfile>d0/dff/structINETDNS_1_1MDNSService.html</anchorfile>
      <anchor>a7a47725c22533e170c3690b647422f2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::MDNSTrafficGenerator</name>
    <filename>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>MDNSTrafficGenerator</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a15496c4484a2fde9ad9b858f1d0783a0</anchor>
      <arglist>(INETDNS::MDNSProbeScheduler *probeScheduler, INETDNS::MDNSQueryScheduler *queryScheduler, INETDNS::MDNSResponseScheduler *responseScheduler, INETDNS::TimeEventSet *timeEventSet, UDPSocket *outSock, std::vector&lt; std::string &gt; serviceList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MDNSTrafficGenerator</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a3fef846f1a00bd5ab6067036a453bf22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrivacyData</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a0c17ad4865dcc4aaeffc2940182834ba</anchor>
      <arglist>(std::unordered_map&lt; std::string, std::shared_ptr&lt; PrivateMDNSService &gt;&gt; *private_service_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *friend_data_table, std::unordered_map&lt; std::string, std::shared_ptr&lt; FriendData &gt;&gt; *instance_name_table, UDPSocket *privacySocket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startQuerying</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>abd0bdd030d363d6f88e5bfdb9e5a0a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stopQuerying</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>af559cb19d2f4f2414985d8a62d28a613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>elapseCallback</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>aeb9ede26eda2e33d6db3a7fd296470cf</anchor>
      <arglist>(INETDNS::TimeEvent *e, std::shared_ptr&lt; void &gt; data, void *thispointer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elapse</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a3182df38d21598d0f10e95b6ee92b726</anchor>
      <arglist>(INETDNS::TimeEvent *e, std::shared_ptr&lt; void &gt; data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>RUNNING</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a63368def1dfb88587e651a4bf313d0ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>serviceList</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a96e4dcbf7da86f646b0d8066c90b5957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::TimeEventSet *</type>
      <name>timeEventSet</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a6110448770704f8aa4f05fb9c6287601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::TimeEvent *</type>
      <name>latestScheduledEvent</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a2dde1e8a34257cf3d1861cc4fc47b770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSProbeScheduler *</type>
      <name>probeScheduler</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a7221cda3c2d7727e4f6f73875070713d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSResponseScheduler *</type>
      <name>responseScheduler</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>af31bbcaf50364fc9812588e64f84191a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INETDNS::MDNSQueryScheduler *</type>
      <name>queryScheduler</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>ad193591e256be19c35c70109c65d1380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket *</type>
      <name>outSock</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a14ca8e240511facad3ee031bbde58b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket *</type>
      <name>privacySock</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a66685a16b3d9b4744f6eb31a8d99a02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>multicast_address</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a1aeefbd78447e9987396e5dd6ee81930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt; &gt; *</type>
      <name>private_service_table</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>ae64396b2382ab8e651ff9fcabc718ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>friend_data_table</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>abcffb65fef16ac4b9f075c111dd8d64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; INETDNS::FriendData &gt; &gt; *</type>
      <name>instance_name_table</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>ab34436e7e0912e08a1c3eecfdc52b45b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hasPrivacy</name>
      <anchorfile>d4/dea/classINETDNS_1_1MDNSTrafficGenerator.html</anchorfile>
      <anchor>a3059dc63f41fb108cea98ae73d35f660</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::PairingData</name>
    <filename>d1/de2/structINETDNS_1_1PairingData.html</filename>
    <member kind="function">
      <type></type>
      <name>PairingData</name>
      <anchorfile>d1/de2/structINETDNS_1_1PairingData.html</anchorfile>
      <anchor>a37e647db092ecc7b7353b5a37b86157d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>crypto_key</name>
      <anchorfile>d1/de2/structINETDNS_1_1PairingData.html</anchorfile>
      <anchor>a4f3bf982c0cea57f02e86e9ab8545354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>friend_id</name>
      <anchorfile>d1/de2/structINETDNS_1_1PairingData.html</anchorfile>
      <anchor>a89a0fbaf9d48ca1297a9ebdac6f7eaa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>privacy_service_instance_name</name>
      <anchorfile>d1/de2/structINETDNS_1_1PairingData.html</anchorfile>
      <anchor>a9fd7c7ce61f678309e0855530895cee1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::PrivateMDNSService</name>
    <filename>d7/d55/structINETDNS_1_1PrivateMDNSService.html</filename>
    <member kind="function">
      <type></type>
      <name>PrivateMDNSService</name>
      <anchorfile>d7/d55/structINETDNS_1_1PrivateMDNSService.html</anchorfile>
      <anchor>af93bec9ec950757f09d05364b43069dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>service_type</name>
      <anchorfile>d7/d55/structINETDNS_1_1PrivateMDNSService.html</anchorfile>
      <anchor>a9d4869ac5c9c60c203ff076706849e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>is_private</name>
      <anchorfile>d7/d55/structINETDNS_1_1PrivateMDNSService.html</anchorfile>
      <anchor>a892e3e4e3e47bc3486e2b2ce1c4fa429</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; std::string &gt;</type>
      <name>offered_to</name>
      <anchorfile>d7/d55/structINETDNS_1_1PrivateMDNSService.html</anchorfile>
      <anchor>a0d7e982ebee2fa2ee19f84e2db4e0361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; std::string &gt;</type>
      <name>offered_by</name>
      <anchorfile>d7/d55/structINETDNS_1_1PrivateMDNSService.html</anchorfile>
      <anchor>a17a6fcd5ae27275c1df0b9a1f26a4788</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::Probe</name>
    <filename>d2/d7c/structINETDNS_1_1Probe.html</filename>
    <member kind="function">
      <type></type>
      <name>Probe</name>
      <anchorfile>d2/d7c/structINETDNS_1_1Probe.html</anchorfile>
      <anchor>a0c30898d1afe8645d0dc78ea3f8818f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>probe_id</name>
      <anchorfile>d2/d7c/structINETDNS_1_1Probe.html</anchorfile>
      <anchor>a01a9f5d7d3bde36a861b1ceb121ed021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETDNS::TimeEvent *</type>
      <name>e</name>
      <anchorfile>d2/d7c/structINETDNS_1_1Probe.html</anchorfile>
      <anchor>acb40093b91b6adc3e6d063ad95a90d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; INETDNS::DNSRecord &gt;</type>
      <name>r</name>
      <anchorfile>d2/d7c/structINETDNS_1_1Probe.html</anchorfile>
      <anchor>a3dbf31ecf9108dc4c69d951bde53a272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n_iter</name>
      <anchorfile>d2/d7c/structINETDNS_1_1Probe.html</anchorfile>
      <anchor>afaf8f1e406d6b7da3ed25299b91dc467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>collision_count</name>
      <anchorfile>d2/d7c/structINETDNS_1_1Probe.html</anchorfile>
      <anchor>a63ac7ef755a05225640133b3e9f8f3e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; MDNSService &gt;</type>
      <name>ref_service</name>
      <anchorfile>d2/d7c/structINETDNS_1_1Probe.html</anchorfile>
      <anchor>aedaa51f983dca1aeafe7e47be3a967ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ProbeState</type>
      <name>s</name>
      <anchorfile>d2/d7c/structINETDNS_1_1Probe.html</anchorfile>
      <anchor>ac7306ea9e055dc1d5ee9fe5e890c9d4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::Query</name>
    <filename>d9/dd9/structINETDNS_1_1Query.html</filename>
    <member kind="function">
      <type></type>
      <name>Query</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>affa5931a2e15438ee8b696d9bf1706a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Query</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>a0104b52f57ff5e1bbbe8bffd6a2f34ef</anchor>
      <arglist>(unsigned short _id, unsigned short _options, unsigned short _qdcount, unsigned short _ancount, unsigned short _nscount, unsigned short _arcount, DNSQuestion *_questions, std::string _src_address)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>id</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>a292c549f675635051ce1cabc156c48bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>options</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>ab5b723e2b1649f8c286f03e683b0381f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>qdcount</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>ac5d9a109a22fb88db83320c111b6b7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>ancount</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>ace7ac04f685a8ac32e1a046884e21947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nscount</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>ab5ed0b705f2e394f0ab180bd5c8fb128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>arcount</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>afc9efe94a7ae48a23ec49e18fcfdf296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct DNSQuestion *</type>
      <name>questions</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>a36ab462f2ec29c0fd557a3476a7014f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>src_address</name>
      <anchorfile>d9/dd9/structINETDNS_1_1Query.html</anchorfile>
      <anchor>a6ae7f5d32c84fbf2202b1510b8ab7c57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::Response</name>
    <filename>d9/d4a/structINETDNS_1_1Response.html</filename>
    <member kind="function">
      <type></type>
      <name>Response</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>af2446348b5ddae2c1bac4c0610e98102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Response</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>abe51b20c7d12d9f9a26555eca3415341</anchor>
      <arglist>(unsigned short _id, unsigned short _options, unsigned short _qdcount, unsigned short _ancount, unsigned short _nscount, unsigned short _arcount, DNSRecord *_answers, DNSRecord *_authoritative, DNSRecord *_additional)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>id</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>abec2501b4cd54b887e7376b9fa12d661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>options</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>a330087cf3a1e77bb67a50c30f203776d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>qdcount</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>a9108289e93361388651479a3243250ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>ancount</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>aecd1f36db3be977708fb02d0ac9bc352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nscount</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>a029b4d2e591c8db2bbd99021e021a022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>arcount</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>a9882cee20c1e765c448edfdf62171645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct DNSRecord *</type>
      <name>answers</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>a85b4e10942e44cfd324a8ed52d4b428d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct DNSRecord *</type>
      <name>authoritative</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>a1274c496c11d33b99e88e26fcac1167b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct DNSRecord *</type>
      <name>additional</name>
      <anchorfile>d9/d4a/structINETDNS_1_1Response.html</anchorfile>
      <anchor>a7ef05fa7c03a642493ff4ec8ed8cd582</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SignalReceiver</name>
    <filename>d0/d5e/classSignalReceiver.html</filename>
    <member kind="function">
      <type></type>
      <name>SignalReceiver</name>
      <anchorfile>d0/d5e/classSignalReceiver.html</anchorfile>
      <anchor>aa20a1f07b5b88219a40bf0de55df209b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SignalReceiver</name>
      <anchorfile>d0/d5e/classSignalReceiver.html</anchorfile>
      <anchor>ab67a0210f0fac0604f2fe5de717f255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>d0/d5e/classSignalReceiver.html</anchorfile>
      <anchor>ab7f7fcec9929905c82de0a1ae44195c3</anchor>
      <arglist>(std::unordered_map&lt; std::string, int &gt; parMap, void *additionalPayload)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soa</name>
    <filename>d2/dd0/structsoa.html</filename>
    <member kind="function">
      <type></type>
      <name>soa</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>ad12690d9b3dd51576d3019ccc869cdc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mname</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a76551b266771bd26ebb8d5e10ae9afa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>rname</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>ad6cf07c12ed82c2536dc37f339dac693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>serial</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a91695888193c05a8107efdf8983a135b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>refresh</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a7bcb46ed45ffe764a9fce7222de5199c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>retry</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>aa4c4275a478746ee76f0d2c246a69e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>expire</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a30170b676da12c619dd163e330170452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>minimum</name>
      <anchorfile>d2/dd0/structsoa.html</anchorfile>
      <anchor>a7fdb828eb44d1f48e7f4e9a30a2f5e19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETDNS::SRVData</name>
    <filename>d4/d70/structINETDNS_1_1SRVData.html</filename>
    <member kind="function">
      <type></type>
      <name>SRVData</name>
      <anchorfile>d4/d70/structINETDNS_1_1SRVData.html</anchorfile>
      <anchor>a24e7ae14944abd01d4385d370939db46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>service</name>
      <anchorfile>d4/d70/structINETDNS_1_1SRVData.html</anchorfile>
      <anchor>a64209d3e005b76afd056cda41746faa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>proto</name>
      <anchorfile>d4/d70/structINETDNS_1_1SRVData.html</anchorfile>
      <anchor>a62386f029cd174d68325c1850f8d6d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>d4/d70/structINETDNS_1_1SRVData.html</anchorfile>
      <anchor>afc1dfe32eb10c50985b9fff6072af8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>target</name>
      <anchorfile>d4/d70/structINETDNS_1_1SRVData.html</anchorfile>
      <anchor>a46d2aa8005a184effc6f096d68e30e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>ttl</name>
      <anchorfile>d4/d70/structINETDNS_1_1SRVData.html</anchorfile>
      <anchor>a397b7f2384c1fa595792f6af9477262b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>weight</name>
      <anchorfile>d4/d70/structINETDNS_1_1SRVData.html</anchorfile>
      <anchor>a0c4905678ad9ed21736f9711b636b99f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>priority</name>
      <anchorfile>d4/d70/structINETDNS_1_1SRVData.html</anchorfile>
      <anchor>a1504c5d62ef62a298d1c323531b6fb9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>port</name>
      <anchorfile>d4/d70/structINETDNS_1_1SRVData.html</anchorfile>
      <anchor>a62699ffdc58ca583317fb4e499834fbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::TimeEvent</name>
    <filename>d8/deb/classINETDNS_1_1TimeEvent.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeEvent</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a0a6a44c5fe8a503dbc8c36671b7be98a</anchor>
      <arglist>(void *_scheduler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeEvent</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a490b57b07b522b023bfa8019a1af717f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>getData</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a472c6253aa98b255a31333f0f623b286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a79bb761b372c06f882778db91967e133</anchor>
      <arglist>(std::shared_ptr&lt; void &gt; _data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performCallback</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a8c143eeeef8beeaf77c3ce7b32dd9669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>ad018f300624983183ecbadf3850891c4</anchor>
      <arglist>(void(_callback)(INETDNS::TimeEvent *, std::shared_ptr&lt; void &gt;, void *))</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getLastRun</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a0dfe68c3c3432df2708a9bf4a04bbfcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastRun</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a0b7f5881e26349a188a6c25fe3cfb64b</anchor>
      <arglist>(simtime_t _last_run)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getExpiry</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>ad7d1a254db46707ed69f5b92290956a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpiry</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a3409f6c7d1839888b902b94d0b9161c5</anchor>
      <arglist>(simtime_t _expiry)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>expiry</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>afef19f80e428c44552a079afcf927a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>last_run</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a25c8d088b238208b7aec317af34b1c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>data</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>ab183f6a8d6487a4f55327c6b74f1956b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>scheduler</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>ad51ab491bbdaadbf0b65b1a34fa60ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>d8/deb/classINETDNS_1_1TimeEvent.html</anchorfile>
      <anchor>a114d841e34493404ec9a7d7135104885</anchor>
      <arglist>)(INETDNS::TimeEvent *, std::shared_ptr&lt; void &gt;, void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::TimeEventComparator</name>
    <filename>da/d51/classINETDNS_1_1TimeEventComparator.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeEventComparator</name>
      <anchorfile>da/d51/classINETDNS_1_1TimeEventComparator.html</anchorfile>
      <anchor>a8c0a60193cbb81eb8a8ea67fc2c95e12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeEventComparator</name>
      <anchorfile>da/d51/classINETDNS_1_1TimeEventComparator.html</anchorfile>
      <anchor>a72e03677d4d5986b7698294127374ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>da/d51/classINETDNS_1_1TimeEventComparator.html</anchorfile>
      <anchor>a323b032b19307dcb4de2745eb55850af</anchor>
      <arglist>(INETDNS::TimeEvent *t1, INETDNS::TimeEvent *t2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::TimeEventSet</name>
    <filename>d7/d91/classINETDNS_1_1TimeEventSet.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeEventSet</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>afba1f1eaf30b5077c8e69366f04fbbfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeEventSet</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>a8f62c52777cc4c31f42a365ed6158cd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTimeEvent</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>af2d08d1e93a288827ffbb5fbfc2c0985</anchor>
      <arglist>(INETDNS::TimeEvent *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTimeEvent</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>a89f16de40783add3752decd70c0ec14a</anchor>
      <arglist>(INETDNS::TimeEvent *t, simtime_t expiry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTimeEvent</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>a58f20fded593af65a446b3ebcf0c5e73</anchor>
      <arglist>(INETDNS::TimeEvent *t)</arglist>
    </member>
    <member kind="function">
      <type>INETDNS::TimeEvent *</type>
      <name>getTimeEventIfDue</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>a8d59e367639a1e1602169bf1c1dcc50d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INETDNS::TimeEvent *</type>
      <name>getTopElement</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>a4c67543ab8ac1c45bf9006fd1afd3a80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>afbda24937b88c39fb3b64af5e0486418</anchor>
      <arglist>(INETDNS::TimeEventSetObserver *observer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>a7b84709d549a41e848be1874a43f2a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; INETDNS::TimeEvent *, INETDNS::TimeEventComparator &gt;</type>
      <name>timeEventSet</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>ab27730c4d1988f86740b1bd1ecc66c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; INETDNS::TimeEventSetObserver * &gt;</type>
      <name>observers</name>
      <anchorfile>d7/d91/classINETDNS_1_1TimeEventSet.html</anchorfile>
      <anchor>a6712fa9a520f62e1caa2a0069fef862e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INETDNS::TimeEventSetObserver</name>
    <filename>d9/d91/classINETDNS_1_1TimeEventSetObserver.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>d9/d91/classINETDNS_1_1TimeEventSetObserver.html</anchorfile>
      <anchor>a85ab8aab736e312443be13b31d1f63ea</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>zone_entry</name>
    <filename>de/d38/structzone__entry.html</filename>
    <member kind="function">
      <type></type>
      <name>zone_entry</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a6f07e0dc882f3b59b3791d7a34da6fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>domain</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a8887a19d7e9d94337189b0092ae99e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>__class</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a0e1fcd063499a268d482a1cb8ad2d9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a4c3427d8ce2615d479b3c04c0aaaa710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>data</name>
      <anchorfile>de/d38/structzone__entry.html</anchorfile>
      <anchor>a64e8a85c90a434fb015fe3e6eae6a15e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>batch</name>
    <filename>dd/db3/namespacebatch.html</filename>
    <member kind="function">
      <type>def</type>
      <name>run_command</name>
      <anchorfile>dd/db3/namespacebatch.html</anchorfile>
      <anchor>a96352d7e63b5d4b6972972e55f8d7738</anchor>
      <arglist>(cmd)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>performRun</name>
      <anchorfile>dd/db3/namespacebatch.html</anchorfile>
      <anchor>a9181a7dca55761ae90d1006d3d5eb168</anchor>
      <arglist>(low, high)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>main</name>
      <anchorfile>dd/db3/namespacebatch.html</anchorfile>
      <anchor>a710a34fb71b616741b0fa45385a1d5e7</anchor>
      <arglist>(argv)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>INETDNS</name>
    <filename>d3/da4/namespaceINETDNS.html</filename>
    <class kind="struct">INETDNS::CachedQuery</class>
    <class kind="class">INETDNS::DNSCache</class>
    <class kind="struct">INETDNS::DNSQuestion</class>
    <class kind="struct">INETDNS::DNSRecord</class>
    <class kind="class">INETDNS::DNSSimpleCache</class>
    <class kind="struct">INETDNS::DNSTimeRecord</class>
    <class kind="class">INETDNS::DNSTimeRecordComparator</class>
    <class kind="class">INETDNS::DNSTTLCache</class>
    <class kind="struct">INETDNS::FriendData</class>
    <class kind="class">INETDNS::MDNSAnnouncer</class>
    <class kind="struct">INETDNS::MDNSKey</class>
    <class kind="struct">INETDNS::MDNSProbeJob</class>
    <class kind="class">INETDNS::MDNSProbeScheduler</class>
    <class kind="struct">INETDNS::MDNSQueryJob</class>
    <class kind="class">INETDNS::MDNSQueryScheduler</class>
    <class kind="struct">INETDNS::MDNSResponseJob</class>
    <class kind="class">INETDNS::MDNSResponseScheduler</class>
    <class kind="struct">INETDNS::MDNSService</class>
    <class kind="class">INETDNS::MDNSTrafficGenerator</class>
    <class kind="struct">INETDNS::PairingData</class>
    <class kind="struct">INETDNS::PrivateMDNSService</class>
    <class kind="struct">INETDNS::Probe</class>
    <class kind="struct">INETDNS::Query</class>
    <class kind="struct">INETDNS::Response</class>
    <class kind="struct">INETDNS::SRVData</class>
    <class kind="class">INETDNS::TimeEvent</class>
    <class kind="class">INETDNS::TimeEventComparator</class>
    <class kind="class">INETDNS::TimeEventSet</class>
    <class kind="class">INETDNS::TimeEventSetObserver</class>
    <member kind="typedef">
      <type>struct INETDNS::CachedQuery</type>
      <name>cached_query</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a7db29282c1d8f1b7030f9914eb931368</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::DNSTimeRecord</type>
      <name>dns_time_record</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>abefe782e12afe55e2e1fb547c1cfa8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::PrivateMDNSService</type>
      <name>private_mdns_service</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aab3b854e909d441056eb5626d51bce11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::PairingData</type>
      <name>pairing_data</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a4caf1598a061caa7623f766ebc6b4ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::FriendData</type>
      <name>friend_data</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a45d13189bf54fd4f0685f975edca0042</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::MDNSProbeJob</type>
      <name>probe_job</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a6db591d6a363bee0a67ee63d876cb216</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::MDNSQueryJob</type>
      <name>query_job</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a42f02fb85b8778955552c73f6307869b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::MDNSResponseJob</type>
      <name>mdns_response_job</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a27348ae33bf2c2448126d2917726e6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::MDNSService</type>
      <name>mdns_service</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ac0108268e00e05106db7fb71edc63c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct INETDNS::MDNSKey</type>
      <name>mdns_key</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ae85f52eebd20a635cb4cd7e25657f72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProbeState</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3a61cbbde60e6820b0e2e8781f02062a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AnnouncerState</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a321531f534bd6ad49adca7675fcd6084</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::regex</type>
      <name>privacy_type_expr</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a23f87df3adaea3049174f4a1547c43d5</anchor>
      <arglist>(&quot;(.*)(_.+\\._.+\\.local)&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>extract_stype</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa67588160d67afc493b08b42d38c24c7</anchor>
      <arglist>(std::string label)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::PrivateMDNSService &gt;</type>
      <name>private_service_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ad0605005d258decb586bbe32d1248da9</anchor>
      <arglist>(std::string service_type, int is_private)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::PairingData &gt;</type>
      <name>pairing_data_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a0ce23ed11b0565e8b0a9a4b45e81f4e9</anchor>
      <arglist>(std::string crypto_key, std::string friend_id, std::string privacy_instance_name)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::FriendData &gt;</type>
      <name>friend_data_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a953020d99272e61b9d7b71259cb08ab4</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::PairingData &gt; pdata, int port)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; FriendData &gt;</type>
      <name>friend_data_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a906e6adf8db3f18f5a45a922d200cdf6</anchor>
      <arglist>(std::shared_ptr&lt; PairingData &gt; pdata, int port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isProbe</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a2adb64e0f940710b8e722c0d2837d2a2</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isAnnouncement</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a7ae9eee3d4171e087f226d0e5337bb3c</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a42b3c33b175ac178203531cb6a8d0e50</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa98ddb5ae26cb4a82b37f92ce302b8ce</anchor>
      <arglist>(DNSPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isGoodbye</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a36bdae0fc0ec948ad93d08244ce29b16</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; MDNSKey &gt;</type>
      <name>mdns_key_new</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a058dcb4eed5c86ebed041eca2530335b</anchor>
      <arglist>(std::string name, int type, int _class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mdns_key_free</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a528113814a3a7fe4ee292867f11218e4</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKey</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ae2f3e2460bf4b27ec320f4416c10f136</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key1, std::shared_ptr&lt; INETDNS::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMDNSKeyANY</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a48737701ab9f97252d64ec8614d07c50</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key1, std::shared_ptr&lt; INETDNS::MDNSKey &gt; key2)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::DNSQuestion &gt;</type>
      <name>createQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3d31bc3adb5d189a2656f203ad0ce925</anchor>
      <arglist>(std::string name, unsigned short type, unsigned short _class)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; INETDNS::DNSQuestion &gt;</type>
      <name>createQuestionFromKey</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a788edc4ad1aa036eb39e6e491d5af8e5</anchor>
      <arglist>(std::shared_ptr&lt; INETDNS::MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>createQuestionFromKey</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa788d1436e84bbdaff6f36063d249c11</anchor>
      <arglist>(std::shared_ptr&lt; MDNSKey &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a396dfbaab84ed23df012c68752a3d927</anchor>
      <arglist>(std::string msg_name, std::string name, unsigned short dnsclass, unsigned short type, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createNQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>abb292c753ff4e64971e3e7cee51ead66</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short rd)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Query &gt;</type>
      <name>resolveQuery</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>acae9b7f5bf011212bad4d8b298d0870e</anchor>
      <arglist>(cPacket *query)</arglist>
    </member>
    <member kind="function">
      <type>DNSPacket *</type>
      <name>createResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>afdcec0fd8f3ca5837495e5f2fb0735f1</anchor>
      <arglist>(std::string msg_name, unsigned short qdcount, unsigned short ancount, unsigned short nscount, unsigned short arcount, unsigned short id, unsigned short opcode, unsigned short AA, unsigned short rd, unsigned short ra, unsigned short rcode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a007b64b9d3072035f7cec024582d40a3</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSQuestion &gt; q, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAnswer</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>af550670c19137f9b7fdae7bd281e3610</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAuthority</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a598eb5048372fc1da6d1a34fde78ee2f</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>appendAdditional</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>add860b7e4107e5c2620320ed4b64c011</anchor>
      <arglist>(DNSPacket *p, std::shared_ptr&lt; DNSRecord &gt; r, int index)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Response &gt;</type>
      <name>resolveResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a4693874ccebfd664d6a350c0df67ab6f</anchor>
      <arglist>(cPacket *response)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isDNSpacket</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3473496cbc669d4daf644e7f1371efe4</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isQueryOrResponse</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a9361c8f287399f9aeb90bd02b5428e3b</anchor>
      <arglist>(cPacket *p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeStringForValue</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3a0e990cd5d324e3b12455734b7a272d</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTypeValueForString</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a98242bda4c87eae07bce0ed67d7a15aa</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassStringForValue</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ab2b2a3c35b06bc02f2891e68082cfec1</anchor>
      <arglist>(int _class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a6059f4c9936c4b50245de536d8dbc6ee</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDNSQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a4816047c1655c25f98aff41a3043ce8d</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dnsPacketToString</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3e50b42e1611e4746b6305407603222b</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tokenizeAndGetSize</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a048d1d4f48e158eb816f6aa2cf31a411</anchor>
      <arglist>(std::string s, std::unordered_map&lt; std::string, bool &gt; *ncm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>estimateDnsPacketSize</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>ac9ec70019bb30a7d048265134adf542e</anchor>
      <arglist>(DNSPacket *packet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa6e77d8e91f827013fc27d80590094a6</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>freeDnsRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>acc6dc92c049a26c6f568909ff2c8f2c4</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aacc949cac360ac408830eefc0c7c25c4</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSRecord &gt;</type>
      <name>copyDnsRecord</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>afef4a3cb7d7646aedfea709247c2fd54</anchor>
      <arglist>(DNSRecord *r)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a63abc6faa5bab6a4c9bb21cfbd7c1787</anchor>
      <arglist>(std::shared_ptr&lt; DNSQuestion &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DNSQuestion &gt;</type>
      <name>copyDnsQuestion</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>af08370d111f8853bb627704239100c0c</anchor>
      <arglist>(DNSQuestion *q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordDataEqual</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>aa3af98a7825d362038c9cad07eeddb51</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recordEqualNoData</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a010660bcb277815b2dc0aed40b040fbb</anchor>
      <arglist>(std::shared_ptr&lt; DNSRecord &gt; r1, std::shared_ptr&lt; DNSRecord &gt; r2)</arglist>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>getTypeArray</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a3e2cfe6651104ce8a0aae993b47dfaf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stdstr_has_suffix</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a041b8d30f03953c0e5893e43b1d8a958</anchor>
      <arglist>(std::string base, std::string suffix)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>DNS_TYPE_ARRAY_ANY</name>
      <anchorfile>d3/da4/namespaceINETDNS.html</anchorfile>
      <anchor>a70d2ad1a8d38d7aff6342ef76bd9e629</anchor>
      <arglist>[13]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>NEDSupport</name>
    <filename>classNEDSupport_1_1ParameterRef.html</filename>
  </compound>
  <compound kind="group">
    <name>MacrosFSM</name>
    <title>Final State Machine macros</title>
    <filename>group__MacrosFSM.html</filename>
  </compound>
  <compound kind="group">
    <name>MacrosWatch</name>
    <title>WATCH macros</title>
    <filename>group__MacrosWatch.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbersCont</name>
    <title>Continuous distributions</title>
    <filename>group__RandomNumbersCont.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbersDiscr</name>
    <title>Discrete distributions</title>
    <filename>group__RandomNumbersDiscr.html</filename>
  </compound>
  <compound kind="group">
    <name>SimCore</name>
    <title>Simulation core classes</title>
    <filename>group__SimCore.html</filename>
  </compound>
  <compound kind="group">
    <name>Containers</name>
    <title>Container classes</title>
    <filename>group__Containers.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbers</name>
    <title>Random number generation</title>
    <filename>group__RandomNumbers.html</filename>
  </compound>
  <compound kind="group">
    <name>Statistics</name>
    <title>Statistical data collection</title>
    <filename>group__Statistics.html</filename>
  </compound>
  <compound kind="group">
    <name>SimSupport</name>
    <title>Utility classes</title>
    <filename>group__SimSupport.html</filename>
  </compound>
  <compound kind="group">
    <name>Envir</name>
    <title>User interface: cEnvir and ev</title>
    <filename>group__Envir.html</filename>
  </compound>
  <compound kind="group">
    <name>EnumsTypes</name>
    <title>Enums, types, function typedefs</title>
    <filename>group__EnumsTypes.html</filename>
  </compound>
  <compound kind="group">
    <name>Functions</name>
    <title>Functions</title>
    <filename>group__Functions.html</filename>
  </compound>
  <compound kind="group">
    <name>Macros</name>
    <title>Macros</title>
    <filename>group__Macros.html</filename>
  </compound>
  <compound kind="group">
    <name>EnvirExtensions</name>
    <title>Extension interfaces</title>
    <filename>group__EnvirExtensions.html</filename>
  </compound>
  <compound kind="group">
    <name>Internals</name>
    <title>Internal classes</title>
    <filename>group__Internals.html</filename>
  </compound>
  <compound kind="group">
    <name>ParsimBrief</name>
    <title>Parallel simulation extension</title>
    <filename>group__ParsimBrief.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbersGen</name>
    <title>Random number generation</title>
    <filename>group__RandomNumbersGen.html</filename>
  </compound>
  <compound kind="group">
    <name>MacrosReg</name>
    <title>Registration macros</title>
    <filename>group__MacrosReg.html</filename>
  </compound>
  <compound kind="group">
    <name>FunctionsString</name>
    <title>String-related</title>
    <filename>group__FunctionsString.html</filename>
  </compound>
  <compound kind="page">
    <name>main</name>
    <title>OMNeT++ API Reference</title>
    <filename>main</filename>
  </compound>
  <compound kind="page">
    <name>APIChanges</name>
    <title>API Changes</title>
    <filename>APIChanges</filename>
  </compound>
  <compound kind="page">
    <name>md_README</name>
    <title>DNS and mDNS models for INET</title>
    <filename>d0/d30/md_README</filename>
  </compound>
</tagfile>
