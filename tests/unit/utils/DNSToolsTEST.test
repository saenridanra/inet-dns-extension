%description:
Test methods in DNSTools

%includes:
#include <DNS.h>
#include <DNSTools.h>
#include <string.h>

%global:

#define P_KV(X,Y) #X << "=" << Y << ";"

std::string msg_name = "test-message";
std::string name = "test-message";

void testQueryCreate() {
    DNSPacket* p = ODnsExtension::createQuery(msg_name, name, DNS_CLASS_IN,
            DNS_TYPE_VALUE_A, 0, 1);

    ev << "[testQueryCreate] Packet Question Size: " << p->getNumQuestions()
            << "\n";
    ev << "[testQueryCreate] Packet Answer Size: " << p->getNumAnswers()
            << "\n";
    ev << "[testQueryCreate] Packet Authority Size: " << p->getNumAuthorities()
            << "\n";
    ev << "[testQueryCreate] Packet Additional Size: " << p->getNumAdditional()
            << "\n";
}

void testNQueryCreate() {
    DNSPacket* p = ODnsExtension::createNQuery(msg_name, 5, 0, 0, 0, 0, 1);

    for (int i = 0; i < 5; i++) {

        std::shared_ptr < ODnsExtension::DNSQuestion > q = std::shared_ptr
                < ODnsExtension::DNSQuestion
                > (new ODnsExtension::DNSQuestion(
                        std::string("packet-") + std::to_string(i),
                        DNS_TYPE_VALUE_A, DNS_CLASS_IN));
        ODnsExtension::appendQuestion(p, q, i);
    }

    ev << "[testNQueryCreate] Packet Question Size: " << p->getNumQuestions()
            << "\n";
    ev << "[testNQueryCreate] Packet Answer Size: " << p->getNumAnswers()
            << "\n";
    ev << "[testNQueryCreate] Packet Authority Size: " << p->getNumAuthorities()
            << "\n";
    ev << "[testNQueryCreate] Packet Additional Size: " << p->getNumAdditional()
            << "\n";

    for (int i = 0; i < 5; i++) {
        ev << "[testNQueryCreate][" << p->getQuestions(i).qname << "]\n";
    }
}

void testResolveQuery() {
    DNSPacket* p = ODnsExtension::createQuery(msg_name, name, DNS_CLASS_IN,
            DNS_TYPE_VALUE_A, 0, 1);

    std::shared_ptr < ODnsExtension::Query > q = ODnsExtension::resolveQuery(p);
    ev << "[testResolveQuery] " << P_KV(qdcount, q->qdcount)
            << P_KV(ancount, q->ancount) << P_KV(nscount, q->nscount)
            << P_KV(arcount, q->arcount) << P_KV(qr, DNS_HEADER_QR(q->options))
            << "\n";

}

void testCreateResolveResponse() {
    DNSPacket* p = ODnsExtension::createResponse(msg_name, 0, 1, 0, 1, 0, 0, 1,
            1, 1, 0);

    std::shared_ptr < ODnsExtension::DNSRecord > an = std::shared_ptr
            < ODnsExtension::DNSRecord > (new ODnsExtension::DNSRecord());
    std::shared_ptr < ODnsExtension::DNSRecord > ar = std::shared_ptr
            < ODnsExtension::DNSRecord > (new ODnsExtension::DNSRecord());

    an->rname = "www.test.com";
    an->rtype = DNS_TYPE_VALUE_CNAME;
    an->rclass = DNS_CLASS_IN;
    an->ttl = 3600;
    an->strdata = "test.com";

    ar->rname = "test.com";
    ar->rtype = DNS_TYPE_VALUE_A;
    ar->rclass = DNS_CLASS_IN;
    ar->ttl = 3600;
    ar->strdata = "127.0.0.1";

    ODnsExtension::appendAnswer(p, an, 0);
    ODnsExtension::appendAdditional(p, ar, 0);

    std::shared_ptr < ODnsExtension::Response > r =
            ODnsExtension::resolveResponse(p);

    ev << "[testCreateResolveResponse] " << P_KV(qdcount, r->qdcount)
            << P_KV(ancount, r->ancount) << P_KV(nscount, r->nscount)
            << P_KV(arcount, r->arcount) << P_KV(qr, DNS_HEADER_QR(r->options))
            << P_KV(op, DNS_HEADER_OPCODE(r->options))
            << P_KV(aa, DNS_HEADER_AA(r->options))
            << P_KV(rd, DNS_HEADER_RD(r->options))
            << P_KV(ra, DNS_HEADER_RA(r->options))
            << P_KV(rcode, DNS_HEADER_RCODE(r->options)) << "\n";

}

void testEstimateDnsPacketSize() {

    // First test packet with strdata
    DNSPacket* p = ODnsExtension::createResponse(msg_name, 0, 1, 0, 1, 0, 0, 1,
            1, 1, 0);

    std::shared_ptr < ODnsExtension::DNSRecord > an = std::shared_ptr
            < ODnsExtension::DNSRecord > (new ODnsExtension::DNSRecord());
    std::shared_ptr < ODnsExtension::DNSRecord > ar = std::shared_ptr
            < ODnsExtension::DNSRecord > (new ODnsExtension::DNSRecord());

    an->rname = "www.test.com";
    an->rtype = DNS_TYPE_VALUE_CNAME;
    an->rclass = DNS_CLASS_IN;
    an->ttl = 3600;
    an->strdata = "test.com";
    an->rdlength = an->strdata.length();

    ar->rname = "test.com";
    ar->rtype = DNS_TYPE_VALUE_A;
    ar->rclass = DNS_CLASS_IN;
    ar->ttl = 3600;
    ar->strdata = "127.0.0.1";
    ar->rdlength = ar->strdata.length();

    ODnsExtension::appendAnswer(p, an, 0);
    ODnsExtension::appendAdditional(p, ar, 0);

    ev << "[testEstimateDnsPacketSize] [strdata] size: "
            << ODnsExtension::estimateDnsPacketSize(p) << "\n";

    // Second test packet with SRVData...
    p = ODnsExtension::createResponse(msg_name, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0);

    an = std::shared_ptr
            < ODnsExtension::DNSRecord > (new ODnsExtension::DNSRecord());
    ar = std::shared_ptr
            < ODnsExtension::DNSRecord > (new ODnsExtension::DNSRecord());

    an->rname = "test._testservice._tcp.test.com";
    an->rtype = DNS_TYPE_VALUE_SRV;
    an->rclass = DNS_CLASS_IN;
    an->ttl = 3600;

    std::shared_ptr < ODnsExtension::SRVData > srv = std::shared_ptr
            < ODnsExtension::SRVData > (new ODnsExtension::SRVData());
    srv->service = "testservice";
    srv->proto = "tcp";
    srv->name = "test.com";
    srv->target = "srv.test.com";
    srv->ttl = 3600;
    srv->weight = 0;
    srv->port = 0;
    
    an->rdata = srv;
    

    ar->rname = "test.com";
    ar->rtype = DNS_TYPE_VALUE_A;
    ar->rclass = DNS_CLASS_IN;
    ar->ttl = 3600;
    ar->strdata = "127.0.0.1";
    ar->rdlength = ar->strdata.length();

    ODnsExtension::appendAnswer(p, an, 0);
    ODnsExtension::appendAdditional(p, ar, 0);

    ev << "[testEstimateDnsPacketSize] [srvdata] size: "
            << ODnsExtension::estimateDnsPacketSize(p) << "\n";

}

void testRecordDataEqual(){
    std::shared_ptr<DNSRecord> r1 = std::shared_ptr
            < ODnsExtension::DNSRecord > (new ODnsExtension::DNSRecord());
    r1->rname = "test.com";
    r1->rtype = DNS_TYPE_VALUE_A;
    r1->rclass = DNS_CLASS_IN;
    r1->ttl = 3600;
    r1->strdata = "127.0.0.1";
    r1->rdlength = r1->strdata.length();
    
    std::shared_ptr<DNSRecord> r2 = ODnsExtension::copyDnsRecord(r1);
    
    ev << "[testRecordDataEqual] [r1 == r2]: " << ODnsExtension::recordDataEqual(r1, r2) << "\n";
    
    // change data, see that it is !=
    
    r2->strdata = "127.0.0.2";

    ev << "[testRecordDataEqual] [r1 != r2]: " << ODnsExtension::recordDataEqual(r1, r2) << "\n";
    
}

void testRecordEqualNoData(){
    std::shared_ptr<DNSRecord> r1 = std::shared_ptr
            < ODnsExtension::DNSRecord > (new ODnsExtension::DNSRecord());
    r1->rname = "test.com";
    r1->rtype = DNS_TYPE_VALUE_A;
    r1->rclass = DNS_CLASS_IN;
    r1->ttl = 3600;
    r1->strdata = "127.0.0.1";
    r1->rdlength = r1->strdata.length();
    
    std::shared_ptr<DNSRecord> r2 = ODnsExtension::copyDnsRecord(r1);
    
    ev << "[testRecordEqualNoData] [r1 == r2]: " << ODnsExtension::recordEqualNoData(r1, r2) << "\n";
    
    // change data, see that it is still ==
    
    r2->strdata = "127.0.0.2";

    ev << "[testRecordEqualNoData] [r1.data != r2.data]: " << ODnsExtension::recordEqualNoData(r1, r2) << "\n";
    
    // change type, show that is !=
    
    r2->rtype = DNS_TYPE_VALUE_AAAA;
    
    ev << "[testRecordEqualNoData] [r1.rtype != r2.rtype]: " << ODnsExtension::recordEqualNoData(r1, r2) << "\n";

    // change name, show that is !=
    
    r2->rtype = DNS_TYPE_VALUE_A;
    r2->rname = "test2.com";
    
    ev << "[testRecordEqualNoData] [r1.name != r2.name]: " << ODnsExtension::recordEqualNoData(r1, r2) << "\n";
    
}

%activity:

testQueryCreate();
testNQueryCreate();
testResolveQuery();
testCreateResolveResponse();
testEstimateDnsPacketSize();
testRecordDataEqual();
testRecordEqualNoData();

%contains: stdout
[testQueryCreate] Packet Question Size: 1
[testQueryCreate] Packet Answer Size: 0
[testQueryCreate] Packet Authority Size: 0
[testQueryCreate] Packet Additional Size: 0
[testNQueryCreate] Packet Question Size: 5
[testNQueryCreate] Packet Answer Size: 0
[testNQueryCreate] Packet Authority Size: 0
[testNQueryCreate] Packet Additional Size: 0
[testNQueryCreate][packet-0]
[testNQueryCreate][packet-1]
[testNQueryCreate][packet-2]
[testNQueryCreate][packet-3]
[testNQueryCreate][packet-4]
[testResolveQuery] qdcount=1;ancount=0;nscount=0;arcount=0;qr=0;
[testCreateResolveResponse] qdcount=0;ancount=1;nscount=0;arcount=1;qr=1;op=0;aa=1;rd=1;ra=1;rcode=0;
[testEstimateDnsPacketSize] [strdata] size: 65
[testEstimateDnsPacketSize] [srvdata] size: 85
[testRecordDataEqual] [r1 == r2]: 1
[testRecordDataEqual] [r1 != r2]: 0
[testRecordEqualNoData] [r1 == r2]: 1
[testRecordEqualNoData] [r1.data != r2.data]: 1
[testRecordEqualNoData] [r1.rtype != r2.rtype]: 0
[testRecordEqualNoData] [r1.name != r2.name]: 0