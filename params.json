{"name":"Omnetpp++ DNS Extension","tagline":"This extensions provides classes and functions to simulate DNS and MDNS traffic.","body":"# Omnet++ DNS Extension\r\n\r\nThis extensions provides classes and functions to simulate DNS and\r\nMDNS traffic.\r\n\r\n## Features\r\n\r\n### DNS\r\n- Name servers with recursive resolving capabilities\r\n- Authoritative servers with DNS zone configuration using master files\r\n- Caching servers without zones, only recursively resolving\r\n- DNS Cache base that can be extended\r\n  - Caches based on different policies possible\r\n- DNS Client that can query a DNS server\r\n\r\nSee RFC 1035 https://tools.ietf.org/html/rfc1035 as a reference.\r\n\r\n### Stateless DNS\r\n- Stateless DNS simulation according to\r\nhttps://netfuture.ch/2014/12/stateless-dns/.\r\n- Echoserver impelementation currently supporting:\r\n  - `.00.` - reflects the address in the query to the alias\r\n  - `cca` - builds a cname chain, pointing to an address\r\n\r\n  operations.\r\n\r\n### MDNS\r\nThe avahi-daemon was used as a reference for designing MDNS resolvers in this\r\nextension.\r\n\r\n- MDNS resolver with the capabilities of\r\n  - Publishing services via multicast\r\n  - Revoking services via multicast\r\n  - Perform queries via multicast\r\n  - Known answer suppression\r\n  - Duplicate question suppression\r\n  - Duplicate answer suppression\r\n  - Maintaining time schedules according to the RFC 6762\r\n\r\nSee RFC 6762 http://tools.ietf.org/html/rfc6762 for reference.\r\n\r\n### MDNS Privacy\r\n\r\nIn parallel to the extension of the avahi-daemon to enhance privacy (https://netfuture.ch/2014/12/a-multicast-avoiding-privacy-extension-for-the-avahi-zeroconf-daemon/) we worked on a simulation that allows us to measure the effects of our\r\nextension.\r\n\r\n- Privacy extension according to the reference implementation done for the\r\navahi-daemon\r\n- If the omnetpp code is edited, packets are visually distinguished. A tutorial\r\non how to do this can be found in the wiki.\r\n\r\n## Installation and Usage\r\n\r\n**Make sure you fulfill the requirements stated below.**\r\n\r\n### Using the IDE\r\n\r\n1. Get the source code for this extension.\r\n2. Import the project into the Omnet++ IDE.\r\n3. Import the INET framework into the IDE and build it.\r\n4. Goto Project Properties > Omnet++ > Makemake\r\n - Select the src folder > Makemake > Options\r\n - Check shared library and\r\n - `Export this shared/static library for other projects`\r\n - If you want debug output include in the tabs\r\n    - Custom > Makefrag `CFLAGS+= -DDEBUG_ENABLED CXXFLAGS+= -DDEBUG_ENABLED`\r\n5. Include the compiled INET library object in the lib dir.\r\n6. Enjoy\r\n\r\n### Using the command line\r\n\r\n1. Get the source code for this extension.\r\n2. Change to the project directory.\r\n3. Run `make makefiles` and provide the INET framework directory.\r\n4. Run `make`.\r\n5. To run examples you must run\r\n        opp_run -l absolute_path_to_project \\\r\n        -l absolute_path_to_inet_library \\\r\n        -n absolute_path_to_project_src;absolute_path_to_inet_src\" \\\r\n        absolute_path_to_simulation_ini_file\r\n\r\n6. Enjoy\r\n\r\n## Limitations\r\n\r\n- All applications in this extension need to be wrapped within a Standard Host.\r\n- Currently no rules like bailiwick have been implemented.\r\n- Network Randomization currently not implemented, i.e.\r\n  - Master Files have to be provided manually.\r\n  - DNS Servers and network infrastucture has to be defined manually.\r\n- MDNS Resolvers have to be configured manually.\r\n  - This includes all relevant services published from the start.\r\n  - This includes relevant information for the privacy extension.\r\n- No statistics are currently recorded\r\n\r\n## Future Work\r\n\r\n- Proper network randomization for all applications\r\n  - For DNS Servers and Clients\r\n  - For MDNS Resolvers including the privacy extension\r\n- Proper recording of relevant metrics\r\n- Simulation network within a wireless area network\r\n- More sophisticated DNS caches\r\n- DNSSec extension\r\n- Better integration with the existing Omnet++ structure\r\n\r\n\r\n## Contributors\r\n\r\n**Project maintainer**:\r\n\r\n- Andreas Rain (andreas.rain(at){uni-konstanz.de , gmail.com}),\r\nGithub: @saenridanra\r\n - Project created as part of my master project\r\n to measure the effects of multicast\r\n traffic on wireless networks.\r\n\r\n## Requirements\r\n\r\n- working OMNeT++ (v4.4) installation. (Download from http://omnetpp.org)\r\n- working INET-Framework installation (v2.3). (Download from http://inet.omnetpp.org)\r\n- a compiler that supports c++11\r\n\r\nCheck whether the installations work using the examples provided in the INET\r\nframework.\r\n\r\n## Documentation\r\n\r\nThe projects code is fully documented using Doxygen and is placed\r\nin the `doc` folder, next to the source code.\r\n\r\n## License\r\n\r\nThis work is published under the MIT License http://opensource.org/licenses/MIT.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}